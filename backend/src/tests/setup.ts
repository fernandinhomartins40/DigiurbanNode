// ====================================================================
// üß™ SETUP DOS TESTES - DIGIURBAN AUTH SYSTEM
// ====================================================================
// Configura√ß√£o inicial para execu√ß√£o dos testes
// Setup de ambiente e limpeza de dados
// ====================================================================

import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ====================================================================
// CONFIGURA√á√ÉO DE AMBIENTE
// ====================================================================

// Carregar vari√°veis de ambiente para testes
dotenv.config({ 
  path: path.resolve(__dirname, '../../.env.test') 
});

// Configura√ß√µes padr√£o para testes
process.env.NODE_ENV = 'test';
process.env.LOG_LEVEL = 'error'; // Reduzir logs durante testes
process.env.DATABASE_URL = process.env.DATABASE_URL || ':memory:'; // SQLite em mem√≥ria

// ====================================================================
// CONFIGURA√á√ïES GLOBAIS DE TESTE
// ====================================================================

// Configurar timeouts mais longos se necess√°rio
jest.setTimeout(30000);

// Configurar timezone para consist√™ncia
process.env.TZ = 'America/Sao_Paulo';

// ====================================================================
// MOCKS GLOBAIS
// ====================================================================

// Mock para console em testes (reduzir ru√≠do)
const originalConsole = { ...console };

beforeAll(() => {
  // Silenciar logs durante testes, exceto erros cr√≠ticos
  console.log = jest.fn();
  console.info = jest.fn();
  console.warn = jest.fn();
  // Manter console.error para debug quando necess√°rio
});

afterAll(() => {
  // Restaurar console original
  Object.assign(console, originalConsole);
});

// ====================================================================
// CONFIGURA√á√ïES DE BANCO DE DADOS PARA TESTES
// ====================================================================

// Mock para fun√ß√µes de tempo (se necess√°rio)
beforeEach(() => {
  // Reset de mocks antes de cada teste
  jest.clearAllMocks();
});

// ====================================================================
// UTILIT√ÅRIOS DE TESTE
// ====================================================================

// Fun√ß√£o auxiliar para esperar um tempo determinado
export const waitFor = (ms: number): Promise<void> => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

// Fun√ß√£o para gerar dados de teste aleat√≥rios
export const generateTestData = {
  email: (): string => `test${Math.random().toString(36).substr(2, 9)}@teste.com`,
  password: (): string => `TestPass${Math.random().toString(36).substr(2, 4)}!`,
  name: (): string => `Test User ${Math.random().toString(36).substr(2, 5)}`,
  tenantName: (): string => `Test Tenant ${Math.random().toString(36).substr(2, 5)}`,
  uuid: (): string => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }
};

// Fun√ß√£o para limpar dados de teste
export const cleanupTestData = {
  users: [] as string[],
  tenants: [] as string[],
  
  addUser: (userId: string) => {
    cleanupTestData.users.push(userId);
  },
  
  addTenant: (tenantId: string) => {
    cleanupTestData.tenants.push(tenantId);
  },
  
  reset: () => {
    cleanupTestData.users = [];
    cleanupTestData.tenants = [];
  }
};

// ====================================================================
// CONFIGURA√á√ÉO DE LIMPEZA AP√ìS TESTES
// ====================================================================

afterEach(async () => {
  // Limpeza autom√°tica de dados de teste (se implementado)
  // Esta fun√ß√£o pode ser expandida para limpar dados espec√≠ficos
  
  // Reset do estado de cleanup
  cleanupTestData.reset();
});

// ====================================================================
// CONFIGURA√á√ïES DE SEGURAN√áA PARA TESTES
// ====================================================================

// Desabilitar verifica√ß√µes de rate limiting durante testes
process.env.DISABLE_RATE_LIMITING = 'true';

// Usar configura√ß√µes de JWT mais simples para testes
process.env.JWT_SECRET = 'test-jwt-secret-key-for-testing-only';
process.env.JWT_REFRESH_SECRET = 'test-refresh-jwt-secret-key-for-testing-only';
process.env.JWT_EXPIRES_IN = '1h';
process.env.JWT_REFRESH_EXPIRES_IN = '7d';

// ====================================================================
// CONFIGURA√á√ïES DE EMAIL PARA TESTES
// ====================================================================

// Desabilitar envio de emails reais durante testes
process.env.DISABLE_EMAIL_SENDING = 'true';
process.env.EMAIL_PROVIDER = 'test';

console.info('üß™ Setup de testes configurado com sucesso');
console.info(`üìÅ Ambiente: ${process.env.NODE_ENV}`);
console.info(`üóÑÔ∏è  Banco: ${process.env.DATABASE_URL}`);