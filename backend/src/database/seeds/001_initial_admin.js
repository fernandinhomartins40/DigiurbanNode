// ====================================================================
// üå± SEED INICIAL - ADMIN SUPER USER (KNEX COMPATIBLE)
// ====================================================================
// Cria√ß√£o segura de admin inicial via vari√°veis de ambiente
// ====================================================================

const bcrypt = require('bcryptjs');

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.seed = async function(knex) {
  console.log('üå± Iniciando cria√ß√£o de admin inicial...');

  try {
    // Validar vari√°veis obrigat√≥rias
    const adminEmail = process.env.INITIAL_ADMIN_EMAIL;
    const adminPassword = process.env.INITIAL_ADMIN_PASSWORD;
    const adminName = process.env.INITIAL_ADMIN_NAME || 'Super Administrador';
    
    if (!adminEmail || !adminPassword) {
      console.log('‚ö†Ô∏è INITIAL_ADMIN_EMAIL ou INITIAL_ADMIN_PASSWORD n√£o definidos');
      console.log('   Pulando cria√ß√£o de admin inicial...');
      return;
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(adminEmail)) {
      throw new Error(`üö® Email inv√°lido: ${adminEmail}`);
    }

    // Verificar se admin j√° existe
    const existingAdmin = await knex('users').where({ email: adminEmail }).first();
    if (existingAdmin) {
      console.log('‚úÖ Admin inicial j√° existe:', adminEmail);
      return;
    }

    // Gerar hash seguro da senha
    console.log('üîê Gerando hash seguro da senha...');
    const passwordHash = await bcrypt.hash(adminPassword, 12);

    // Verificar se existe tenant padr√£o
    let tenantId = null;
    const tenantCode = process.env.INITIAL_ADMIN_TENANT_CODE;
    
    if (tenantCode) {
      console.log('üèõÔ∏è Verificando tenant:', tenantCode);
      
      // Criar tenant se necess√°rio
      let tenant = await knex('tenants').where({ codigo: tenantCode }).first();
      
      if (!tenant) {
        console.log('üèõÔ∏è Criando tenant padr√£o...');
        [tenantId] = await knex('tenants').insert({
          nome: process.env.INITIAL_ADMIN_TENANT_NAME || 'Administra√ß√£o Central',
          codigo: tenantCode,
          cidade: 'S√£o Paulo',
          estado: 'SP',
          cnpj: process.env.INITIAL_ADMIN_TENANT_CNPJ || '00.000.000/0001-00',
          status: 'ativo',
          created_at: new Date(),
          updated_at: new Date()
        });
        console.log('‚úÖ Tenant criado:', tenantCode);
      } else {
        tenantId = tenant.id;
        console.log('‚úÖ Tenant j√° existe:', tenantCode);
      }
    }

    // Criar admin inicial
    console.log('üë§ Criando usu√°rio admin inicial...');
    const [adminId] = await knex('users').insert({
      nome_completo: adminName,
      email: adminEmail,
      password: passwordHash,
      role: 'super_admin',
      status: 'ativo',
      tenant_id: tenantId,
      email_verified_at: new Date(),
      created_at: new Date(),
      updated_at: new Date()
    });

    console.log('‚úÖ Admin inicial criado com sucesso!');
    console.log(`   Email: ${adminEmail}`);
    console.log(`   Role: super_admin`);
    console.log(`   ID: ${adminId}`);
    
    // Avisos de seguran√ßa
    console.log('\nüîí IMPORTANTE - SEGURAN√áA:');
    console.log('   ‚Ä¢ Altere a senha ap√≥s primeiro login');
    console.log('   ‚Ä¢ Configure 2FA se dispon√≠vel');
    console.log('   ‚Ä¢ Monitore logs de acesso regularmente\n');

  } catch (error) {
    console.error('‚ùå Erro ao criar admin inicial:', error.message);
    throw error;
  }
};