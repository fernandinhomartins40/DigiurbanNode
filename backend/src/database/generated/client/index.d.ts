
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model ActivityLog
 * 
 */
export type ActivityLog = $Result.DefaultSelection<Prisma.$ActivityLogPayload>
/**
 * Model SmtpUser
 * 
 */
export type SmtpUser = $Result.DefaultSelection<Prisma.$SmtpUserPayload>
/**
 * Model EmailDomain
 * 
 */
export type EmailDomain = $Result.DefaultSelection<Prisma.$EmailDomainPayload>
/**
 * Model DkimKey
 * 
 */
export type DkimKey = $Result.DefaultSelection<Prisma.$DkimKeyPayload>
/**
 * Model Email
 * 
 */
export type Email = $Result.DefaultSelection<Prisma.$EmailPayload>
/**
 * Model SmtpConnection
 * 
 */
export type SmtpConnection = $Result.DefaultSelection<Prisma.$SmtpConnectionPayload>
/**
 * Model AuthAttempt
 * 
 */
export type AuthAttempt = $Result.DefaultSelection<Prisma.$AuthAttemptPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model UserToken
 * 
 */
export type UserToken = $Result.DefaultSelection<Prisma.$UserTokenPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model EmailVerificationToken
 * 
 */
export type EmailVerificationToken = $Result.DefaultSelection<Prisma.$EmailVerificationTokenPayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model InvoiceItem
 * 
 */
export type InvoiceItem = $Result.DefaultSelection<Prisma.$InvoiceItemPayload>
/**
 * Model BillingMetrics
 * 
 */
export type BillingMetrics = $Result.DefaultSelection<Prisma.$BillingMetricsPayload>
/**
 * Model AnalyticsUserSession
 * 
 */
export type AnalyticsUserSession = $Result.DefaultSelection<Prisma.$AnalyticsUserSessionPayload>
/**
 * Model FeatureUsage
 * 
 */
export type FeatureUsage = $Result.DefaultSelection<Prisma.$FeatureUsagePayload>
/**
 * Model SystemMetrics
 * 
 */
export type SystemMetrics = $Result.DefaultSelection<Prisma.$SystemMetricsPayload>
/**
 * Model PageViews
 * 
 */
export type PageViews = $Result.DefaultSelection<Prisma.$PageViewsPayload>
/**
 * Model ModuleAnalytics
 * 
 */
export type ModuleAnalytics = $Result.DefaultSelection<Prisma.$ModuleAnalyticsPayload>
/**
 * Model GeographicData
 * 
 */
export type GeographicData = $Result.DefaultSelection<Prisma.$GeographicDataPayload>
/**
 * Model AutomatedReports
 * 
 */
export type AutomatedReports = $Result.DefaultSelection<Prisma.$AutomatedReportsPayload>
/**
 * Model ReportSchedules
 * 
 */
export type ReportSchedules = $Result.DefaultSelection<Prisma.$ReportSchedulesPayload>
/**
 * Model ReportRecipients
 * 
 */
export type ReportRecipients = $Result.DefaultSelection<Prisma.$ReportRecipientsPayload>
/**
 * Model ReportHistory
 * 
 */
export type ReportHistory = $Result.DefaultSelection<Prisma.$ReportHistoryPayload>
/**
 * Model SatisfactionSurveys
 * 
 */
export type SatisfactionSurveys = $Result.DefaultSelection<Prisma.$SatisfactionSurveysPayload>
/**
 * Model NpsResponses
 * 
 */
export type NpsResponses = $Result.DefaultSelection<Prisma.$NpsResponsesPayload>
/**
 * Model FeedbackSubmissions
 * 
 */
export type FeedbackSubmissions = $Result.DefaultSelection<Prisma.$FeedbackSubmissionsPayload>
/**
 * Model SystemLogs
 * 
 */
export type SystemLogs = $Result.DefaultSelection<Prisma.$SystemLogsPayload>
/**
 * Model ServiceStatus
 * 
 */
export type ServiceStatus = $Result.DefaultSelection<Prisma.$ServiceStatusPayload>
/**
 * Model SystemAlerts
 * 
 */
export type SystemAlerts = $Result.DefaultSelection<Prisma.$SystemAlertsPayload>
/**
 * Model DetailedSystemMetrics
 * 
 */
export type DetailedSystemMetrics = $Result.DefaultSelection<Prisma.$DetailedSystemMetricsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityLog`: Exposes CRUD operations for the **ActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLogs
    * const activityLogs = await prisma.activityLog.findMany()
    * ```
    */
  get activityLog(): Prisma.ActivityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.smtpUser`: Exposes CRUD operations for the **SmtpUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SmtpUsers
    * const smtpUsers = await prisma.smtpUser.findMany()
    * ```
    */
  get smtpUser(): Prisma.SmtpUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailDomain`: Exposes CRUD operations for the **EmailDomain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailDomains
    * const emailDomains = await prisma.emailDomain.findMany()
    * ```
    */
  get emailDomain(): Prisma.EmailDomainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dkimKey`: Exposes CRUD operations for the **DkimKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DkimKeys
    * const dkimKeys = await prisma.dkimKey.findMany()
    * ```
    */
  get dkimKey(): Prisma.DkimKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.email`: Exposes CRUD operations for the **Email** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emails
    * const emails = await prisma.email.findMany()
    * ```
    */
  get email(): Prisma.EmailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.smtpConnection`: Exposes CRUD operations for the **SmtpConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SmtpConnections
    * const smtpConnections = await prisma.smtpConnection.findMany()
    * ```
    */
  get smtpConnection(): Prisma.SmtpConnectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authAttempt`: Exposes CRUD operations for the **AuthAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthAttempts
    * const authAttempts = await prisma.authAttempt.findMany()
    * ```
    */
  get authAttempt(): Prisma.AuthAttemptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userToken`: Exposes CRUD operations for the **UserToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTokens
    * const userTokens = await prisma.userToken.findMany()
    * ```
    */
  get userToken(): Prisma.UserTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailVerificationToken`: Exposes CRUD operations for the **EmailVerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailVerificationTokens
    * const emailVerificationTokens = await prisma.emailVerificationToken.findMany()
    * ```
    */
  get emailVerificationToken(): Prisma.EmailVerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoiceItem`: Exposes CRUD operations for the **InvoiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceItems
    * const invoiceItems = await prisma.invoiceItem.findMany()
    * ```
    */
  get invoiceItem(): Prisma.InvoiceItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.billingMetrics`: Exposes CRUD operations for the **BillingMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingMetrics
    * const billingMetrics = await prisma.billingMetrics.findMany()
    * ```
    */
  get billingMetrics(): Prisma.BillingMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.analyticsUserSession`: Exposes CRUD operations for the **AnalyticsUserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnalyticsUserSessions
    * const analyticsUserSessions = await prisma.analyticsUserSession.findMany()
    * ```
    */
  get analyticsUserSession(): Prisma.AnalyticsUserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.featureUsage`: Exposes CRUD operations for the **FeatureUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeatureUsages
    * const featureUsages = await prisma.featureUsage.findMany()
    * ```
    */
  get featureUsage(): Prisma.FeatureUsageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemMetrics`: Exposes CRUD operations for the **SystemMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemMetrics
    * const systemMetrics = await prisma.systemMetrics.findMany()
    * ```
    */
  get systemMetrics(): Prisma.SystemMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pageViews`: Exposes CRUD operations for the **PageViews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageViews
    * const pageViews = await prisma.pageViews.findMany()
    * ```
    */
  get pageViews(): Prisma.PageViewsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.moduleAnalytics`: Exposes CRUD operations for the **ModuleAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ModuleAnalytics
    * const moduleAnalytics = await prisma.moduleAnalytics.findMany()
    * ```
    */
  get moduleAnalytics(): Prisma.ModuleAnalyticsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.geographicData`: Exposes CRUD operations for the **GeographicData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeographicData
    * const geographicData = await prisma.geographicData.findMany()
    * ```
    */
  get geographicData(): Prisma.GeographicDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.automatedReports`: Exposes CRUD operations for the **AutomatedReports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AutomatedReports
    * const automatedReports = await prisma.automatedReports.findMany()
    * ```
    */
  get automatedReports(): Prisma.AutomatedReportsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportSchedules`: Exposes CRUD operations for the **ReportSchedules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportSchedules
    * const reportSchedules = await prisma.reportSchedules.findMany()
    * ```
    */
  get reportSchedules(): Prisma.ReportSchedulesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportRecipients`: Exposes CRUD operations for the **ReportRecipients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportRecipients
    * const reportRecipients = await prisma.reportRecipients.findMany()
    * ```
    */
  get reportRecipients(): Prisma.ReportRecipientsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportHistory`: Exposes CRUD operations for the **ReportHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportHistories
    * const reportHistories = await prisma.reportHistory.findMany()
    * ```
    */
  get reportHistory(): Prisma.ReportHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.satisfactionSurveys`: Exposes CRUD operations for the **SatisfactionSurveys** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SatisfactionSurveys
    * const satisfactionSurveys = await prisma.satisfactionSurveys.findMany()
    * ```
    */
  get satisfactionSurveys(): Prisma.SatisfactionSurveysDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.npsResponses`: Exposes CRUD operations for the **NpsResponses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NpsResponses
    * const npsResponses = await prisma.npsResponses.findMany()
    * ```
    */
  get npsResponses(): Prisma.NpsResponsesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedbackSubmissions`: Exposes CRUD operations for the **FeedbackSubmissions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackSubmissions
    * const feedbackSubmissions = await prisma.feedbackSubmissions.findMany()
    * ```
    */
  get feedbackSubmissions(): Prisma.FeedbackSubmissionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemLogs`: Exposes CRUD operations for the **SystemLogs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemLogs
    * const systemLogs = await prisma.systemLogs.findMany()
    * ```
    */
  get systemLogs(): Prisma.SystemLogsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceStatus`: Exposes CRUD operations for the **ServiceStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceStatuses
    * const serviceStatuses = await prisma.serviceStatus.findMany()
    * ```
    */
  get serviceStatus(): Prisma.ServiceStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemAlerts`: Exposes CRUD operations for the **SystemAlerts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemAlerts
    * const systemAlerts = await prisma.systemAlerts.findMany()
    * ```
    */
  get systemAlerts(): Prisma.SystemAlertsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.detailedSystemMetrics`: Exposes CRUD operations for the **DetailedSystemMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DetailedSystemMetrics
    * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findMany()
    * ```
    */
  get detailedSystemMetrics(): Prisma.DetailedSystemMetricsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    User: 'User',
    Permission: 'Permission',
    UserPermission: 'UserPermission',
    ActivityLog: 'ActivityLog',
    SmtpUser: 'SmtpUser',
    EmailDomain: 'EmailDomain',
    DkimKey: 'DkimKey',
    Email: 'Email',
    SmtpConnection: 'SmtpConnection',
    AuthAttempt: 'AuthAttempt',
    UserSession: 'UserSession',
    UserToken: 'UserToken',
    SystemConfig: 'SystemConfig',
    PasswordResetToken: 'PasswordResetToken',
    EmailVerificationToken: 'EmailVerificationToken',
    Invoice: 'Invoice',
    InvoiceItem: 'InvoiceItem',
    BillingMetrics: 'BillingMetrics',
    AnalyticsUserSession: 'AnalyticsUserSession',
    FeatureUsage: 'FeatureUsage',
    SystemMetrics: 'SystemMetrics',
    PageViews: 'PageViews',
    ModuleAnalytics: 'ModuleAnalytics',
    GeographicData: 'GeographicData',
    AutomatedReports: 'AutomatedReports',
    ReportSchedules: 'ReportSchedules',
    ReportRecipients: 'ReportRecipients',
    ReportHistory: 'ReportHistory',
    SatisfactionSurveys: 'SatisfactionSurveys',
    NpsResponses: 'NpsResponses',
    FeedbackSubmissions: 'FeedbackSubmissions',
    SystemLogs: 'SystemLogs',
    ServiceStatus: 'ServiceStatus',
    SystemAlerts: 'SystemAlerts',
    DetailedSystemMetrics: 'DetailedSystemMetrics'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "tenant" | "user" | "permission" | "userPermission" | "activityLog" | "smtpUser" | "emailDomain" | "dkimKey" | "email" | "smtpConnection" | "authAttempt" | "userSession" | "userToken" | "systemConfig" | "passwordResetToken" | "emailVerificationToken" | "invoice" | "invoiceItem" | "billingMetrics" | "analyticsUserSession" | "featureUsage" | "systemMetrics" | "pageViews" | "moduleAnalytics" | "geographicData" | "automatedReports" | "reportSchedules" | "reportRecipients" | "reportHistory" | "satisfactionSurveys" | "npsResponses" | "feedbackSubmissions" | "systemLogs" | "serviceStatus" | "systemAlerts" | "detailedSystemMetrics"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TenantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      ActivityLog: {
        payload: Prisma.$ActivityLogPayload<ExtArgs>
        fields: Prisma.ActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findFirst: {
            args: Prisma.ActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findMany: {
            args: Prisma.ActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          create: {
            args: Prisma.ActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          createMany: {
            args: Prisma.ActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          delete: {
            args: Prisma.ActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          update: {
            args: Prisma.ActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          upsert: {
            args: Prisma.ActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          aggregate: {
            args: Prisma.ActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLog>
          }
          groupBy: {
            args: Prisma.ActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogCountAggregateOutputType> | number
          }
        }
      }
      SmtpUser: {
        payload: Prisma.$SmtpUserPayload<ExtArgs>
        fields: Prisma.SmtpUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SmtpUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SmtpUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>
          }
          findFirst: {
            args: Prisma.SmtpUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SmtpUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>
          }
          findMany: {
            args: Prisma.SmtpUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>[]
          }
          create: {
            args: Prisma.SmtpUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>
          }
          createMany: {
            args: Prisma.SmtpUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SmtpUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>[]
          }
          delete: {
            args: Prisma.SmtpUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>
          }
          update: {
            args: Prisma.SmtpUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>
          }
          deleteMany: {
            args: Prisma.SmtpUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SmtpUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SmtpUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>[]
          }
          upsert: {
            args: Prisma.SmtpUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpUserPayload>
          }
          aggregate: {
            args: Prisma.SmtpUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSmtpUser>
          }
          groupBy: {
            args: Prisma.SmtpUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<SmtpUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.SmtpUserCountArgs<ExtArgs>
            result: $Utils.Optional<SmtpUserCountAggregateOutputType> | number
          }
        }
      }
      EmailDomain: {
        payload: Prisma.$EmailDomainPayload<ExtArgs>
        fields: Prisma.EmailDomainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailDomainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailDomainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>
          }
          findFirst: {
            args: Prisma.EmailDomainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailDomainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>
          }
          findMany: {
            args: Prisma.EmailDomainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>[]
          }
          create: {
            args: Prisma.EmailDomainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>
          }
          createMany: {
            args: Prisma.EmailDomainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailDomainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>[]
          }
          delete: {
            args: Prisma.EmailDomainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>
          }
          update: {
            args: Prisma.EmailDomainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>
          }
          deleteMany: {
            args: Prisma.EmailDomainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailDomainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailDomainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>[]
          }
          upsert: {
            args: Prisma.EmailDomainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailDomainPayload>
          }
          aggregate: {
            args: Prisma.EmailDomainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailDomain>
          }
          groupBy: {
            args: Prisma.EmailDomainGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailDomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailDomainCountArgs<ExtArgs>
            result: $Utils.Optional<EmailDomainCountAggregateOutputType> | number
          }
        }
      }
      DkimKey: {
        payload: Prisma.$DkimKeyPayload<ExtArgs>
        fields: Prisma.DkimKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DkimKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DkimKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>
          }
          findFirst: {
            args: Prisma.DkimKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DkimKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>
          }
          findMany: {
            args: Prisma.DkimKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>[]
          }
          create: {
            args: Prisma.DkimKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>
          }
          createMany: {
            args: Prisma.DkimKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DkimKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>[]
          }
          delete: {
            args: Prisma.DkimKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>
          }
          update: {
            args: Prisma.DkimKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>
          }
          deleteMany: {
            args: Prisma.DkimKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DkimKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DkimKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>[]
          }
          upsert: {
            args: Prisma.DkimKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DkimKeyPayload>
          }
          aggregate: {
            args: Prisma.DkimKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDkimKey>
          }
          groupBy: {
            args: Prisma.DkimKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<DkimKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.DkimKeyCountArgs<ExtArgs>
            result: $Utils.Optional<DkimKeyCountAggregateOutputType> | number
          }
        }
      }
      Email: {
        payload: Prisma.$EmailPayload<ExtArgs>
        fields: Prisma.EmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          findFirst: {
            args: Prisma.EmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          findMany: {
            args: Prisma.EmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          create: {
            args: Prisma.EmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          createMany: {
            args: Prisma.EmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          delete: {
            args: Prisma.EmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          update: {
            args: Prisma.EmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          deleteMany: {
            args: Prisma.EmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          upsert: {
            args: Prisma.EmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          aggregate: {
            args: Prisma.EmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmail>
          }
          groupBy: {
            args: Prisma.EmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailCountArgs<ExtArgs>
            result: $Utils.Optional<EmailCountAggregateOutputType> | number
          }
        }
      }
      SmtpConnection: {
        payload: Prisma.$SmtpConnectionPayload<ExtArgs>
        fields: Prisma.SmtpConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SmtpConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SmtpConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>
          }
          findFirst: {
            args: Prisma.SmtpConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SmtpConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>
          }
          findMany: {
            args: Prisma.SmtpConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>[]
          }
          create: {
            args: Prisma.SmtpConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>
          }
          createMany: {
            args: Prisma.SmtpConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SmtpConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>[]
          }
          delete: {
            args: Prisma.SmtpConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>
          }
          update: {
            args: Prisma.SmtpConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>
          }
          deleteMany: {
            args: Prisma.SmtpConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SmtpConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SmtpConnectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>[]
          }
          upsert: {
            args: Prisma.SmtpConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmtpConnectionPayload>
          }
          aggregate: {
            args: Prisma.SmtpConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSmtpConnection>
          }
          groupBy: {
            args: Prisma.SmtpConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SmtpConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SmtpConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<SmtpConnectionCountAggregateOutputType> | number
          }
        }
      }
      AuthAttempt: {
        payload: Prisma.$AuthAttemptPayload<ExtArgs>
        fields: Prisma.AuthAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>
          }
          findFirst: {
            args: Prisma.AuthAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>
          }
          findMany: {
            args: Prisma.AuthAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>[]
          }
          create: {
            args: Prisma.AuthAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>
          }
          createMany: {
            args: Prisma.AuthAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>[]
          }
          delete: {
            args: Prisma.AuthAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>
          }
          update: {
            args: Prisma.AuthAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>
          }
          deleteMany: {
            args: Prisma.AuthAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthAttemptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>[]
          }
          upsert: {
            args: Prisma.AuthAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthAttemptPayload>
          }
          aggregate: {
            args: Prisma.AuthAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthAttempt>
          }
          groupBy: {
            args: Prisma.AuthAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<AuthAttemptCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      UserToken: {
        payload: Prisma.$UserTokenPayload<ExtArgs>
        fields: Prisma.UserTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>
          }
          findFirst: {
            args: Prisma.UserTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>
          }
          findMany: {
            args: Prisma.UserTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>[]
          }
          create: {
            args: Prisma.UserTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>
          }
          createMany: {
            args: Prisma.UserTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>[]
          }
          delete: {
            args: Prisma.UserTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>
          }
          update: {
            args: Prisma.UserTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>
          }
          deleteMany: {
            args: Prisma.UserTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>[]
          }
          upsert: {
            args: Prisma.UserTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTokenPayload>
          }
          aggregate: {
            args: Prisma.UserTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserToken>
          }
          groupBy: {
            args: Prisma.UserTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTokenCountArgs<ExtArgs>
            result: $Utils.Optional<UserTokenCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      EmailVerificationToken: {
        payload: Prisma.$EmailVerificationTokenPayload<ExtArgs>
        fields: Prisma.EmailVerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailVerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.EmailVerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>
          }
          findMany: {
            args: Prisma.EmailVerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>[]
          }
          create: {
            args: Prisma.EmailVerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>
          }
          createMany: {
            args: Prisma.EmailVerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailVerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.EmailVerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>
          }
          update: {
            args: Prisma.EmailVerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.EmailVerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailVerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailVerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.EmailVerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.EmailVerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailVerificationToken>
          }
          groupBy: {
            args: Prisma.EmailVerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailVerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      InvoiceItem: {
        payload: Prisma.$InvoiceItemPayload<ExtArgs>
        fields: Prisma.InvoiceItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findFirst: {
            args: Prisma.InvoiceItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          findMany: {
            args: Prisma.InvoiceItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          create: {
            args: Prisma.InvoiceItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          createMany: {
            args: Prisma.InvoiceItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          delete: {
            args: Prisma.InvoiceItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          update: {
            args: Prisma.InvoiceItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          deleteMany: {
            args: Prisma.InvoiceItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>[]
          }
          upsert: {
            args: Prisma.InvoiceItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoiceItemPayload>
          }
          aggregate: {
            args: Prisma.InvoiceItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoiceItem>
          }
          groupBy: {
            args: Prisma.InvoiceItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceItemCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceItemCountAggregateOutputType> | number
          }
        }
      }
      BillingMetrics: {
        payload: Prisma.$BillingMetricsPayload<ExtArgs>
        fields: Prisma.BillingMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>
          }
          findFirst: {
            args: Prisma.BillingMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>
          }
          findMany: {
            args: Prisma.BillingMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>[]
          }
          create: {
            args: Prisma.BillingMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>
          }
          createMany: {
            args: Prisma.BillingMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>[]
          }
          delete: {
            args: Prisma.BillingMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>
          }
          update: {
            args: Prisma.BillingMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>
          }
          deleteMany: {
            args: Prisma.BillingMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BillingMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>[]
          }
          upsert: {
            args: Prisma.BillingMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingMetricsPayload>
          }
          aggregate: {
            args: Prisma.BillingMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingMetrics>
          }
          groupBy: {
            args: Prisma.BillingMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<BillingMetricsCountAggregateOutputType> | number
          }
        }
      }
      AnalyticsUserSession: {
        payload: Prisma.$AnalyticsUserSessionPayload<ExtArgs>
        fields: Prisma.AnalyticsUserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnalyticsUserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnalyticsUserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>
          }
          findFirst: {
            args: Prisma.AnalyticsUserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnalyticsUserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>
          }
          findMany: {
            args: Prisma.AnalyticsUserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>[]
          }
          create: {
            args: Prisma.AnalyticsUserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>
          }
          createMany: {
            args: Prisma.AnalyticsUserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnalyticsUserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>[]
          }
          delete: {
            args: Prisma.AnalyticsUserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>
          }
          update: {
            args: Prisma.AnalyticsUserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>
          }
          deleteMany: {
            args: Prisma.AnalyticsUserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnalyticsUserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnalyticsUserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>[]
          }
          upsert: {
            args: Prisma.AnalyticsUserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsUserSessionPayload>
          }
          aggregate: {
            args: Prisma.AnalyticsUserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnalyticsUserSession>
          }
          groupBy: {
            args: Prisma.AnalyticsUserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsUserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnalyticsUserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsUserSessionCountAggregateOutputType> | number
          }
        }
      }
      FeatureUsage: {
        payload: Prisma.$FeatureUsagePayload<ExtArgs>
        fields: Prisma.FeatureUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>
          }
          findFirst: {
            args: Prisma.FeatureUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>
          }
          findMany: {
            args: Prisma.FeatureUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>[]
          }
          create: {
            args: Prisma.FeatureUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>
          }
          createMany: {
            args: Prisma.FeatureUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeatureUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>[]
          }
          delete: {
            args: Prisma.FeatureUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>
          }
          update: {
            args: Prisma.FeatureUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>
          }
          deleteMany: {
            args: Prisma.FeatureUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeatureUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>[]
          }
          upsert: {
            args: Prisma.FeatureUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureUsagePayload>
          }
          aggregate: {
            args: Prisma.FeatureUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeatureUsage>
          }
          groupBy: {
            args: Prisma.FeatureUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeatureUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureUsageCountArgs<ExtArgs>
            result: $Utils.Optional<FeatureUsageCountAggregateOutputType> | number
          }
        }
      }
      SystemMetrics: {
        payload: Prisma.$SystemMetricsPayload<ExtArgs>
        fields: Prisma.SystemMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          findFirst: {
            args: Prisma.SystemMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          findMany: {
            args: Prisma.SystemMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          create: {
            args: Prisma.SystemMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          createMany: {
            args: Prisma.SystemMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          delete: {
            args: Prisma.SystemMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          update: {
            args: Prisma.SystemMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          deleteMany: {
            args: Prisma.SystemMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          upsert: {
            args: Prisma.SystemMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          aggregate: {
            args: Prisma.SystemMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemMetrics>
          }
          groupBy: {
            args: Prisma.SystemMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemMetricsCountAggregateOutputType> | number
          }
        }
      }
      PageViews: {
        payload: Prisma.$PageViewsPayload<ExtArgs>
        fields: Prisma.PageViewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageViewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageViewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>
          }
          findFirst: {
            args: Prisma.PageViewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageViewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>
          }
          findMany: {
            args: Prisma.PageViewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>[]
          }
          create: {
            args: Prisma.PageViewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>
          }
          createMany: {
            args: Prisma.PageViewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageViewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>[]
          }
          delete: {
            args: Prisma.PageViewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>
          }
          update: {
            args: Prisma.PageViewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>
          }
          deleteMany: {
            args: Prisma.PageViewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageViewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PageViewsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>[]
          }
          upsert: {
            args: Prisma.PageViewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageViewsPayload>
          }
          aggregate: {
            args: Prisma.PageViewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePageViews>
          }
          groupBy: {
            args: Prisma.PageViewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageViewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageViewsCountArgs<ExtArgs>
            result: $Utils.Optional<PageViewsCountAggregateOutputType> | number
          }
        }
      }
      ModuleAnalytics: {
        payload: Prisma.$ModuleAnalyticsPayload<ExtArgs>
        fields: Prisma.ModuleAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModuleAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModuleAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.ModuleAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModuleAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>
          }
          findMany: {
            args: Prisma.ModuleAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>[]
          }
          create: {
            args: Prisma.ModuleAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>
          }
          createMany: {
            args: Prisma.ModuleAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModuleAnalyticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>[]
          }
          delete: {
            args: Prisma.ModuleAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>
          }
          update: {
            args: Prisma.ModuleAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.ModuleAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModuleAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ModuleAnalyticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>[]
          }
          upsert: {
            args: Prisma.ModuleAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.ModuleAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModuleAnalytics>
          }
          groupBy: {
            args: Prisma.ModuleAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModuleAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModuleAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<ModuleAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      GeographicData: {
        payload: Prisma.$GeographicDataPayload<ExtArgs>
        fields: Prisma.GeographicDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeographicDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeographicDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>
          }
          findFirst: {
            args: Prisma.GeographicDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeographicDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>
          }
          findMany: {
            args: Prisma.GeographicDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>[]
          }
          create: {
            args: Prisma.GeographicDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>
          }
          createMany: {
            args: Prisma.GeographicDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeographicDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>[]
          }
          delete: {
            args: Prisma.GeographicDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>
          }
          update: {
            args: Prisma.GeographicDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>
          }
          deleteMany: {
            args: Prisma.GeographicDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeographicDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeographicDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>[]
          }
          upsert: {
            args: Prisma.GeographicDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeographicDataPayload>
          }
          aggregate: {
            args: Prisma.GeographicDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeographicData>
          }
          groupBy: {
            args: Prisma.GeographicDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeographicDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeographicDataCountArgs<ExtArgs>
            result: $Utils.Optional<GeographicDataCountAggregateOutputType> | number
          }
        }
      }
      AutomatedReports: {
        payload: Prisma.$AutomatedReportsPayload<ExtArgs>
        fields: Prisma.AutomatedReportsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AutomatedReportsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AutomatedReportsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>
          }
          findFirst: {
            args: Prisma.AutomatedReportsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AutomatedReportsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>
          }
          findMany: {
            args: Prisma.AutomatedReportsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>[]
          }
          create: {
            args: Prisma.AutomatedReportsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>
          }
          createMany: {
            args: Prisma.AutomatedReportsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AutomatedReportsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>[]
          }
          delete: {
            args: Prisma.AutomatedReportsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>
          }
          update: {
            args: Prisma.AutomatedReportsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>
          }
          deleteMany: {
            args: Prisma.AutomatedReportsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AutomatedReportsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AutomatedReportsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>[]
          }
          upsert: {
            args: Prisma.AutomatedReportsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomatedReportsPayload>
          }
          aggregate: {
            args: Prisma.AutomatedReportsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAutomatedReports>
          }
          groupBy: {
            args: Prisma.AutomatedReportsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AutomatedReportsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AutomatedReportsCountArgs<ExtArgs>
            result: $Utils.Optional<AutomatedReportsCountAggregateOutputType> | number
          }
        }
      }
      ReportSchedules: {
        payload: Prisma.$ReportSchedulesPayload<ExtArgs>
        fields: Prisma.ReportSchedulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportSchedulesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportSchedulesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>
          }
          findFirst: {
            args: Prisma.ReportSchedulesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportSchedulesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>
          }
          findMany: {
            args: Prisma.ReportSchedulesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>[]
          }
          create: {
            args: Prisma.ReportSchedulesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>
          }
          createMany: {
            args: Prisma.ReportSchedulesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportSchedulesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>[]
          }
          delete: {
            args: Prisma.ReportSchedulesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>
          }
          update: {
            args: Prisma.ReportSchedulesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>
          }
          deleteMany: {
            args: Prisma.ReportSchedulesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportSchedulesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportSchedulesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>[]
          }
          upsert: {
            args: Prisma.ReportSchedulesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportSchedulesPayload>
          }
          aggregate: {
            args: Prisma.ReportSchedulesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportSchedules>
          }
          groupBy: {
            args: Prisma.ReportSchedulesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportSchedulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportSchedulesCountArgs<ExtArgs>
            result: $Utils.Optional<ReportSchedulesCountAggregateOutputType> | number
          }
        }
      }
      ReportRecipients: {
        payload: Prisma.$ReportRecipientsPayload<ExtArgs>
        fields: Prisma.ReportRecipientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportRecipientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportRecipientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>
          }
          findFirst: {
            args: Prisma.ReportRecipientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportRecipientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>
          }
          findMany: {
            args: Prisma.ReportRecipientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>[]
          }
          create: {
            args: Prisma.ReportRecipientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>
          }
          createMany: {
            args: Prisma.ReportRecipientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportRecipientsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>[]
          }
          delete: {
            args: Prisma.ReportRecipientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>
          }
          update: {
            args: Prisma.ReportRecipientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>
          }
          deleteMany: {
            args: Prisma.ReportRecipientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportRecipientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportRecipientsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>[]
          }
          upsert: {
            args: Prisma.ReportRecipientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportRecipientsPayload>
          }
          aggregate: {
            args: Prisma.ReportRecipientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportRecipients>
          }
          groupBy: {
            args: Prisma.ReportRecipientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportRecipientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportRecipientsCountArgs<ExtArgs>
            result: $Utils.Optional<ReportRecipientsCountAggregateOutputType> | number
          }
        }
      }
      ReportHistory: {
        payload: Prisma.$ReportHistoryPayload<ExtArgs>
        fields: Prisma.ReportHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>
          }
          findFirst: {
            args: Prisma.ReportHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>
          }
          findMany: {
            args: Prisma.ReportHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>[]
          }
          create: {
            args: Prisma.ReportHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>
          }
          createMany: {
            args: Prisma.ReportHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>[]
          }
          delete: {
            args: Prisma.ReportHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>
          }
          update: {
            args: Prisma.ReportHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ReportHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ReportHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportHistoryPayload>
          }
          aggregate: {
            args: Prisma.ReportHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportHistory>
          }
          groupBy: {
            args: Prisma.ReportHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ReportHistoryCountAggregateOutputType> | number
          }
        }
      }
      SatisfactionSurveys: {
        payload: Prisma.$SatisfactionSurveysPayload<ExtArgs>
        fields: Prisma.SatisfactionSurveysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SatisfactionSurveysFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SatisfactionSurveysFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>
          }
          findFirst: {
            args: Prisma.SatisfactionSurveysFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SatisfactionSurveysFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>
          }
          findMany: {
            args: Prisma.SatisfactionSurveysFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>[]
          }
          create: {
            args: Prisma.SatisfactionSurveysCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>
          }
          createMany: {
            args: Prisma.SatisfactionSurveysCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SatisfactionSurveysCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>[]
          }
          delete: {
            args: Prisma.SatisfactionSurveysDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>
          }
          update: {
            args: Prisma.SatisfactionSurveysUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>
          }
          deleteMany: {
            args: Prisma.SatisfactionSurveysDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SatisfactionSurveysUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SatisfactionSurveysUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>[]
          }
          upsert: {
            args: Prisma.SatisfactionSurveysUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SatisfactionSurveysPayload>
          }
          aggregate: {
            args: Prisma.SatisfactionSurveysAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSatisfactionSurveys>
          }
          groupBy: {
            args: Prisma.SatisfactionSurveysGroupByArgs<ExtArgs>
            result: $Utils.Optional<SatisfactionSurveysGroupByOutputType>[]
          }
          count: {
            args: Prisma.SatisfactionSurveysCountArgs<ExtArgs>
            result: $Utils.Optional<SatisfactionSurveysCountAggregateOutputType> | number
          }
        }
      }
      NpsResponses: {
        payload: Prisma.$NpsResponsesPayload<ExtArgs>
        fields: Prisma.NpsResponsesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NpsResponsesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NpsResponsesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>
          }
          findFirst: {
            args: Prisma.NpsResponsesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NpsResponsesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>
          }
          findMany: {
            args: Prisma.NpsResponsesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>[]
          }
          create: {
            args: Prisma.NpsResponsesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>
          }
          createMany: {
            args: Prisma.NpsResponsesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NpsResponsesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>[]
          }
          delete: {
            args: Prisma.NpsResponsesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>
          }
          update: {
            args: Prisma.NpsResponsesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>
          }
          deleteMany: {
            args: Prisma.NpsResponsesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NpsResponsesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NpsResponsesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>[]
          }
          upsert: {
            args: Prisma.NpsResponsesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NpsResponsesPayload>
          }
          aggregate: {
            args: Prisma.NpsResponsesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNpsResponses>
          }
          groupBy: {
            args: Prisma.NpsResponsesGroupByArgs<ExtArgs>
            result: $Utils.Optional<NpsResponsesGroupByOutputType>[]
          }
          count: {
            args: Prisma.NpsResponsesCountArgs<ExtArgs>
            result: $Utils.Optional<NpsResponsesCountAggregateOutputType> | number
          }
        }
      }
      FeedbackSubmissions: {
        payload: Prisma.$FeedbackSubmissionsPayload<ExtArgs>
        fields: Prisma.FeedbackSubmissionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackSubmissionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackSubmissionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>
          }
          findFirst: {
            args: Prisma.FeedbackSubmissionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackSubmissionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>
          }
          findMany: {
            args: Prisma.FeedbackSubmissionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>[]
          }
          create: {
            args: Prisma.FeedbackSubmissionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>
          }
          createMany: {
            args: Prisma.FeedbackSubmissionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackSubmissionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>[]
          }
          delete: {
            args: Prisma.FeedbackSubmissionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>
          }
          update: {
            args: Prisma.FeedbackSubmissionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackSubmissionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackSubmissionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackSubmissionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackSubmissionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackSubmissionsPayload>
          }
          aggregate: {
            args: Prisma.FeedbackSubmissionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedbackSubmissions>
          }
          groupBy: {
            args: Prisma.FeedbackSubmissionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackSubmissionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackSubmissionsCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackSubmissionsCountAggregateOutputType> | number
          }
        }
      }
      SystemLogs: {
        payload: Prisma.$SystemLogsPayload<ExtArgs>
        fields: Prisma.SystemLogsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemLogsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemLogsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>
          }
          findFirst: {
            args: Prisma.SystemLogsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemLogsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>
          }
          findMany: {
            args: Prisma.SystemLogsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>[]
          }
          create: {
            args: Prisma.SystemLogsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>
          }
          createMany: {
            args: Prisma.SystemLogsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemLogsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>[]
          }
          delete: {
            args: Prisma.SystemLogsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>
          }
          update: {
            args: Prisma.SystemLogsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>
          }
          deleteMany: {
            args: Prisma.SystemLogsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemLogsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemLogsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>[]
          }
          upsert: {
            args: Prisma.SystemLogsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogsPayload>
          }
          aggregate: {
            args: Prisma.SystemLogsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemLogs>
          }
          groupBy: {
            args: Prisma.SystemLogsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemLogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemLogsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemLogsCountAggregateOutputType> | number
          }
        }
      }
      ServiceStatus: {
        payload: Prisma.$ServiceStatusPayload<ExtArgs>
        fields: Prisma.ServiceStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>
          }
          findFirst: {
            args: Prisma.ServiceStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>
          }
          findMany: {
            args: Prisma.ServiceStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>[]
          }
          create: {
            args: Prisma.ServiceStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>
          }
          createMany: {
            args: Prisma.ServiceStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>[]
          }
          delete: {
            args: Prisma.ServiceStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>
          }
          update: {
            args: Prisma.ServiceStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>
          }
          deleteMany: {
            args: Prisma.ServiceStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>[]
          }
          upsert: {
            args: Prisma.ServiceStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceStatusPayload>
          }
          aggregate: {
            args: Prisma.ServiceStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceStatus>
          }
          groupBy: {
            args: Prisma.ServiceStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceStatusCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceStatusCountAggregateOutputType> | number
          }
        }
      }
      SystemAlerts: {
        payload: Prisma.$SystemAlertsPayload<ExtArgs>
        fields: Prisma.SystemAlertsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemAlertsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemAlertsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>
          }
          findFirst: {
            args: Prisma.SystemAlertsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemAlertsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>
          }
          findMany: {
            args: Prisma.SystemAlertsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>[]
          }
          create: {
            args: Prisma.SystemAlertsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>
          }
          createMany: {
            args: Prisma.SystemAlertsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemAlertsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>[]
          }
          delete: {
            args: Prisma.SystemAlertsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>
          }
          update: {
            args: Prisma.SystemAlertsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>
          }
          deleteMany: {
            args: Prisma.SystemAlertsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemAlertsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemAlertsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>[]
          }
          upsert: {
            args: Prisma.SystemAlertsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemAlertsPayload>
          }
          aggregate: {
            args: Prisma.SystemAlertsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemAlerts>
          }
          groupBy: {
            args: Prisma.SystemAlertsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemAlertsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemAlertsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemAlertsCountAggregateOutputType> | number
          }
        }
      }
      DetailedSystemMetrics: {
        payload: Prisma.$DetailedSystemMetricsPayload<ExtArgs>
        fields: Prisma.DetailedSystemMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DetailedSystemMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DetailedSystemMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>
          }
          findFirst: {
            args: Prisma.DetailedSystemMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DetailedSystemMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>
          }
          findMany: {
            args: Prisma.DetailedSystemMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>[]
          }
          create: {
            args: Prisma.DetailedSystemMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>
          }
          createMany: {
            args: Prisma.DetailedSystemMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DetailedSystemMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>[]
          }
          delete: {
            args: Prisma.DetailedSystemMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>
          }
          update: {
            args: Prisma.DetailedSystemMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>
          }
          deleteMany: {
            args: Prisma.DetailedSystemMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DetailedSystemMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DetailedSystemMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>[]
          }
          upsert: {
            args: Prisma.DetailedSystemMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetailedSystemMetricsPayload>
          }
          aggregate: {
            args: Prisma.DetailedSystemMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDetailedSystemMetrics>
          }
          groupBy: {
            args: Prisma.DetailedSystemMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DetailedSystemMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DetailedSystemMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<DetailedSystemMetricsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    tenant?: TenantOmit
    user?: UserOmit
    permission?: PermissionOmit
    userPermission?: UserPermissionOmit
    activityLog?: ActivityLogOmit
    smtpUser?: SmtpUserOmit
    emailDomain?: EmailDomainOmit
    dkimKey?: DkimKeyOmit
    email?: EmailOmit
    smtpConnection?: SmtpConnectionOmit
    authAttempt?: AuthAttemptOmit
    userSession?: UserSessionOmit
    userToken?: UserTokenOmit
    systemConfig?: SystemConfigOmit
    passwordResetToken?: PasswordResetTokenOmit
    emailVerificationToken?: EmailVerificationTokenOmit
    invoice?: InvoiceOmit
    invoiceItem?: InvoiceItemOmit
    billingMetrics?: BillingMetricsOmit
    analyticsUserSession?: AnalyticsUserSessionOmit
    featureUsage?: FeatureUsageOmit
    systemMetrics?: SystemMetricsOmit
    pageViews?: PageViewsOmit
    moduleAnalytics?: ModuleAnalyticsOmit
    geographicData?: GeographicDataOmit
    automatedReports?: AutomatedReportsOmit
    reportSchedules?: ReportSchedulesOmit
    reportRecipients?: ReportRecipientsOmit
    reportHistory?: ReportHistoryOmit
    satisfactionSurveys?: SatisfactionSurveysOmit
    npsResponses?: NpsResponsesOmit
    feedbackSubmissions?: FeedbackSubmissionsOmit
    systemLogs?: SystemLogsOmit
    serviceStatus?: ServiceStatusOmit
    systemAlerts?: SystemAlertsOmit
    detailedSystemMetrics?: DetailedSystemMetricsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    users: number
    activityLogs: number
    emailDomains: number
    invoices: number
    analyticsUserSessions: number
    featureUsage: number
    pageViews: number
    moduleAnalytics: number
    geographicData: number
    npsResponses: number
    feedbackSubmissions: number
    satisfactionSurveys: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TenantCountOutputTypeCountUsersArgs
    activityLogs?: boolean | TenantCountOutputTypeCountActivityLogsArgs
    emailDomains?: boolean | TenantCountOutputTypeCountEmailDomainsArgs
    invoices?: boolean | TenantCountOutputTypeCountInvoicesArgs
    analyticsUserSessions?: boolean | TenantCountOutputTypeCountAnalyticsUserSessionsArgs
    featureUsage?: boolean | TenantCountOutputTypeCountFeatureUsageArgs
    pageViews?: boolean | TenantCountOutputTypeCountPageViewsArgs
    moduleAnalytics?: boolean | TenantCountOutputTypeCountModuleAnalyticsArgs
    geographicData?: boolean | TenantCountOutputTypeCountGeographicDataArgs
    npsResponses?: boolean | TenantCountOutputTypeCountNpsResponsesArgs
    feedbackSubmissions?: boolean | TenantCountOutputTypeCountFeedbackSubmissionsArgs
    satisfactionSurveys?: boolean | TenantCountOutputTypeCountSatisfactionSurveysArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountEmailDomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailDomainWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountAnalyticsUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsUserSessionWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountFeatureUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureUsageWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPageViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageViewsWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountModuleAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModuleAnalyticsWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountGeographicDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeographicDataWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountNpsResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NpsResponsesWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountFeedbackSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackSubmissionsWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountSatisfactionSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SatisfactionSurveysWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    permissions: number
    grantedPermissions: number
    activityLogs: number
    smtpUsers: number
    userSessions: number
    userTokens: number
    passwordResetTokens: number
    emailVerificationTokens: number
    analyticsUserSessions: number
    featureUsage: number
    pageViews: number
    npsResponses: number
    feedbackSubmissions: number
    assignedFeedbacks: number
    createdReports: number
    createdSurveys: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
    grantedPermissions?: boolean | UserCountOutputTypeCountGrantedPermissionsArgs
    activityLogs?: boolean | UserCountOutputTypeCountActivityLogsArgs
    smtpUsers?: boolean | UserCountOutputTypeCountSmtpUsersArgs
    userSessions?: boolean | UserCountOutputTypeCountUserSessionsArgs
    userTokens?: boolean | UserCountOutputTypeCountUserTokensArgs
    passwordResetTokens?: boolean | UserCountOutputTypeCountPasswordResetTokensArgs
    emailVerificationTokens?: boolean | UserCountOutputTypeCountEmailVerificationTokensArgs
    analyticsUserSessions?: boolean | UserCountOutputTypeCountAnalyticsUserSessionsArgs
    featureUsage?: boolean | UserCountOutputTypeCountFeatureUsageArgs
    pageViews?: boolean | UserCountOutputTypeCountPageViewsArgs
    npsResponses?: boolean | UserCountOutputTypeCountNpsResponsesArgs
    feedbackSubmissions?: boolean | UserCountOutputTypeCountFeedbackSubmissionsArgs
    assignedFeedbacks?: boolean | UserCountOutputTypeCountAssignedFeedbacksArgs
    createdReports?: boolean | UserCountOutputTypeCountCreatedReportsArgs
    createdSurveys?: boolean | UserCountOutputTypeCountCreatedSurveysArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGrantedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSmtpUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SmtpUserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmailVerificationTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnalyticsUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsUserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeatureUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureUsageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPageViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageViewsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNpsResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NpsResponsesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackSubmissionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackSubmissionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutomatedReportsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SatisfactionSurveysWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    userPermissions: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userPermissions?: boolean | PermissionCountOutputTypeCountUserPermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUserPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type SmtpUserCountOutputType
   */

  export type SmtpUserCountOutputType = {
    domains: number
    authAttempts: number
  }

  export type SmtpUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domains?: boolean | SmtpUserCountOutputTypeCountDomainsArgs
    authAttempts?: boolean | SmtpUserCountOutputTypeCountAuthAttemptsArgs
  }

  // Custom InputTypes
  /**
   * SmtpUserCountOutputType without action
   */
  export type SmtpUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUserCountOutputType
     */
    select?: SmtpUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SmtpUserCountOutputType without action
   */
  export type SmtpUserCountOutputTypeCountDomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailDomainWhereInput
  }

  /**
   * SmtpUserCountOutputType without action
   */
  export type SmtpUserCountOutputTypeCountAuthAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthAttemptWhereInput
  }


  /**
   * Count Type EmailDomainCountOutputType
   */

  export type EmailDomainCountOutputType = {
    dkimKeys: number
    emails: number
  }

  export type EmailDomainCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dkimKeys?: boolean | EmailDomainCountOutputTypeCountDkimKeysArgs
    emails?: boolean | EmailDomainCountOutputTypeCountEmailsArgs
  }

  // Custom InputTypes
  /**
   * EmailDomainCountOutputType without action
   */
  export type EmailDomainCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomainCountOutputType
     */
    select?: EmailDomainCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailDomainCountOutputType without action
   */
  export type EmailDomainCountOutputTypeCountDkimKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DkimKeyWhereInput
  }

  /**
   * EmailDomainCountOutputType without action
   */
  export type EmailDomainCountOutputTypeCountEmailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    itens: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itens?: boolean | InvoiceCountOutputTypeCountItensArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
  }


  /**
   * Count Type AutomatedReportsCountOutputType
   */

  export type AutomatedReportsCountOutputType = {
    schedules: number
    history: number
  }

  export type AutomatedReportsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | AutomatedReportsCountOutputTypeCountSchedulesArgs
    history?: boolean | AutomatedReportsCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * AutomatedReportsCountOutputType without action
   */
  export type AutomatedReportsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReportsCountOutputType
     */
    select?: AutomatedReportsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AutomatedReportsCountOutputType without action
   */
  export type AutomatedReportsCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSchedulesWhereInput
  }

  /**
   * AutomatedReportsCountOutputType without action
   */
  export type AutomatedReportsCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportHistoryWhereInput
  }


  /**
   * Count Type ReportSchedulesCountOutputType
   */

  export type ReportSchedulesCountOutputType = {
    recipients: number
  }

  export type ReportSchedulesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipients?: boolean | ReportSchedulesCountOutputTypeCountRecipientsArgs
  }

  // Custom InputTypes
  /**
   * ReportSchedulesCountOutputType without action
   */
  export type ReportSchedulesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedulesCountOutputType
     */
    select?: ReportSchedulesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportSchedulesCountOutputType without action
   */
  export type ReportSchedulesCountOutputTypeCountRecipientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportRecipientsWhereInput
  }


  /**
   * Count Type SatisfactionSurveysCountOutputType
   */

  export type SatisfactionSurveysCountOutputType = {
    npsResponses: number
    feedbacks: number
  }

  export type SatisfactionSurveysCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    npsResponses?: boolean | SatisfactionSurveysCountOutputTypeCountNpsResponsesArgs
    feedbacks?: boolean | SatisfactionSurveysCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * SatisfactionSurveysCountOutputType without action
   */
  export type SatisfactionSurveysCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveysCountOutputType
     */
    select?: SatisfactionSurveysCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SatisfactionSurveysCountOutputType without action
   */
  export type SatisfactionSurveysCountOutputTypeCountNpsResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NpsResponsesWhereInput
  }

  /**
   * SatisfactionSurveysCountOutputType without action
   */
  export type SatisfactionSurveysCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackSubmissionsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantAvgAggregateOutputType = {
    populacao: number | null
    limiteUsuarios: number | null
    valorMensal: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
  }

  export type TenantSumAggregateOutputType = {
    populacao: number | null
    limiteUsuarios: number | null
    valorMensal: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    tenantCode: string | null
    nome: string | null
    email: string | null
    cidade: string | null
    estado: string | null
    cnpj: string | null
    plano: string | null
    status: string | null
    populacao: number | null
    endereco: string | null
    responsavelNome: string | null
    responsavelEmail: string | null
    responsavelTelefone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hasAdmin: boolean | null
    adminConfirmed: boolean | null
    adminFirstLogin: boolean | null
    limiteUsuarios: number | null
    valorMensal: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    configuracoes: string | null
    metricas: string | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    tenantCode: string | null
    nome: string | null
    email: string | null
    cidade: string | null
    estado: string | null
    cnpj: string | null
    plano: string | null
    status: string | null
    populacao: number | null
    endereco: string | null
    responsavelNome: string | null
    responsavelEmail: string | null
    responsavelTelefone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hasAdmin: boolean | null
    adminConfirmed: boolean | null
    adminFirstLogin: boolean | null
    limiteUsuarios: number | null
    valorMensal: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    configuracoes: string | null
    metricas: string | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    tenantCode: number
    nome: number
    email: number
    cidade: number
    estado: number
    cnpj: number
    plano: number
    status: number
    populacao: number
    endereco: number
    responsavelNome: number
    responsavelEmail: number
    responsavelTelefone: number
    createdAt: number
    updatedAt: number
    hasAdmin: number
    adminConfirmed: number
    adminFirstLogin: number
    limiteUsuarios: number
    valorMensal: number
    usuariosAtivos: number
    protocolosMes: number
    configuracoes: number
    metricas: number
    _all: number
  }


  export type TenantAvgAggregateInputType = {
    populacao?: true
    limiteUsuarios?: true
    valorMensal?: true
    usuariosAtivos?: true
    protocolosMes?: true
  }

  export type TenantSumAggregateInputType = {
    populacao?: true
    limiteUsuarios?: true
    valorMensal?: true
    usuariosAtivos?: true
    protocolosMes?: true
  }

  export type TenantMinAggregateInputType = {
    id?: true
    tenantCode?: true
    nome?: true
    email?: true
    cidade?: true
    estado?: true
    cnpj?: true
    plano?: true
    status?: true
    populacao?: true
    endereco?: true
    responsavelNome?: true
    responsavelEmail?: true
    responsavelTelefone?: true
    createdAt?: true
    updatedAt?: true
    hasAdmin?: true
    adminConfirmed?: true
    adminFirstLogin?: true
    limiteUsuarios?: true
    valorMensal?: true
    usuariosAtivos?: true
    protocolosMes?: true
    configuracoes?: true
    metricas?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    tenantCode?: true
    nome?: true
    email?: true
    cidade?: true
    estado?: true
    cnpj?: true
    plano?: true
    status?: true
    populacao?: true
    endereco?: true
    responsavelNome?: true
    responsavelEmail?: true
    responsavelTelefone?: true
    createdAt?: true
    updatedAt?: true
    hasAdmin?: true
    adminConfirmed?: true
    adminFirstLogin?: true
    limiteUsuarios?: true
    valorMensal?: true
    usuariosAtivos?: true
    protocolosMes?: true
    configuracoes?: true
    metricas?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    tenantCode?: true
    nome?: true
    email?: true
    cidade?: true
    estado?: true
    cnpj?: true
    plano?: true
    status?: true
    populacao?: true
    endereco?: true
    responsavelNome?: true
    responsavelEmail?: true
    responsavelTelefone?: true
    createdAt?: true
    updatedAt?: true
    hasAdmin?: true
    adminConfirmed?: true
    adminFirstLogin?: true
    limiteUsuarios?: true
    valorMensal?: true
    usuariosAtivos?: true
    protocolosMes?: true
    configuracoes?: true
    metricas?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _avg?: TenantAvgAggregateInputType
    _sum?: TenantSumAggregateInputType
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano: string | null
    status: string | null
    populacao: number | null
    endereco: string | null
    responsavelNome: string | null
    responsavelEmail: string | null
    responsavelTelefone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hasAdmin: boolean | null
    adminConfirmed: boolean | null
    adminFirstLogin: boolean | null
    limiteUsuarios: number | null
    valorMensal: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    configuracoes: string | null
    metricas: string | null
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantCode?: boolean
    nome?: boolean
    email?: boolean
    cidade?: boolean
    estado?: boolean
    cnpj?: boolean
    plano?: boolean
    status?: boolean
    populacao?: boolean
    endereco?: boolean
    responsavelNome?: boolean
    responsavelEmail?: boolean
    responsavelTelefone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hasAdmin?: boolean
    adminConfirmed?: boolean
    adminFirstLogin?: boolean
    limiteUsuarios?: boolean
    valorMensal?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    configuracoes?: boolean
    metricas?: boolean
    users?: boolean | Tenant$usersArgs<ExtArgs>
    activityLogs?: boolean | Tenant$activityLogsArgs<ExtArgs>
    emailDomains?: boolean | Tenant$emailDomainsArgs<ExtArgs>
    invoices?: boolean | Tenant$invoicesArgs<ExtArgs>
    analyticsUserSessions?: boolean | Tenant$analyticsUserSessionsArgs<ExtArgs>
    featureUsage?: boolean | Tenant$featureUsageArgs<ExtArgs>
    pageViews?: boolean | Tenant$pageViewsArgs<ExtArgs>
    moduleAnalytics?: boolean | Tenant$moduleAnalyticsArgs<ExtArgs>
    geographicData?: boolean | Tenant$geographicDataArgs<ExtArgs>
    npsResponses?: boolean | Tenant$npsResponsesArgs<ExtArgs>
    feedbackSubmissions?: boolean | Tenant$feedbackSubmissionsArgs<ExtArgs>
    satisfactionSurveys?: boolean | Tenant$satisfactionSurveysArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantCode?: boolean
    nome?: boolean
    email?: boolean
    cidade?: boolean
    estado?: boolean
    cnpj?: boolean
    plano?: boolean
    status?: boolean
    populacao?: boolean
    endereco?: boolean
    responsavelNome?: boolean
    responsavelEmail?: boolean
    responsavelTelefone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hasAdmin?: boolean
    adminConfirmed?: boolean
    adminFirstLogin?: boolean
    limiteUsuarios?: boolean
    valorMensal?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    configuracoes?: boolean
    metricas?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantCode?: boolean
    nome?: boolean
    email?: boolean
    cidade?: boolean
    estado?: boolean
    cnpj?: boolean
    plano?: boolean
    status?: boolean
    populacao?: boolean
    endereco?: boolean
    responsavelNome?: boolean
    responsavelEmail?: boolean
    responsavelTelefone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hasAdmin?: boolean
    adminConfirmed?: boolean
    adminFirstLogin?: boolean
    limiteUsuarios?: boolean
    valorMensal?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    configuracoes?: boolean
    metricas?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    tenantCode?: boolean
    nome?: boolean
    email?: boolean
    cidade?: boolean
    estado?: boolean
    cnpj?: boolean
    plano?: boolean
    status?: boolean
    populacao?: boolean
    endereco?: boolean
    responsavelNome?: boolean
    responsavelEmail?: boolean
    responsavelTelefone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hasAdmin?: boolean
    adminConfirmed?: boolean
    adminFirstLogin?: boolean
    limiteUsuarios?: boolean
    valorMensal?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    configuracoes?: boolean
    metricas?: boolean
  }

  export type TenantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantCode" | "nome" | "email" | "cidade" | "estado" | "cnpj" | "plano" | "status" | "populacao" | "endereco" | "responsavelNome" | "responsavelEmail" | "responsavelTelefone" | "createdAt" | "updatedAt" | "hasAdmin" | "adminConfirmed" | "adminFirstLogin" | "limiteUsuarios" | "valorMensal" | "usuariosAtivos" | "protocolosMes" | "configuracoes" | "metricas", ExtArgs["result"]["tenant"]>
  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Tenant$usersArgs<ExtArgs>
    activityLogs?: boolean | Tenant$activityLogsArgs<ExtArgs>
    emailDomains?: boolean | Tenant$emailDomainsArgs<ExtArgs>
    invoices?: boolean | Tenant$invoicesArgs<ExtArgs>
    analyticsUserSessions?: boolean | Tenant$analyticsUserSessionsArgs<ExtArgs>
    featureUsage?: boolean | Tenant$featureUsageArgs<ExtArgs>
    pageViews?: boolean | Tenant$pageViewsArgs<ExtArgs>
    moduleAnalytics?: boolean | Tenant$moduleAnalyticsArgs<ExtArgs>
    geographicData?: boolean | Tenant$geographicDataArgs<ExtArgs>
    npsResponses?: boolean | Tenant$npsResponsesArgs<ExtArgs>
    feedbackSubmissions?: boolean | Tenant$feedbackSubmissionsArgs<ExtArgs>
    satisfactionSurveys?: boolean | Tenant$satisfactionSurveysArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TenantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      emailDomains: Prisma.$EmailDomainPayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      analyticsUserSessions: Prisma.$AnalyticsUserSessionPayload<ExtArgs>[]
      featureUsage: Prisma.$FeatureUsagePayload<ExtArgs>[]
      pageViews: Prisma.$PageViewsPayload<ExtArgs>[]
      moduleAnalytics: Prisma.$ModuleAnalyticsPayload<ExtArgs>[]
      geographicData: Prisma.$GeographicDataPayload<ExtArgs>[]
      npsResponses: Prisma.$NpsResponsesPayload<ExtArgs>[]
      feedbackSubmissions: Prisma.$FeedbackSubmissionsPayload<ExtArgs>[]
      satisfactionSurveys: Prisma.$SatisfactionSurveysPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantCode: string
      nome: string
      email: string
      cidade: string
      estado: string
      cnpj: string
      plano: string | null
      status: string | null
      populacao: number | null
      endereco: string | null
      responsavelNome: string | null
      responsavelEmail: string | null
      responsavelTelefone: string | null
      createdAt: Date | null
      updatedAt: Date | null
      hasAdmin: boolean | null
      adminConfirmed: boolean | null
      adminFirstLogin: boolean | null
      limiteUsuarios: number | null
      valorMensal: number | null
      usuariosAtivos: number | null
      protocolosMes: number | null
      configuracoes: string | null
      metricas: string | null
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants and returns the data updated in the database.
     * @param {TenantUpdateManyAndReturnArgs} args - Arguments to update many Tenants.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TenantUpdateManyAndReturnArgs>(args: SelectSubset<T, TenantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Tenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityLogs<T extends Tenant$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailDomains<T extends Tenant$emailDomainsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$emailDomainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends Tenant$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    analyticsUserSessions<T extends Tenant$analyticsUserSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$analyticsUserSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    featureUsage<T extends Tenant$featureUsageArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$featureUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pageViews<T extends Tenant$pageViewsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$pageViewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    moduleAnalytics<T extends Tenant$moduleAnalyticsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$moduleAnalyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    geographicData<T extends Tenant$geographicDataArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$geographicDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    npsResponses<T extends Tenant$npsResponsesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$npsResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbackSubmissions<T extends Tenant$feedbackSubmissionsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$feedbackSubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    satisfactionSurveys<T extends Tenant$satisfactionSurveysArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$satisfactionSurveysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly tenantCode: FieldRef<"Tenant", 'String'>
    readonly nome: FieldRef<"Tenant", 'String'>
    readonly email: FieldRef<"Tenant", 'String'>
    readonly cidade: FieldRef<"Tenant", 'String'>
    readonly estado: FieldRef<"Tenant", 'String'>
    readonly cnpj: FieldRef<"Tenant", 'String'>
    readonly plano: FieldRef<"Tenant", 'String'>
    readonly status: FieldRef<"Tenant", 'String'>
    readonly populacao: FieldRef<"Tenant", 'Int'>
    readonly endereco: FieldRef<"Tenant", 'String'>
    readonly responsavelNome: FieldRef<"Tenant", 'String'>
    readonly responsavelEmail: FieldRef<"Tenant", 'String'>
    readonly responsavelTelefone: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
    readonly hasAdmin: FieldRef<"Tenant", 'Boolean'>
    readonly adminConfirmed: FieldRef<"Tenant", 'Boolean'>
    readonly adminFirstLogin: FieldRef<"Tenant", 'Boolean'>
    readonly limiteUsuarios: FieldRef<"Tenant", 'Int'>
    readonly valorMensal: FieldRef<"Tenant", 'Float'>
    readonly usuariosAtivos: FieldRef<"Tenant", 'Int'>
    readonly protocolosMes: FieldRef<"Tenant", 'Int'>
    readonly configuracoes: FieldRef<"Tenant", 'String'>
    readonly metricas: FieldRef<"Tenant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant updateManyAndReturn
   */
  export type TenantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to delete.
     */
    limit?: number
  }

  /**
   * Tenant.users
   */
  export type Tenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant.activityLogs
   */
  export type Tenant$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * Tenant.emailDomains
   */
  export type Tenant$emailDomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    where?: EmailDomainWhereInput
    orderBy?: EmailDomainOrderByWithRelationInput | EmailDomainOrderByWithRelationInput[]
    cursor?: EmailDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailDomainScalarFieldEnum | EmailDomainScalarFieldEnum[]
  }

  /**
   * Tenant.invoices
   */
  export type Tenant$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Tenant.analyticsUserSessions
   */
  export type Tenant$analyticsUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    where?: AnalyticsUserSessionWhereInput
    orderBy?: AnalyticsUserSessionOrderByWithRelationInput | AnalyticsUserSessionOrderByWithRelationInput[]
    cursor?: AnalyticsUserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnalyticsUserSessionScalarFieldEnum | AnalyticsUserSessionScalarFieldEnum[]
  }

  /**
   * Tenant.featureUsage
   */
  export type Tenant$featureUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    where?: FeatureUsageWhereInput
    orderBy?: FeatureUsageOrderByWithRelationInput | FeatureUsageOrderByWithRelationInput[]
    cursor?: FeatureUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureUsageScalarFieldEnum | FeatureUsageScalarFieldEnum[]
  }

  /**
   * Tenant.pageViews
   */
  export type Tenant$pageViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    where?: PageViewsWhereInput
    orderBy?: PageViewsOrderByWithRelationInput | PageViewsOrderByWithRelationInput[]
    cursor?: PageViewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PageViewsScalarFieldEnum | PageViewsScalarFieldEnum[]
  }

  /**
   * Tenant.moduleAnalytics
   */
  export type Tenant$moduleAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    where?: ModuleAnalyticsWhereInput
    orderBy?: ModuleAnalyticsOrderByWithRelationInput | ModuleAnalyticsOrderByWithRelationInput[]
    cursor?: ModuleAnalyticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModuleAnalyticsScalarFieldEnum | ModuleAnalyticsScalarFieldEnum[]
  }

  /**
   * Tenant.geographicData
   */
  export type Tenant$geographicDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    where?: GeographicDataWhereInput
    orderBy?: GeographicDataOrderByWithRelationInput | GeographicDataOrderByWithRelationInput[]
    cursor?: GeographicDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeographicDataScalarFieldEnum | GeographicDataScalarFieldEnum[]
  }

  /**
   * Tenant.npsResponses
   */
  export type Tenant$npsResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    where?: NpsResponsesWhereInput
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    cursor?: NpsResponsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NpsResponsesScalarFieldEnum | NpsResponsesScalarFieldEnum[]
  }

  /**
   * Tenant.feedbackSubmissions
   */
  export type Tenant$feedbackSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    where?: FeedbackSubmissionsWhereInput
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    cursor?: FeedbackSubmissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * Tenant.satisfactionSurveys
   */
  export type Tenant$satisfactionSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    where?: SatisfactionSurveysWhereInput
    orderBy?: SatisfactionSurveysOrderByWithRelationInput | SatisfactionSurveysOrderByWithRelationInput[]
    cursor?: SatisfactionSurveysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SatisfactionSurveysScalarFieldEnum | SatisfactionSurveysScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    failedLoginAttempts: number | null
  }

  export type UserSumAggregateOutputType = {
    failedLoginAttempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    nomeCompleto: string | null
    email: string | null
    passwordHash: string | null
    role: string | null
    status: string | null
    avatarUrl: string | null
    ultimoLogin: Date | null
    failedLoginAttempts: number | null
    lockedUntil: Date | null
    emailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tipoUsuario: string | null
    telefone: string | null
    ultimaAtividade: Date | null
    ativo: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    nomeCompleto: string | null
    email: string | null
    passwordHash: string | null
    role: string | null
    status: string | null
    avatarUrl: string | null
    ultimoLogin: Date | null
    failedLoginAttempts: number | null
    lockedUntil: Date | null
    emailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tipoUsuario: string | null
    telefone: string | null
    ultimaAtividade: Date | null
    ativo: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    tenantId: number
    nomeCompleto: number
    email: number
    passwordHash: number
    role: number
    status: number
    avatarUrl: number
    ultimoLogin: number
    failedLoginAttempts: number
    lockedUntil: number
    emailVerified: number
    createdAt: number
    updatedAt: number
    tipoUsuario: number
    telefone: number
    ultimaAtividade: number
    ativo: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    failedLoginAttempts?: true
  }

  export type UserSumAggregateInputType = {
    failedLoginAttempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    tenantId?: true
    nomeCompleto?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    avatarUrl?: true
    ultimoLogin?: true
    failedLoginAttempts?: true
    lockedUntil?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    tipoUsuario?: true
    telefone?: true
    ultimaAtividade?: true
    ativo?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    tenantId?: true
    nomeCompleto?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    avatarUrl?: true
    ultimoLogin?: true
    failedLoginAttempts?: true
    lockedUntil?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    tipoUsuario?: true
    telefone?: true
    ultimaAtividade?: true
    ativo?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    tenantId?: true
    nomeCompleto?: true
    email?: true
    passwordHash?: true
    role?: true
    status?: true
    avatarUrl?: true
    ultimoLogin?: true
    failedLoginAttempts?: true
    lockedUntil?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    tipoUsuario?: true
    telefone?: true
    ultimaAtividade?: true
    ativo?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    tenantId: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role: string
    status: string
    avatarUrl: string | null
    ultimoLogin: Date | null
    failedLoginAttempts: number | null
    lockedUntil: Date | null
    emailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tipoUsuario: string | null
    telefone: string | null
    ultimaAtividade: Date | null
    ativo: boolean | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    nomeCompleto?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatarUrl?: boolean
    ultimoLogin?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tipoUsuario?: boolean
    telefone?: boolean
    ultimaAtividade?: boolean
    ativo?: boolean
    tenant?: boolean | User$tenantArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    grantedPermissions?: boolean | User$grantedPermissionsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    smtpUsers?: boolean | User$smtpUsersArgs<ExtArgs>
    userSessions?: boolean | User$userSessionsArgs<ExtArgs>
    userTokens?: boolean | User$userTokensArgs<ExtArgs>
    passwordResetTokens?: boolean | User$passwordResetTokensArgs<ExtArgs>
    emailVerificationTokens?: boolean | User$emailVerificationTokensArgs<ExtArgs>
    analyticsUserSessions?: boolean | User$analyticsUserSessionsArgs<ExtArgs>
    featureUsage?: boolean | User$featureUsageArgs<ExtArgs>
    pageViews?: boolean | User$pageViewsArgs<ExtArgs>
    npsResponses?: boolean | User$npsResponsesArgs<ExtArgs>
    feedbackSubmissions?: boolean | User$feedbackSubmissionsArgs<ExtArgs>
    assignedFeedbacks?: boolean | User$assignedFeedbacksArgs<ExtArgs>
    createdReports?: boolean | User$createdReportsArgs<ExtArgs>
    createdSurveys?: boolean | User$createdSurveysArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    nomeCompleto?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatarUrl?: boolean
    ultimoLogin?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tipoUsuario?: boolean
    telefone?: boolean
    ultimaAtividade?: boolean
    ativo?: boolean
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    nomeCompleto?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatarUrl?: boolean
    ultimoLogin?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tipoUsuario?: boolean
    telefone?: boolean
    ultimaAtividade?: boolean
    ativo?: boolean
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    tenantId?: boolean
    nomeCompleto?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    status?: boolean
    avatarUrl?: boolean
    ultimoLogin?: boolean
    failedLoginAttempts?: boolean
    lockedUntil?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tipoUsuario?: boolean
    telefone?: boolean
    ultimaAtividade?: boolean
    ativo?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "nomeCompleto" | "email" | "passwordHash" | "role" | "status" | "avatarUrl" | "ultimoLogin" | "failedLoginAttempts" | "lockedUntil" | "emailVerified" | "createdAt" | "updatedAt" | "tipoUsuario" | "telefone" | "ultimaAtividade" | "ativo", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | User$tenantArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    grantedPermissions?: boolean | User$grantedPermissionsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    smtpUsers?: boolean | User$smtpUsersArgs<ExtArgs>
    userSessions?: boolean | User$userSessionsArgs<ExtArgs>
    userTokens?: boolean | User$userTokensArgs<ExtArgs>
    passwordResetTokens?: boolean | User$passwordResetTokensArgs<ExtArgs>
    emailVerificationTokens?: boolean | User$emailVerificationTokensArgs<ExtArgs>
    analyticsUserSessions?: boolean | User$analyticsUserSessionsArgs<ExtArgs>
    featureUsage?: boolean | User$featureUsageArgs<ExtArgs>
    pageViews?: boolean | User$pageViewsArgs<ExtArgs>
    npsResponses?: boolean | User$npsResponsesArgs<ExtArgs>
    feedbackSubmissions?: boolean | User$feedbackSubmissionsArgs<ExtArgs>
    assignedFeedbacks?: boolean | User$assignedFeedbacksArgs<ExtArgs>
    createdReports?: boolean | User$createdReportsArgs<ExtArgs>
    createdSurveys?: boolean | User$createdSurveysArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      permissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      grantedPermissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      smtpUsers: Prisma.$SmtpUserPayload<ExtArgs>[]
      userSessions: Prisma.$UserSessionPayload<ExtArgs>[]
      userTokens: Prisma.$UserTokenPayload<ExtArgs>[]
      passwordResetTokens: Prisma.$PasswordResetTokenPayload<ExtArgs>[]
      emailVerificationTokens: Prisma.$EmailVerificationTokenPayload<ExtArgs>[]
      analyticsUserSessions: Prisma.$AnalyticsUserSessionPayload<ExtArgs>[]
      featureUsage: Prisma.$FeatureUsagePayload<ExtArgs>[]
      pageViews: Prisma.$PageViewsPayload<ExtArgs>[]
      npsResponses: Prisma.$NpsResponsesPayload<ExtArgs>[]
      feedbackSubmissions: Prisma.$FeedbackSubmissionsPayload<ExtArgs>[]
      assignedFeedbacks: Prisma.$FeedbackSubmissionsPayload<ExtArgs>[]
      createdReports: Prisma.$AutomatedReportsPayload<ExtArgs>[]
      createdSurveys: Prisma.$SatisfactionSurveysPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string | null
      nomeCompleto: string
      email: string
      passwordHash: string
      role: string
      status: string
      avatarUrl: string | null
      ultimoLogin: Date | null
      failedLoginAttempts: number | null
      lockedUntil: Date | null
      emailVerified: boolean | null
      createdAt: Date | null
      updatedAt: Date | null
      tipoUsuario: string | null
      telefone: string | null
      ultimaAtividade: Date | null
      ativo: boolean | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends User$tenantArgs<ExtArgs> = {}>(args?: Subset<T, User$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    grantedPermissions<T extends User$grantedPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$grantedPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityLogs<T extends User$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    smtpUsers<T extends User$smtpUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$smtpUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userSessions<T extends User$userSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$userSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userTokens<T extends User$userTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$userTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    passwordResetTokens<T extends User$passwordResetTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordResetTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailVerificationTokens<T extends User$emailVerificationTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$emailVerificationTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    analyticsUserSessions<T extends User$analyticsUserSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$analyticsUserSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    featureUsage<T extends User$featureUsageArgs<ExtArgs> = {}>(args?: Subset<T, User$featureUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pageViews<T extends User$pageViewsArgs<ExtArgs> = {}>(args?: Subset<T, User$pageViewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    npsResponses<T extends User$npsResponsesArgs<ExtArgs> = {}>(args?: Subset<T, User$npsResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbackSubmissions<T extends User$feedbackSubmissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackSubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedFeedbacks<T extends User$assignedFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdReports<T extends User$createdReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdSurveys<T extends User$createdSurveysArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSurveysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly tenantId: FieldRef<"User", 'String'>
    readonly nomeCompleto: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly ultimoLogin: FieldRef<"User", 'DateTime'>
    readonly failedLoginAttempts: FieldRef<"User", 'Int'>
    readonly lockedUntil: FieldRef<"User", 'DateTime'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly tipoUsuario: FieldRef<"User", 'String'>
    readonly telefone: FieldRef<"User", 'String'>
    readonly ultimaAtividade: FieldRef<"User", 'DateTime'>
    readonly ativo: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.tenant
   */
  export type User$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.grantedPermissions
   */
  export type User$grantedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.activityLogs
   */
  export type User$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * User.smtpUsers
   */
  export type User$smtpUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    where?: SmtpUserWhereInput
    orderBy?: SmtpUserOrderByWithRelationInput | SmtpUserOrderByWithRelationInput[]
    cursor?: SmtpUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SmtpUserScalarFieldEnum | SmtpUserScalarFieldEnum[]
  }

  /**
   * User.userSessions
   */
  export type User$userSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.userTokens
   */
  export type User$userTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    where?: UserTokenWhereInput
    orderBy?: UserTokenOrderByWithRelationInput | UserTokenOrderByWithRelationInput[]
    cursor?: UserTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTokenScalarFieldEnum | UserTokenScalarFieldEnum[]
  }

  /**
   * User.passwordResetTokens
   */
  export type User$passwordResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    cursor?: PasswordResetTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * User.emailVerificationTokens
   */
  export type User$emailVerificationTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    where?: EmailVerificationTokenWhereInput
    orderBy?: EmailVerificationTokenOrderByWithRelationInput | EmailVerificationTokenOrderByWithRelationInput[]
    cursor?: EmailVerificationTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailVerificationTokenScalarFieldEnum | EmailVerificationTokenScalarFieldEnum[]
  }

  /**
   * User.analyticsUserSessions
   */
  export type User$analyticsUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    where?: AnalyticsUserSessionWhereInput
    orderBy?: AnalyticsUserSessionOrderByWithRelationInput | AnalyticsUserSessionOrderByWithRelationInput[]
    cursor?: AnalyticsUserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnalyticsUserSessionScalarFieldEnum | AnalyticsUserSessionScalarFieldEnum[]
  }

  /**
   * User.featureUsage
   */
  export type User$featureUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    where?: FeatureUsageWhereInput
    orderBy?: FeatureUsageOrderByWithRelationInput | FeatureUsageOrderByWithRelationInput[]
    cursor?: FeatureUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureUsageScalarFieldEnum | FeatureUsageScalarFieldEnum[]
  }

  /**
   * User.pageViews
   */
  export type User$pageViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    where?: PageViewsWhereInput
    orderBy?: PageViewsOrderByWithRelationInput | PageViewsOrderByWithRelationInput[]
    cursor?: PageViewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PageViewsScalarFieldEnum | PageViewsScalarFieldEnum[]
  }

  /**
   * User.npsResponses
   */
  export type User$npsResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    where?: NpsResponsesWhereInput
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    cursor?: NpsResponsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NpsResponsesScalarFieldEnum | NpsResponsesScalarFieldEnum[]
  }

  /**
   * User.feedbackSubmissions
   */
  export type User$feedbackSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    where?: FeedbackSubmissionsWhereInput
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    cursor?: FeedbackSubmissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * User.assignedFeedbacks
   */
  export type User$assignedFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    where?: FeedbackSubmissionsWhereInput
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    cursor?: FeedbackSubmissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * User.createdReports
   */
  export type User$createdReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    where?: AutomatedReportsWhereInput
    orderBy?: AutomatedReportsOrderByWithRelationInput | AutomatedReportsOrderByWithRelationInput[]
    cursor?: AutomatedReportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AutomatedReportsScalarFieldEnum | AutomatedReportsScalarFieldEnum[]
  }

  /**
   * User.createdSurveys
   */
  export type User$createdSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    where?: SatisfactionSurveysWhereInput
    orderBy?: SatisfactionSurveysOrderByWithRelationInput | SatisfactionSurveysOrderByWithRelationInput[]
    cursor?: SatisfactionSurveysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SatisfactionSurveysScalarFieldEnum | SatisfactionSurveysScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    code: string | null
    resource: string | null
    action: string | null
    description: string | null
    createdAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    code: string | null
    resource: string | null
    action: string | null
    description: string | null
    createdAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    code: number
    resource: number
    action: number
    description: number
    createdAt: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    code?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    code?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    code?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: number
    code: string
    resource: string
    action: string
    description: string | null
    createdAt: Date | null
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
    userPermissions?: boolean | Permission$userPermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    code?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "resource" | "action" | "description" | "createdAt", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userPermissions?: boolean | Permission$userPermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      userPermissions: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      resource: string
      action: string
      description: string | null
      createdAt: Date | null
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions and returns the data updated in the database.
     * @param {PermissionUpdateManyAndReturnArgs} args - Arguments to update many Permissions.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, PermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userPermissions<T extends Permission$userPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$userPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'Int'>
    readonly code: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission updateManyAndReturn
   */
  export type PermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.userPermissions
   */
  export type Permission$userPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionAvgAggregateOutputType = {
    id: number | null
    permissionId: number | null
  }

  export type UserPermissionSumAggregateOutputType = {
    id: number | null
    permissionId: number | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: number | null
    userId: string | null
    permissionId: number | null
    grantedBy: string | null
    createdAt: Date | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    permissionId: number | null
    grantedBy: string | null
    createdAt: Date | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    permissionId: number
    grantedBy: number
    createdAt: number
    _all: number
  }


  export type UserPermissionAvgAggregateInputType = {
    id?: true
    permissionId?: true
  }

  export type UserPermissionSumAggregateInputType = {
    id?: true
    permissionId?: true
  }

  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedBy?: true
    createdAt?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedBy?: true
    createdAt?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedBy?: true
    createdAt?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _avg?: UserPermissionAvgAggregateInputType
    _sum?: UserPermissionSumAggregateInputType
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: number
    userId: string
    permissionId: number
    grantedBy: string | null
    createdAt: Date | null
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedBy?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantor?: boolean | UserPermission$grantorArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedBy?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantor?: boolean | UserPermission$grantorArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedBy?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantor?: boolean | UserPermission$grantorArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedBy?: boolean
    createdAt?: boolean
  }

  export type UserPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "permissionId" | "grantedBy" | "createdAt", ExtArgs["result"]["userPermission"]>
  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantor?: boolean | UserPermission$grantorArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantor?: boolean | UserPermission$grantorArgs<ExtArgs>
  }
  export type UserPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantor?: boolean | UserPermission$grantorArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
      grantor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      permissionId: number
      grantedBy: string | null
      createdAt: Date | null
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions and returns the data updated in the database.
     * @param {UserPermissionUpdateManyAndReturnArgs} args - Arguments to update many UserPermissions.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grantor<T extends UserPermission$grantorArgs<ExtArgs> = {}>(args?: Subset<T, UserPermission$grantorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'Int'>
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permissionId: FieldRef<"UserPermission", 'Int'>
    readonly grantedBy: FieldRef<"UserPermission", 'String'>
    readonly createdAt: FieldRef<"UserPermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
  }

  /**
   * UserPermission updateManyAndReturn
   */
  export type UserPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to delete.
     */
    limit?: number
  }

  /**
   * UserPermission.grantor
   */
  export type UserPermission$grantorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Model ActivityLog
   */

  export type AggregateActivityLog = {
    _count: ActivityLogCountAggregateOutputType | null
    _avg: ActivityLogAvgAggregateOutputType | null
    _sum: ActivityLogSumAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  export type ActivityLogAvgAggregateOutputType = {
    id: number | null
  }

  export type ActivityLogSumAggregateOutputType = {
    id: number | null
  }

  export type ActivityLogMinAggregateOutputType = {
    id: number | null
    userId: string | null
    tenantId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type ActivityLogMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    tenantId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type ActivityLogCountAggregateOutputType = {
    id: number
    userId: number
    tenantId: number
    action: number
    resource: number
    resourceId: number
    details: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type ActivityLogAvgAggregateInputType = {
    id?: true
  }

  export type ActivityLogSumAggregateInputType = {
    id?: true
  }

  export type ActivityLogMinAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    action?: true
    resource?: true
    resourceId?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type ActivityLogMaxAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    action?: true
    resource?: true
    resourceId?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type ActivityLogCountAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    action?: true
    resource?: true
    resourceId?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLog to aggregate.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLogs
    **/
    _count?: true | ActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLogMaxAggregateInputType
  }

  export type GetActivityLogAggregateType<T extends ActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLog[P]>
      : GetScalarType<T[P], AggregateActivityLog[P]>
  }




  export type ActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithAggregationInput | ActivityLogOrderByWithAggregationInput[]
    by: ActivityLogScalarFieldEnum[] | ActivityLogScalarFieldEnum
    having?: ActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLogCountAggregateInputType | true
    _avg?: ActivityLogAvgAggregateInputType
    _sum?: ActivityLogSumAggregateInputType
    _min?: ActivityLogMinAggregateInputType
    _max?: ActivityLogMaxAggregateInputType
  }

  export type ActivityLogGroupByOutputType = {
    id: number
    userId: string | null
    tenantId: string | null
    action: string
    resource: string | null
    resourceId: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    _count: ActivityLogCountAggregateOutputType | null
    _avg: ActivityLogAvgAggregateOutputType | null
    _sum: ActivityLogSumAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  type GetActivityLogGroupByPayload<T extends ActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | ActivityLog$userArgs<ExtArgs>
    tenant?: boolean | ActivityLog$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | ActivityLog$userArgs<ExtArgs>
    tenant?: boolean | ActivityLog$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | ActivityLog$userArgs<ExtArgs>
    tenant?: boolean | ActivityLog$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectScalar = {
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type ActivityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tenantId" | "action" | "resource" | "resourceId" | "details" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["activityLog"]>
  export type ActivityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ActivityLog$userArgs<ExtArgs>
    tenant?: boolean | ActivityLog$tenantArgs<ExtArgs>
  }
  export type ActivityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ActivityLog$userArgs<ExtArgs>
    tenant?: boolean | ActivityLog$tenantArgs<ExtArgs>
  }
  export type ActivityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ActivityLog$userArgs<ExtArgs>
    tenant?: boolean | ActivityLog$tenantArgs<ExtArgs>
  }

  export type $ActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string | null
      tenantId: string | null
      action: string
      resource: string | null
      resourceId: string | null
      details: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date | null
    }, ExtArgs["result"]["activityLog"]>
    composites: {}
  }

  type ActivityLogGetPayload<S extends boolean | null | undefined | ActivityLogDefaultArgs> = $Result.GetResult<Prisma.$ActivityLogPayload, S>

  type ActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityLogCountAggregateInputType | true
    }

  export interface ActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLog'], meta: { name: 'ActivityLog' } }
    /**
     * Find zero or one ActivityLog that matches the filter.
     * @param {ActivityLogFindUniqueArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLogFindUniqueArgs>(args: SelectSubset<T, ActivityLogFindUniqueArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityLogFindUniqueOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLogFindFirstArgs>(args?: SelectSubset<T, ActivityLogFindFirstArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany()
     * 
     * // Get first 10 ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLogFindManyArgs>(args?: SelectSubset<T, ActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityLog.
     * @param {ActivityLogCreateArgs} args - Arguments to create a ActivityLog.
     * @example
     * // Create one ActivityLog
     * const ActivityLog = await prisma.activityLog.create({
     *   data: {
     *     // ... data to create a ActivityLog
     *   }
     * })
     * 
     */
    create<T extends ActivityLogCreateArgs>(args: SelectSubset<T, ActivityLogCreateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityLogs.
     * @param {ActivityLogCreateManyArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLogCreateManyArgs>(args?: SelectSubset<T, ActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLogs and returns the data saved in the database.
     * @param {ActivityLogCreateManyAndReturnArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityLog.
     * @param {ActivityLogDeleteArgs} args - Arguments to delete one ActivityLog.
     * @example
     * // Delete one ActivityLog
     * const ActivityLog = await prisma.activityLog.delete({
     *   where: {
     *     // ... filter to delete one ActivityLog
     *   }
     * })
     * 
     */
    delete<T extends ActivityLogDeleteArgs>(args: SelectSubset<T, ActivityLogDeleteArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityLog.
     * @param {ActivityLogUpdateArgs} args - Arguments to update one ActivityLog.
     * @example
     * // Update one ActivityLog
     * const activityLog = await prisma.activityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLogUpdateArgs>(args: SelectSubset<T, ActivityLogUpdateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityLogs.
     * @param {ActivityLogDeleteManyArgs} args - Arguments to filter ActivityLogs to delete.
     * @example
     * // Delete a few ActivityLogs
     * const { count } = await prisma.activityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLogDeleteManyArgs>(args?: SelectSubset<T, ActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLogUpdateManyArgs>(args: SelectSubset<T, ActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs and returns the data updated in the database.
     * @param {ActivityLogUpdateManyAndReturnArgs} args - Arguments to update many ActivityLogs.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityLog.
     * @param {ActivityLogUpsertArgs} args - Arguments to update or create a ActivityLog.
     * @example
     * // Update or create a ActivityLog
     * const activityLog = await prisma.activityLog.upsert({
     *   create: {
     *     // ... data to create a ActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLogUpsertArgs>(args: SelectSubset<T, ActivityLogUpsertArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogCountArgs} args - Arguments to filter ActivityLogs to count.
     * @example
     * // Count the number of ActivityLogs
     * const count = await prisma.activityLog.count({
     *   where: {
     *     // ... the filter for the ActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends ActivityLogCountArgs>(
      args?: Subset<T, ActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLogAggregateArgs>(args: Subset<T, ActivityLogAggregateArgs>): Prisma.PrismaPromise<GetActivityLogAggregateType<T>>

    /**
     * Group by ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLog model
   */
  readonly fields: ActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends ActivityLog$userArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends ActivityLog$tenantArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLog$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLog model
   */
  interface ActivityLogFieldRefs {
    readonly id: FieldRef<"ActivityLog", 'Int'>
    readonly userId: FieldRef<"ActivityLog", 'String'>
    readonly tenantId: FieldRef<"ActivityLog", 'String'>
    readonly action: FieldRef<"ActivityLog", 'String'>
    readonly resource: FieldRef<"ActivityLog", 'String'>
    readonly resourceId: FieldRef<"ActivityLog", 'String'>
    readonly details: FieldRef<"ActivityLog", 'String'>
    readonly ipAddress: FieldRef<"ActivityLog", 'String'>
    readonly userAgent: FieldRef<"ActivityLog", 'String'>
    readonly createdAt: FieldRef<"ActivityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLog findUnique
   */
  export type ActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findUniqueOrThrow
   */
  export type ActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findFirst
   */
  export type ActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findFirstOrThrow
   */
  export type ActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findMany
   */
  export type ActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog create
   */
  export type ActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLog.
     */
    data: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
  }

  /**
   * ActivityLog createMany
   */
  export type ActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
  }

  /**
   * ActivityLog createManyAndReturn
   */
  export type ActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog update
   */
  export type ActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLog.
     */
    data: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
    /**
     * Choose, which ActivityLog to update.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog updateMany
   */
  export type ActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
  }

  /**
   * ActivityLog updateManyAndReturn
   */
  export type ActivityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog upsert
   */
  export type ActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLog to update in case it exists.
     */
    where: ActivityLogWhereUniqueInput
    /**
     * In case the ActivityLog found by the `where` argument doesn't exist, create a new ActivityLog with this data.
     */
    create: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
    /**
     * In case the ActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
  }

  /**
   * ActivityLog delete
   */
  export type ActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter which ActivityLog to delete.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog deleteMany
   */
  export type ActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to delete
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * ActivityLog.user
   */
  export type ActivityLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ActivityLog.tenant
   */
  export type ActivityLog$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * ActivityLog without action
   */
  export type ActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
  }


  /**
   * Model SmtpUser
   */

  export type AggregateSmtpUser = {
    _count: SmtpUserCountAggregateOutputType | null
    _avg: SmtpUserAvgAggregateOutputType | null
    _sum: SmtpUserSumAggregateOutputType | null
    _min: SmtpUserMinAggregateOutputType | null
    _max: SmtpUserMaxAggregateOutputType | null
  }

  export type SmtpUserAvgAggregateOutputType = {
    id: number | null
  }

  export type SmtpUserSumAggregateOutputType = {
    id: number | null
  }

  export type SmtpUserMinAggregateOutputType = {
    id: number | null
    userId: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    isVerified: boolean | null
    isActive: boolean | null
    isAdmin: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SmtpUserMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    isVerified: boolean | null
    isActive: boolean | null
    isAdmin: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SmtpUserCountAggregateOutputType = {
    id: number
    userId: number
    email: number
    passwordHash: number
    name: number
    isVerified: number
    isActive: number
    isAdmin: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SmtpUserAvgAggregateInputType = {
    id?: true
  }

  export type SmtpUserSumAggregateInputType = {
    id?: true
  }

  export type SmtpUserMinAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    passwordHash?: true
    name?: true
    isVerified?: true
    isActive?: true
    isAdmin?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SmtpUserMaxAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    passwordHash?: true
    name?: true
    isVerified?: true
    isActive?: true
    isAdmin?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SmtpUserCountAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    passwordHash?: true
    name?: true
    isVerified?: true
    isActive?: true
    isAdmin?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SmtpUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SmtpUser to aggregate.
     */
    where?: SmtpUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpUsers to fetch.
     */
    orderBy?: SmtpUserOrderByWithRelationInput | SmtpUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SmtpUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SmtpUsers
    **/
    _count?: true | SmtpUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SmtpUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SmtpUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SmtpUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SmtpUserMaxAggregateInputType
  }

  export type GetSmtpUserAggregateType<T extends SmtpUserAggregateArgs> = {
        [P in keyof T & keyof AggregateSmtpUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSmtpUser[P]>
      : GetScalarType<T[P], AggregateSmtpUser[P]>
  }




  export type SmtpUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SmtpUserWhereInput
    orderBy?: SmtpUserOrderByWithAggregationInput | SmtpUserOrderByWithAggregationInput[]
    by: SmtpUserScalarFieldEnum[] | SmtpUserScalarFieldEnum
    having?: SmtpUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SmtpUserCountAggregateInputType | true
    _avg?: SmtpUserAvgAggregateInputType
    _sum?: SmtpUserSumAggregateInputType
    _min?: SmtpUserMinAggregateInputType
    _max?: SmtpUserMaxAggregateInputType
  }

  export type SmtpUserGroupByOutputType = {
    id: number
    userId: string | null
    email: string
    passwordHash: string
    name: string
    isVerified: boolean
    isActive: boolean
    isAdmin: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SmtpUserCountAggregateOutputType | null
    _avg: SmtpUserAvgAggregateOutputType | null
    _sum: SmtpUserSumAggregateOutputType | null
    _min: SmtpUserMinAggregateOutputType | null
    _max: SmtpUserMaxAggregateOutputType | null
  }

  type GetSmtpUserGroupByPayload<T extends SmtpUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SmtpUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SmtpUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SmtpUserGroupByOutputType[P]>
            : GetScalarType<T[P], SmtpUserGroupByOutputType[P]>
        }
      >
    >


  export type SmtpUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | SmtpUser$userArgs<ExtArgs>
    domains?: boolean | SmtpUser$domainsArgs<ExtArgs>
    authAttempts?: boolean | SmtpUser$authAttemptsArgs<ExtArgs>
    _count?: boolean | SmtpUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["smtpUser"]>

  export type SmtpUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | SmtpUser$userArgs<ExtArgs>
  }, ExtArgs["result"]["smtpUser"]>

  export type SmtpUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | SmtpUser$userArgs<ExtArgs>
  }, ExtArgs["result"]["smtpUser"]>

  export type SmtpUserSelectScalar = {
    id?: boolean
    userId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SmtpUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "email" | "passwordHash" | "name" | "isVerified" | "isActive" | "isAdmin" | "lastLogin" | "createdAt" | "updatedAt", ExtArgs["result"]["smtpUser"]>
  export type SmtpUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SmtpUser$userArgs<ExtArgs>
    domains?: boolean | SmtpUser$domainsArgs<ExtArgs>
    authAttempts?: boolean | SmtpUser$authAttemptsArgs<ExtArgs>
    _count?: boolean | SmtpUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SmtpUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SmtpUser$userArgs<ExtArgs>
  }
  export type SmtpUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SmtpUser$userArgs<ExtArgs>
  }

  export type $SmtpUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SmtpUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      domains: Prisma.$EmailDomainPayload<ExtArgs>[]
      authAttempts: Prisma.$AuthAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string | null
      email: string
      passwordHash: string
      name: string
      isVerified: boolean
      isActive: boolean
      isAdmin: boolean
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["smtpUser"]>
    composites: {}
  }

  type SmtpUserGetPayload<S extends boolean | null | undefined | SmtpUserDefaultArgs> = $Result.GetResult<Prisma.$SmtpUserPayload, S>

  type SmtpUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SmtpUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SmtpUserCountAggregateInputType | true
    }

  export interface SmtpUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SmtpUser'], meta: { name: 'SmtpUser' } }
    /**
     * Find zero or one SmtpUser that matches the filter.
     * @param {SmtpUserFindUniqueArgs} args - Arguments to find a SmtpUser
     * @example
     * // Get one SmtpUser
     * const smtpUser = await prisma.smtpUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SmtpUserFindUniqueArgs>(args: SelectSubset<T, SmtpUserFindUniqueArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SmtpUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SmtpUserFindUniqueOrThrowArgs} args - Arguments to find a SmtpUser
     * @example
     * // Get one SmtpUser
     * const smtpUser = await prisma.smtpUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SmtpUserFindUniqueOrThrowArgs>(args: SelectSubset<T, SmtpUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SmtpUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserFindFirstArgs} args - Arguments to find a SmtpUser
     * @example
     * // Get one SmtpUser
     * const smtpUser = await prisma.smtpUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SmtpUserFindFirstArgs>(args?: SelectSubset<T, SmtpUserFindFirstArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SmtpUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserFindFirstOrThrowArgs} args - Arguments to find a SmtpUser
     * @example
     * // Get one SmtpUser
     * const smtpUser = await prisma.smtpUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SmtpUserFindFirstOrThrowArgs>(args?: SelectSubset<T, SmtpUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SmtpUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SmtpUsers
     * const smtpUsers = await prisma.smtpUser.findMany()
     * 
     * // Get first 10 SmtpUsers
     * const smtpUsers = await prisma.smtpUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const smtpUserWithIdOnly = await prisma.smtpUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SmtpUserFindManyArgs>(args?: SelectSubset<T, SmtpUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SmtpUser.
     * @param {SmtpUserCreateArgs} args - Arguments to create a SmtpUser.
     * @example
     * // Create one SmtpUser
     * const SmtpUser = await prisma.smtpUser.create({
     *   data: {
     *     // ... data to create a SmtpUser
     *   }
     * })
     * 
     */
    create<T extends SmtpUserCreateArgs>(args: SelectSubset<T, SmtpUserCreateArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SmtpUsers.
     * @param {SmtpUserCreateManyArgs} args - Arguments to create many SmtpUsers.
     * @example
     * // Create many SmtpUsers
     * const smtpUser = await prisma.smtpUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SmtpUserCreateManyArgs>(args?: SelectSubset<T, SmtpUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SmtpUsers and returns the data saved in the database.
     * @param {SmtpUserCreateManyAndReturnArgs} args - Arguments to create many SmtpUsers.
     * @example
     * // Create many SmtpUsers
     * const smtpUser = await prisma.smtpUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SmtpUsers and only return the `id`
     * const smtpUserWithIdOnly = await prisma.smtpUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SmtpUserCreateManyAndReturnArgs>(args?: SelectSubset<T, SmtpUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SmtpUser.
     * @param {SmtpUserDeleteArgs} args - Arguments to delete one SmtpUser.
     * @example
     * // Delete one SmtpUser
     * const SmtpUser = await prisma.smtpUser.delete({
     *   where: {
     *     // ... filter to delete one SmtpUser
     *   }
     * })
     * 
     */
    delete<T extends SmtpUserDeleteArgs>(args: SelectSubset<T, SmtpUserDeleteArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SmtpUser.
     * @param {SmtpUserUpdateArgs} args - Arguments to update one SmtpUser.
     * @example
     * // Update one SmtpUser
     * const smtpUser = await prisma.smtpUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SmtpUserUpdateArgs>(args: SelectSubset<T, SmtpUserUpdateArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SmtpUsers.
     * @param {SmtpUserDeleteManyArgs} args - Arguments to filter SmtpUsers to delete.
     * @example
     * // Delete a few SmtpUsers
     * const { count } = await prisma.smtpUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SmtpUserDeleteManyArgs>(args?: SelectSubset<T, SmtpUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmtpUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SmtpUsers
     * const smtpUser = await prisma.smtpUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SmtpUserUpdateManyArgs>(args: SelectSubset<T, SmtpUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmtpUsers and returns the data updated in the database.
     * @param {SmtpUserUpdateManyAndReturnArgs} args - Arguments to update many SmtpUsers.
     * @example
     * // Update many SmtpUsers
     * const smtpUser = await prisma.smtpUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SmtpUsers and only return the `id`
     * const smtpUserWithIdOnly = await prisma.smtpUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SmtpUserUpdateManyAndReturnArgs>(args: SelectSubset<T, SmtpUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SmtpUser.
     * @param {SmtpUserUpsertArgs} args - Arguments to update or create a SmtpUser.
     * @example
     * // Update or create a SmtpUser
     * const smtpUser = await prisma.smtpUser.upsert({
     *   create: {
     *     // ... data to create a SmtpUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SmtpUser we want to update
     *   }
     * })
     */
    upsert<T extends SmtpUserUpsertArgs>(args: SelectSubset<T, SmtpUserUpsertArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SmtpUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserCountArgs} args - Arguments to filter SmtpUsers to count.
     * @example
     * // Count the number of SmtpUsers
     * const count = await prisma.smtpUser.count({
     *   where: {
     *     // ... the filter for the SmtpUsers we want to count
     *   }
     * })
    **/
    count<T extends SmtpUserCountArgs>(
      args?: Subset<T, SmtpUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SmtpUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SmtpUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SmtpUserAggregateArgs>(args: Subset<T, SmtpUserAggregateArgs>): Prisma.PrismaPromise<GetSmtpUserAggregateType<T>>

    /**
     * Group by SmtpUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SmtpUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SmtpUserGroupByArgs['orderBy'] }
        : { orderBy?: SmtpUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SmtpUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSmtpUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SmtpUser model
   */
  readonly fields: SmtpUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SmtpUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SmtpUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends SmtpUser$userArgs<ExtArgs> = {}>(args?: Subset<T, SmtpUser$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    domains<T extends SmtpUser$domainsArgs<ExtArgs> = {}>(args?: Subset<T, SmtpUser$domainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    authAttempts<T extends SmtpUser$authAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, SmtpUser$authAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SmtpUser model
   */
  interface SmtpUserFieldRefs {
    readonly id: FieldRef<"SmtpUser", 'Int'>
    readonly userId: FieldRef<"SmtpUser", 'String'>
    readonly email: FieldRef<"SmtpUser", 'String'>
    readonly passwordHash: FieldRef<"SmtpUser", 'String'>
    readonly name: FieldRef<"SmtpUser", 'String'>
    readonly isVerified: FieldRef<"SmtpUser", 'Boolean'>
    readonly isActive: FieldRef<"SmtpUser", 'Boolean'>
    readonly isAdmin: FieldRef<"SmtpUser", 'Boolean'>
    readonly lastLogin: FieldRef<"SmtpUser", 'DateTime'>
    readonly createdAt: FieldRef<"SmtpUser", 'DateTime'>
    readonly updatedAt: FieldRef<"SmtpUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SmtpUser findUnique
   */
  export type SmtpUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * Filter, which SmtpUser to fetch.
     */
    where: SmtpUserWhereUniqueInput
  }

  /**
   * SmtpUser findUniqueOrThrow
   */
  export type SmtpUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * Filter, which SmtpUser to fetch.
     */
    where: SmtpUserWhereUniqueInput
  }

  /**
   * SmtpUser findFirst
   */
  export type SmtpUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * Filter, which SmtpUser to fetch.
     */
    where?: SmtpUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpUsers to fetch.
     */
    orderBy?: SmtpUserOrderByWithRelationInput | SmtpUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SmtpUsers.
     */
    cursor?: SmtpUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SmtpUsers.
     */
    distinct?: SmtpUserScalarFieldEnum | SmtpUserScalarFieldEnum[]
  }

  /**
   * SmtpUser findFirstOrThrow
   */
  export type SmtpUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * Filter, which SmtpUser to fetch.
     */
    where?: SmtpUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpUsers to fetch.
     */
    orderBy?: SmtpUserOrderByWithRelationInput | SmtpUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SmtpUsers.
     */
    cursor?: SmtpUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SmtpUsers.
     */
    distinct?: SmtpUserScalarFieldEnum | SmtpUserScalarFieldEnum[]
  }

  /**
   * SmtpUser findMany
   */
  export type SmtpUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * Filter, which SmtpUsers to fetch.
     */
    where?: SmtpUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpUsers to fetch.
     */
    orderBy?: SmtpUserOrderByWithRelationInput | SmtpUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SmtpUsers.
     */
    cursor?: SmtpUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpUsers.
     */
    skip?: number
    distinct?: SmtpUserScalarFieldEnum | SmtpUserScalarFieldEnum[]
  }

  /**
   * SmtpUser create
   */
  export type SmtpUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * The data needed to create a SmtpUser.
     */
    data: XOR<SmtpUserCreateInput, SmtpUserUncheckedCreateInput>
  }

  /**
   * SmtpUser createMany
   */
  export type SmtpUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SmtpUsers.
     */
    data: SmtpUserCreateManyInput | SmtpUserCreateManyInput[]
  }

  /**
   * SmtpUser createManyAndReturn
   */
  export type SmtpUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * The data used to create many SmtpUsers.
     */
    data: SmtpUserCreateManyInput | SmtpUserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SmtpUser update
   */
  export type SmtpUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * The data needed to update a SmtpUser.
     */
    data: XOR<SmtpUserUpdateInput, SmtpUserUncheckedUpdateInput>
    /**
     * Choose, which SmtpUser to update.
     */
    where: SmtpUserWhereUniqueInput
  }

  /**
   * SmtpUser updateMany
   */
  export type SmtpUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SmtpUsers.
     */
    data: XOR<SmtpUserUpdateManyMutationInput, SmtpUserUncheckedUpdateManyInput>
    /**
     * Filter which SmtpUsers to update
     */
    where?: SmtpUserWhereInput
    /**
     * Limit how many SmtpUsers to update.
     */
    limit?: number
  }

  /**
   * SmtpUser updateManyAndReturn
   */
  export type SmtpUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * The data used to update SmtpUsers.
     */
    data: XOR<SmtpUserUpdateManyMutationInput, SmtpUserUncheckedUpdateManyInput>
    /**
     * Filter which SmtpUsers to update
     */
    where?: SmtpUserWhereInput
    /**
     * Limit how many SmtpUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SmtpUser upsert
   */
  export type SmtpUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * The filter to search for the SmtpUser to update in case it exists.
     */
    where: SmtpUserWhereUniqueInput
    /**
     * In case the SmtpUser found by the `where` argument doesn't exist, create a new SmtpUser with this data.
     */
    create: XOR<SmtpUserCreateInput, SmtpUserUncheckedCreateInput>
    /**
     * In case the SmtpUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SmtpUserUpdateInput, SmtpUserUncheckedUpdateInput>
  }

  /**
   * SmtpUser delete
   */
  export type SmtpUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    /**
     * Filter which SmtpUser to delete.
     */
    where: SmtpUserWhereUniqueInput
  }

  /**
   * SmtpUser deleteMany
   */
  export type SmtpUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SmtpUsers to delete
     */
    where?: SmtpUserWhereInput
    /**
     * Limit how many SmtpUsers to delete.
     */
    limit?: number
  }

  /**
   * SmtpUser.user
   */
  export type SmtpUser$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SmtpUser.domains
   */
  export type SmtpUser$domainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    where?: EmailDomainWhereInput
    orderBy?: EmailDomainOrderByWithRelationInput | EmailDomainOrderByWithRelationInput[]
    cursor?: EmailDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailDomainScalarFieldEnum | EmailDomainScalarFieldEnum[]
  }

  /**
   * SmtpUser.authAttempts
   */
  export type SmtpUser$authAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    where?: AuthAttemptWhereInput
    orderBy?: AuthAttemptOrderByWithRelationInput | AuthAttemptOrderByWithRelationInput[]
    cursor?: AuthAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthAttemptScalarFieldEnum | AuthAttemptScalarFieldEnum[]
  }

  /**
   * SmtpUser without action
   */
  export type SmtpUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
  }


  /**
   * Model EmailDomain
   */

  export type AggregateEmailDomain = {
    _count: EmailDomainCountAggregateOutputType | null
    _avg: EmailDomainAvgAggregateOutputType | null
    _sum: EmailDomainSumAggregateOutputType | null
    _min: EmailDomainMinAggregateOutputType | null
    _max: EmailDomainMaxAggregateOutputType | null
  }

  export type EmailDomainAvgAggregateOutputType = {
    id: number | null
    smtpUserId: number | null
  }

  export type EmailDomainSumAggregateOutputType = {
    id: number | null
    smtpUserId: number | null
  }

  export type EmailDomainMinAggregateOutputType = {
    id: number | null
    tenantId: string | null
    smtpUserId: number | null
    domainName: string | null
    isVerified: boolean | null
    verificationToken: string | null
    verifiedAt: Date | null
    verificationMethod: string | null
    dkimEnabled: boolean | null
    spfEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailDomainMaxAggregateOutputType = {
    id: number | null
    tenantId: string | null
    smtpUserId: number | null
    domainName: string | null
    isVerified: boolean | null
    verificationToken: string | null
    verifiedAt: Date | null
    verificationMethod: string | null
    dkimEnabled: boolean | null
    spfEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailDomainCountAggregateOutputType = {
    id: number
    tenantId: number
    smtpUserId: number
    domainName: number
    isVerified: number
    verificationToken: number
    verifiedAt: number
    verificationMethod: number
    dkimEnabled: number
    spfEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailDomainAvgAggregateInputType = {
    id?: true
    smtpUserId?: true
  }

  export type EmailDomainSumAggregateInputType = {
    id?: true
    smtpUserId?: true
  }

  export type EmailDomainMinAggregateInputType = {
    id?: true
    tenantId?: true
    smtpUserId?: true
    domainName?: true
    isVerified?: true
    verificationToken?: true
    verifiedAt?: true
    verificationMethod?: true
    dkimEnabled?: true
    spfEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailDomainMaxAggregateInputType = {
    id?: true
    tenantId?: true
    smtpUserId?: true
    domainName?: true
    isVerified?: true
    verificationToken?: true
    verifiedAt?: true
    verificationMethod?: true
    dkimEnabled?: true
    spfEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailDomainCountAggregateInputType = {
    id?: true
    tenantId?: true
    smtpUserId?: true
    domainName?: true
    isVerified?: true
    verificationToken?: true
    verifiedAt?: true
    verificationMethod?: true
    dkimEnabled?: true
    spfEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailDomainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailDomain to aggregate.
     */
    where?: EmailDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailDomains to fetch.
     */
    orderBy?: EmailDomainOrderByWithRelationInput | EmailDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailDomains
    **/
    _count?: true | EmailDomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailDomainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailDomainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailDomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailDomainMaxAggregateInputType
  }

  export type GetEmailDomainAggregateType<T extends EmailDomainAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailDomain[P]>
      : GetScalarType<T[P], AggregateEmailDomain[P]>
  }




  export type EmailDomainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailDomainWhereInput
    orderBy?: EmailDomainOrderByWithAggregationInput | EmailDomainOrderByWithAggregationInput[]
    by: EmailDomainScalarFieldEnum[] | EmailDomainScalarFieldEnum
    having?: EmailDomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailDomainCountAggregateInputType | true
    _avg?: EmailDomainAvgAggregateInputType
    _sum?: EmailDomainSumAggregateInputType
    _min?: EmailDomainMinAggregateInputType
    _max?: EmailDomainMaxAggregateInputType
  }

  export type EmailDomainGroupByOutputType = {
    id: number
    tenantId: string | null
    smtpUserId: number
    domainName: string
    isVerified: boolean
    verificationToken: string | null
    verifiedAt: Date | null
    verificationMethod: string | null
    dkimEnabled: boolean
    spfEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: EmailDomainCountAggregateOutputType | null
    _avg: EmailDomainAvgAggregateOutputType | null
    _sum: EmailDomainSumAggregateOutputType | null
    _min: EmailDomainMinAggregateOutputType | null
    _max: EmailDomainMaxAggregateOutputType | null
  }

  type GetEmailDomainGroupByPayload<T extends EmailDomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailDomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailDomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailDomainGroupByOutputType[P]>
            : GetScalarType<T[P], EmailDomainGroupByOutputType[P]>
        }
      >
    >


  export type EmailDomainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    smtpUserId?: boolean
    domainName?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verifiedAt?: boolean
    verificationMethod?: boolean
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | EmailDomain$tenantArgs<ExtArgs>
    smtpUser?: boolean | SmtpUserDefaultArgs<ExtArgs>
    dkimKeys?: boolean | EmailDomain$dkimKeysArgs<ExtArgs>
    emails?: boolean | EmailDomain$emailsArgs<ExtArgs>
    _count?: boolean | EmailDomainCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailDomain"]>

  export type EmailDomainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    smtpUserId?: boolean
    domainName?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verifiedAt?: boolean
    verificationMethod?: boolean
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | EmailDomain$tenantArgs<ExtArgs>
    smtpUser?: boolean | SmtpUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailDomain"]>

  export type EmailDomainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    smtpUserId?: boolean
    domainName?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verifiedAt?: boolean
    verificationMethod?: boolean
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | EmailDomain$tenantArgs<ExtArgs>
    smtpUser?: boolean | SmtpUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailDomain"]>

  export type EmailDomainSelectScalar = {
    id?: boolean
    tenantId?: boolean
    smtpUserId?: boolean
    domainName?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    verifiedAt?: boolean
    verificationMethod?: boolean
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailDomainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "smtpUserId" | "domainName" | "isVerified" | "verificationToken" | "verifiedAt" | "verificationMethod" | "dkimEnabled" | "spfEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["emailDomain"]>
  export type EmailDomainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | EmailDomain$tenantArgs<ExtArgs>
    smtpUser?: boolean | SmtpUserDefaultArgs<ExtArgs>
    dkimKeys?: boolean | EmailDomain$dkimKeysArgs<ExtArgs>
    emails?: boolean | EmailDomain$emailsArgs<ExtArgs>
    _count?: boolean | EmailDomainCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailDomainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | EmailDomain$tenantArgs<ExtArgs>
    smtpUser?: boolean | SmtpUserDefaultArgs<ExtArgs>
  }
  export type EmailDomainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | EmailDomain$tenantArgs<ExtArgs>
    smtpUser?: boolean | SmtpUserDefaultArgs<ExtArgs>
  }

  export type $EmailDomainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailDomain"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      smtpUser: Prisma.$SmtpUserPayload<ExtArgs>
      dkimKeys: Prisma.$DkimKeyPayload<ExtArgs>[]
      emails: Prisma.$EmailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tenantId: string | null
      smtpUserId: number
      domainName: string
      isVerified: boolean
      verificationToken: string | null
      verifiedAt: Date | null
      verificationMethod: string | null
      dkimEnabled: boolean
      spfEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailDomain"]>
    composites: {}
  }

  type EmailDomainGetPayload<S extends boolean | null | undefined | EmailDomainDefaultArgs> = $Result.GetResult<Prisma.$EmailDomainPayload, S>

  type EmailDomainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailDomainCountAggregateInputType | true
    }

  export interface EmailDomainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailDomain'], meta: { name: 'EmailDomain' } }
    /**
     * Find zero or one EmailDomain that matches the filter.
     * @param {EmailDomainFindUniqueArgs} args - Arguments to find a EmailDomain
     * @example
     * // Get one EmailDomain
     * const emailDomain = await prisma.emailDomain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailDomainFindUniqueArgs>(args: SelectSubset<T, EmailDomainFindUniqueArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailDomain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailDomainFindUniqueOrThrowArgs} args - Arguments to find a EmailDomain
     * @example
     * // Get one EmailDomain
     * const emailDomain = await prisma.emailDomain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailDomainFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailDomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailDomain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainFindFirstArgs} args - Arguments to find a EmailDomain
     * @example
     * // Get one EmailDomain
     * const emailDomain = await prisma.emailDomain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailDomainFindFirstArgs>(args?: SelectSubset<T, EmailDomainFindFirstArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailDomain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainFindFirstOrThrowArgs} args - Arguments to find a EmailDomain
     * @example
     * // Get one EmailDomain
     * const emailDomain = await prisma.emailDomain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailDomainFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailDomainFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailDomains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailDomains
     * const emailDomains = await prisma.emailDomain.findMany()
     * 
     * // Get first 10 EmailDomains
     * const emailDomains = await prisma.emailDomain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailDomainWithIdOnly = await prisma.emailDomain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailDomainFindManyArgs>(args?: SelectSubset<T, EmailDomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailDomain.
     * @param {EmailDomainCreateArgs} args - Arguments to create a EmailDomain.
     * @example
     * // Create one EmailDomain
     * const EmailDomain = await prisma.emailDomain.create({
     *   data: {
     *     // ... data to create a EmailDomain
     *   }
     * })
     * 
     */
    create<T extends EmailDomainCreateArgs>(args: SelectSubset<T, EmailDomainCreateArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailDomains.
     * @param {EmailDomainCreateManyArgs} args - Arguments to create many EmailDomains.
     * @example
     * // Create many EmailDomains
     * const emailDomain = await prisma.emailDomain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailDomainCreateManyArgs>(args?: SelectSubset<T, EmailDomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailDomains and returns the data saved in the database.
     * @param {EmailDomainCreateManyAndReturnArgs} args - Arguments to create many EmailDomains.
     * @example
     * // Create many EmailDomains
     * const emailDomain = await prisma.emailDomain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailDomains and only return the `id`
     * const emailDomainWithIdOnly = await prisma.emailDomain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailDomainCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailDomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailDomain.
     * @param {EmailDomainDeleteArgs} args - Arguments to delete one EmailDomain.
     * @example
     * // Delete one EmailDomain
     * const EmailDomain = await prisma.emailDomain.delete({
     *   where: {
     *     // ... filter to delete one EmailDomain
     *   }
     * })
     * 
     */
    delete<T extends EmailDomainDeleteArgs>(args: SelectSubset<T, EmailDomainDeleteArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailDomain.
     * @param {EmailDomainUpdateArgs} args - Arguments to update one EmailDomain.
     * @example
     * // Update one EmailDomain
     * const emailDomain = await prisma.emailDomain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailDomainUpdateArgs>(args: SelectSubset<T, EmailDomainUpdateArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailDomains.
     * @param {EmailDomainDeleteManyArgs} args - Arguments to filter EmailDomains to delete.
     * @example
     * // Delete a few EmailDomains
     * const { count } = await prisma.emailDomain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailDomainDeleteManyArgs>(args?: SelectSubset<T, EmailDomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailDomains
     * const emailDomain = await prisma.emailDomain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailDomainUpdateManyArgs>(args: SelectSubset<T, EmailDomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailDomains and returns the data updated in the database.
     * @param {EmailDomainUpdateManyAndReturnArgs} args - Arguments to update many EmailDomains.
     * @example
     * // Update many EmailDomains
     * const emailDomain = await prisma.emailDomain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailDomains and only return the `id`
     * const emailDomainWithIdOnly = await prisma.emailDomain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailDomainUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailDomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailDomain.
     * @param {EmailDomainUpsertArgs} args - Arguments to update or create a EmailDomain.
     * @example
     * // Update or create a EmailDomain
     * const emailDomain = await prisma.emailDomain.upsert({
     *   create: {
     *     // ... data to create a EmailDomain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailDomain we want to update
     *   }
     * })
     */
    upsert<T extends EmailDomainUpsertArgs>(args: SelectSubset<T, EmailDomainUpsertArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainCountArgs} args - Arguments to filter EmailDomains to count.
     * @example
     * // Count the number of EmailDomains
     * const count = await prisma.emailDomain.count({
     *   where: {
     *     // ... the filter for the EmailDomains we want to count
     *   }
     * })
    **/
    count<T extends EmailDomainCountArgs>(
      args?: Subset<T, EmailDomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailDomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailDomainAggregateArgs>(args: Subset<T, EmailDomainAggregateArgs>): Prisma.PrismaPromise<GetEmailDomainAggregateType<T>>

    /**
     * Group by EmailDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailDomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailDomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailDomainGroupByArgs['orderBy'] }
        : { orderBy?: EmailDomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailDomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailDomain model
   */
  readonly fields: EmailDomainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailDomain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailDomainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends EmailDomain$tenantArgs<ExtArgs> = {}>(args?: Subset<T, EmailDomain$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    smtpUser<T extends SmtpUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SmtpUserDefaultArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    dkimKeys<T extends EmailDomain$dkimKeysArgs<ExtArgs> = {}>(args?: Subset<T, EmailDomain$dkimKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emails<T extends EmailDomain$emailsArgs<ExtArgs> = {}>(args?: Subset<T, EmailDomain$emailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailDomain model
   */
  interface EmailDomainFieldRefs {
    readonly id: FieldRef<"EmailDomain", 'Int'>
    readonly tenantId: FieldRef<"EmailDomain", 'String'>
    readonly smtpUserId: FieldRef<"EmailDomain", 'Int'>
    readonly domainName: FieldRef<"EmailDomain", 'String'>
    readonly isVerified: FieldRef<"EmailDomain", 'Boolean'>
    readonly verificationToken: FieldRef<"EmailDomain", 'String'>
    readonly verifiedAt: FieldRef<"EmailDomain", 'DateTime'>
    readonly verificationMethod: FieldRef<"EmailDomain", 'String'>
    readonly dkimEnabled: FieldRef<"EmailDomain", 'Boolean'>
    readonly spfEnabled: FieldRef<"EmailDomain", 'Boolean'>
    readonly createdAt: FieldRef<"EmailDomain", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailDomain", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailDomain findUnique
   */
  export type EmailDomainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * Filter, which EmailDomain to fetch.
     */
    where: EmailDomainWhereUniqueInput
  }

  /**
   * EmailDomain findUniqueOrThrow
   */
  export type EmailDomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * Filter, which EmailDomain to fetch.
     */
    where: EmailDomainWhereUniqueInput
  }

  /**
   * EmailDomain findFirst
   */
  export type EmailDomainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * Filter, which EmailDomain to fetch.
     */
    where?: EmailDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailDomains to fetch.
     */
    orderBy?: EmailDomainOrderByWithRelationInput | EmailDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailDomains.
     */
    cursor?: EmailDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailDomains.
     */
    distinct?: EmailDomainScalarFieldEnum | EmailDomainScalarFieldEnum[]
  }

  /**
   * EmailDomain findFirstOrThrow
   */
  export type EmailDomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * Filter, which EmailDomain to fetch.
     */
    where?: EmailDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailDomains to fetch.
     */
    orderBy?: EmailDomainOrderByWithRelationInput | EmailDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailDomains.
     */
    cursor?: EmailDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailDomains.
     */
    distinct?: EmailDomainScalarFieldEnum | EmailDomainScalarFieldEnum[]
  }

  /**
   * EmailDomain findMany
   */
  export type EmailDomainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * Filter, which EmailDomains to fetch.
     */
    where?: EmailDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailDomains to fetch.
     */
    orderBy?: EmailDomainOrderByWithRelationInput | EmailDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailDomains.
     */
    cursor?: EmailDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailDomains.
     */
    skip?: number
    distinct?: EmailDomainScalarFieldEnum | EmailDomainScalarFieldEnum[]
  }

  /**
   * EmailDomain create
   */
  export type EmailDomainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailDomain.
     */
    data: XOR<EmailDomainCreateInput, EmailDomainUncheckedCreateInput>
  }

  /**
   * EmailDomain createMany
   */
  export type EmailDomainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailDomains.
     */
    data: EmailDomainCreateManyInput | EmailDomainCreateManyInput[]
  }

  /**
   * EmailDomain createManyAndReturn
   */
  export type EmailDomainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * The data used to create many EmailDomains.
     */
    data: EmailDomainCreateManyInput | EmailDomainCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailDomain update
   */
  export type EmailDomainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailDomain.
     */
    data: XOR<EmailDomainUpdateInput, EmailDomainUncheckedUpdateInput>
    /**
     * Choose, which EmailDomain to update.
     */
    where: EmailDomainWhereUniqueInput
  }

  /**
   * EmailDomain updateMany
   */
  export type EmailDomainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailDomains.
     */
    data: XOR<EmailDomainUpdateManyMutationInput, EmailDomainUncheckedUpdateManyInput>
    /**
     * Filter which EmailDomains to update
     */
    where?: EmailDomainWhereInput
    /**
     * Limit how many EmailDomains to update.
     */
    limit?: number
  }

  /**
   * EmailDomain updateManyAndReturn
   */
  export type EmailDomainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * The data used to update EmailDomains.
     */
    data: XOR<EmailDomainUpdateManyMutationInput, EmailDomainUncheckedUpdateManyInput>
    /**
     * Filter which EmailDomains to update
     */
    where?: EmailDomainWhereInput
    /**
     * Limit how many EmailDomains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailDomain upsert
   */
  export type EmailDomainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailDomain to update in case it exists.
     */
    where: EmailDomainWhereUniqueInput
    /**
     * In case the EmailDomain found by the `where` argument doesn't exist, create a new EmailDomain with this data.
     */
    create: XOR<EmailDomainCreateInput, EmailDomainUncheckedCreateInput>
    /**
     * In case the EmailDomain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailDomainUpdateInput, EmailDomainUncheckedUpdateInput>
  }

  /**
   * EmailDomain delete
   */
  export type EmailDomainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    /**
     * Filter which EmailDomain to delete.
     */
    where: EmailDomainWhereUniqueInput
  }

  /**
   * EmailDomain deleteMany
   */
  export type EmailDomainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailDomains to delete
     */
    where?: EmailDomainWhereInput
    /**
     * Limit how many EmailDomains to delete.
     */
    limit?: number
  }

  /**
   * EmailDomain.tenant
   */
  export type EmailDomain$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * EmailDomain.dkimKeys
   */
  export type EmailDomain$dkimKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    where?: DkimKeyWhereInput
    orderBy?: DkimKeyOrderByWithRelationInput | DkimKeyOrderByWithRelationInput[]
    cursor?: DkimKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DkimKeyScalarFieldEnum | DkimKeyScalarFieldEnum[]
  }

  /**
   * EmailDomain.emails
   */
  export type EmailDomain$emailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    cursor?: EmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * EmailDomain without action
   */
  export type EmailDomainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
  }


  /**
   * Model DkimKey
   */

  export type AggregateDkimKey = {
    _count: DkimKeyCountAggregateOutputType | null
    _avg: DkimKeyAvgAggregateOutputType | null
    _sum: DkimKeySumAggregateOutputType | null
    _min: DkimKeyMinAggregateOutputType | null
    _max: DkimKeyMaxAggregateOutputType | null
  }

  export type DkimKeyAvgAggregateOutputType = {
    id: number | null
    domainId: number | null
    keySize: number | null
  }

  export type DkimKeySumAggregateOutputType = {
    id: number | null
    domainId: number | null
    keySize: number | null
  }

  export type DkimKeyMinAggregateOutputType = {
    id: number | null
    domainId: number | null
    selector: string | null
    privateKey: string | null
    publicKey: string | null
    algorithm: string | null
    canonicalization: string | null
    keySize: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DkimKeyMaxAggregateOutputType = {
    id: number | null
    domainId: number | null
    selector: string | null
    privateKey: string | null
    publicKey: string | null
    algorithm: string | null
    canonicalization: string | null
    keySize: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DkimKeyCountAggregateOutputType = {
    id: number
    domainId: number
    selector: number
    privateKey: number
    publicKey: number
    algorithm: number
    canonicalization: number
    keySize: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DkimKeyAvgAggregateInputType = {
    id?: true
    domainId?: true
    keySize?: true
  }

  export type DkimKeySumAggregateInputType = {
    id?: true
    domainId?: true
    keySize?: true
  }

  export type DkimKeyMinAggregateInputType = {
    id?: true
    domainId?: true
    selector?: true
    privateKey?: true
    publicKey?: true
    algorithm?: true
    canonicalization?: true
    keySize?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DkimKeyMaxAggregateInputType = {
    id?: true
    domainId?: true
    selector?: true
    privateKey?: true
    publicKey?: true
    algorithm?: true
    canonicalization?: true
    keySize?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DkimKeyCountAggregateInputType = {
    id?: true
    domainId?: true
    selector?: true
    privateKey?: true
    publicKey?: true
    algorithm?: true
    canonicalization?: true
    keySize?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DkimKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DkimKey to aggregate.
     */
    where?: DkimKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DkimKeys to fetch.
     */
    orderBy?: DkimKeyOrderByWithRelationInput | DkimKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DkimKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DkimKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DkimKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DkimKeys
    **/
    _count?: true | DkimKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DkimKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DkimKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DkimKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DkimKeyMaxAggregateInputType
  }

  export type GetDkimKeyAggregateType<T extends DkimKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateDkimKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDkimKey[P]>
      : GetScalarType<T[P], AggregateDkimKey[P]>
  }




  export type DkimKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DkimKeyWhereInput
    orderBy?: DkimKeyOrderByWithAggregationInput | DkimKeyOrderByWithAggregationInput[]
    by: DkimKeyScalarFieldEnum[] | DkimKeyScalarFieldEnum
    having?: DkimKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DkimKeyCountAggregateInputType | true
    _avg?: DkimKeyAvgAggregateInputType
    _sum?: DkimKeySumAggregateInputType
    _min?: DkimKeyMinAggregateInputType
    _max?: DkimKeyMaxAggregateInputType
  }

  export type DkimKeyGroupByOutputType = {
    id: number
    domainId: number
    selector: string
    privateKey: string
    publicKey: string
    algorithm: string
    canonicalization: string
    keySize: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DkimKeyCountAggregateOutputType | null
    _avg: DkimKeyAvgAggregateOutputType | null
    _sum: DkimKeySumAggregateOutputType | null
    _min: DkimKeyMinAggregateOutputType | null
    _max: DkimKeyMaxAggregateOutputType | null
  }

  type GetDkimKeyGroupByPayload<T extends DkimKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DkimKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DkimKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DkimKeyGroupByOutputType[P]>
            : GetScalarType<T[P], DkimKeyGroupByOutputType[P]>
        }
      >
    >


  export type DkimKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domainId?: boolean
    selector?: boolean
    privateKey?: boolean
    publicKey?: boolean
    algorithm?: boolean
    canonicalization?: boolean
    keySize?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | EmailDomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dkimKey"]>

  export type DkimKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domainId?: boolean
    selector?: boolean
    privateKey?: boolean
    publicKey?: boolean
    algorithm?: boolean
    canonicalization?: boolean
    keySize?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | EmailDomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dkimKey"]>

  export type DkimKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domainId?: boolean
    selector?: boolean
    privateKey?: boolean
    publicKey?: boolean
    algorithm?: boolean
    canonicalization?: boolean
    keySize?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | EmailDomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dkimKey"]>

  export type DkimKeySelectScalar = {
    id?: boolean
    domainId?: boolean
    selector?: boolean
    privateKey?: boolean
    publicKey?: boolean
    algorithm?: boolean
    canonicalization?: boolean
    keySize?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DkimKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "domainId" | "selector" | "privateKey" | "publicKey" | "algorithm" | "canonicalization" | "keySize" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["dkimKey"]>
  export type DkimKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | EmailDomainDefaultArgs<ExtArgs>
  }
  export type DkimKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | EmailDomainDefaultArgs<ExtArgs>
  }
  export type DkimKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | EmailDomainDefaultArgs<ExtArgs>
  }

  export type $DkimKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DkimKey"
    objects: {
      domain: Prisma.$EmailDomainPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      domainId: number
      selector: string
      privateKey: string
      publicKey: string
      algorithm: string
      canonicalization: string
      keySize: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dkimKey"]>
    composites: {}
  }

  type DkimKeyGetPayload<S extends boolean | null | undefined | DkimKeyDefaultArgs> = $Result.GetResult<Prisma.$DkimKeyPayload, S>

  type DkimKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DkimKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DkimKeyCountAggregateInputType | true
    }

  export interface DkimKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DkimKey'], meta: { name: 'DkimKey' } }
    /**
     * Find zero or one DkimKey that matches the filter.
     * @param {DkimKeyFindUniqueArgs} args - Arguments to find a DkimKey
     * @example
     * // Get one DkimKey
     * const dkimKey = await prisma.dkimKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DkimKeyFindUniqueArgs>(args: SelectSubset<T, DkimKeyFindUniqueArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DkimKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DkimKeyFindUniqueOrThrowArgs} args - Arguments to find a DkimKey
     * @example
     * // Get one DkimKey
     * const dkimKey = await prisma.dkimKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DkimKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, DkimKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DkimKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyFindFirstArgs} args - Arguments to find a DkimKey
     * @example
     * // Get one DkimKey
     * const dkimKey = await prisma.dkimKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DkimKeyFindFirstArgs>(args?: SelectSubset<T, DkimKeyFindFirstArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DkimKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyFindFirstOrThrowArgs} args - Arguments to find a DkimKey
     * @example
     * // Get one DkimKey
     * const dkimKey = await prisma.dkimKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DkimKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, DkimKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DkimKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DkimKeys
     * const dkimKeys = await prisma.dkimKey.findMany()
     * 
     * // Get first 10 DkimKeys
     * const dkimKeys = await prisma.dkimKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dkimKeyWithIdOnly = await prisma.dkimKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DkimKeyFindManyArgs>(args?: SelectSubset<T, DkimKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DkimKey.
     * @param {DkimKeyCreateArgs} args - Arguments to create a DkimKey.
     * @example
     * // Create one DkimKey
     * const DkimKey = await prisma.dkimKey.create({
     *   data: {
     *     // ... data to create a DkimKey
     *   }
     * })
     * 
     */
    create<T extends DkimKeyCreateArgs>(args: SelectSubset<T, DkimKeyCreateArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DkimKeys.
     * @param {DkimKeyCreateManyArgs} args - Arguments to create many DkimKeys.
     * @example
     * // Create many DkimKeys
     * const dkimKey = await prisma.dkimKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DkimKeyCreateManyArgs>(args?: SelectSubset<T, DkimKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DkimKeys and returns the data saved in the database.
     * @param {DkimKeyCreateManyAndReturnArgs} args - Arguments to create many DkimKeys.
     * @example
     * // Create many DkimKeys
     * const dkimKey = await prisma.dkimKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DkimKeys and only return the `id`
     * const dkimKeyWithIdOnly = await prisma.dkimKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DkimKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, DkimKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DkimKey.
     * @param {DkimKeyDeleteArgs} args - Arguments to delete one DkimKey.
     * @example
     * // Delete one DkimKey
     * const DkimKey = await prisma.dkimKey.delete({
     *   where: {
     *     // ... filter to delete one DkimKey
     *   }
     * })
     * 
     */
    delete<T extends DkimKeyDeleteArgs>(args: SelectSubset<T, DkimKeyDeleteArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DkimKey.
     * @param {DkimKeyUpdateArgs} args - Arguments to update one DkimKey.
     * @example
     * // Update one DkimKey
     * const dkimKey = await prisma.dkimKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DkimKeyUpdateArgs>(args: SelectSubset<T, DkimKeyUpdateArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DkimKeys.
     * @param {DkimKeyDeleteManyArgs} args - Arguments to filter DkimKeys to delete.
     * @example
     * // Delete a few DkimKeys
     * const { count } = await prisma.dkimKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DkimKeyDeleteManyArgs>(args?: SelectSubset<T, DkimKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DkimKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DkimKeys
     * const dkimKey = await prisma.dkimKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DkimKeyUpdateManyArgs>(args: SelectSubset<T, DkimKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DkimKeys and returns the data updated in the database.
     * @param {DkimKeyUpdateManyAndReturnArgs} args - Arguments to update many DkimKeys.
     * @example
     * // Update many DkimKeys
     * const dkimKey = await prisma.dkimKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DkimKeys and only return the `id`
     * const dkimKeyWithIdOnly = await prisma.dkimKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DkimKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, DkimKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DkimKey.
     * @param {DkimKeyUpsertArgs} args - Arguments to update or create a DkimKey.
     * @example
     * // Update or create a DkimKey
     * const dkimKey = await prisma.dkimKey.upsert({
     *   create: {
     *     // ... data to create a DkimKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DkimKey we want to update
     *   }
     * })
     */
    upsert<T extends DkimKeyUpsertArgs>(args: SelectSubset<T, DkimKeyUpsertArgs<ExtArgs>>): Prisma__DkimKeyClient<$Result.GetResult<Prisma.$DkimKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DkimKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyCountArgs} args - Arguments to filter DkimKeys to count.
     * @example
     * // Count the number of DkimKeys
     * const count = await prisma.dkimKey.count({
     *   where: {
     *     // ... the filter for the DkimKeys we want to count
     *   }
     * })
    **/
    count<T extends DkimKeyCountArgs>(
      args?: Subset<T, DkimKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DkimKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DkimKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DkimKeyAggregateArgs>(args: Subset<T, DkimKeyAggregateArgs>): Prisma.PrismaPromise<GetDkimKeyAggregateType<T>>

    /**
     * Group by DkimKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DkimKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DkimKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DkimKeyGroupByArgs['orderBy'] }
        : { orderBy?: DkimKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DkimKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDkimKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DkimKey model
   */
  readonly fields: DkimKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DkimKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DkimKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain<T extends EmailDomainDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailDomainDefaultArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DkimKey model
   */
  interface DkimKeyFieldRefs {
    readonly id: FieldRef<"DkimKey", 'Int'>
    readonly domainId: FieldRef<"DkimKey", 'Int'>
    readonly selector: FieldRef<"DkimKey", 'String'>
    readonly privateKey: FieldRef<"DkimKey", 'String'>
    readonly publicKey: FieldRef<"DkimKey", 'String'>
    readonly algorithm: FieldRef<"DkimKey", 'String'>
    readonly canonicalization: FieldRef<"DkimKey", 'String'>
    readonly keySize: FieldRef<"DkimKey", 'Int'>
    readonly isActive: FieldRef<"DkimKey", 'Boolean'>
    readonly createdAt: FieldRef<"DkimKey", 'DateTime'>
    readonly updatedAt: FieldRef<"DkimKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DkimKey findUnique
   */
  export type DkimKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * Filter, which DkimKey to fetch.
     */
    where: DkimKeyWhereUniqueInput
  }

  /**
   * DkimKey findUniqueOrThrow
   */
  export type DkimKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * Filter, which DkimKey to fetch.
     */
    where: DkimKeyWhereUniqueInput
  }

  /**
   * DkimKey findFirst
   */
  export type DkimKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * Filter, which DkimKey to fetch.
     */
    where?: DkimKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DkimKeys to fetch.
     */
    orderBy?: DkimKeyOrderByWithRelationInput | DkimKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DkimKeys.
     */
    cursor?: DkimKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DkimKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DkimKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DkimKeys.
     */
    distinct?: DkimKeyScalarFieldEnum | DkimKeyScalarFieldEnum[]
  }

  /**
   * DkimKey findFirstOrThrow
   */
  export type DkimKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * Filter, which DkimKey to fetch.
     */
    where?: DkimKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DkimKeys to fetch.
     */
    orderBy?: DkimKeyOrderByWithRelationInput | DkimKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DkimKeys.
     */
    cursor?: DkimKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DkimKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DkimKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DkimKeys.
     */
    distinct?: DkimKeyScalarFieldEnum | DkimKeyScalarFieldEnum[]
  }

  /**
   * DkimKey findMany
   */
  export type DkimKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * Filter, which DkimKeys to fetch.
     */
    where?: DkimKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DkimKeys to fetch.
     */
    orderBy?: DkimKeyOrderByWithRelationInput | DkimKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DkimKeys.
     */
    cursor?: DkimKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DkimKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DkimKeys.
     */
    skip?: number
    distinct?: DkimKeyScalarFieldEnum | DkimKeyScalarFieldEnum[]
  }

  /**
   * DkimKey create
   */
  export type DkimKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a DkimKey.
     */
    data: XOR<DkimKeyCreateInput, DkimKeyUncheckedCreateInput>
  }

  /**
   * DkimKey createMany
   */
  export type DkimKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DkimKeys.
     */
    data: DkimKeyCreateManyInput | DkimKeyCreateManyInput[]
  }

  /**
   * DkimKey createManyAndReturn
   */
  export type DkimKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * The data used to create many DkimKeys.
     */
    data: DkimKeyCreateManyInput | DkimKeyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DkimKey update
   */
  export type DkimKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a DkimKey.
     */
    data: XOR<DkimKeyUpdateInput, DkimKeyUncheckedUpdateInput>
    /**
     * Choose, which DkimKey to update.
     */
    where: DkimKeyWhereUniqueInput
  }

  /**
   * DkimKey updateMany
   */
  export type DkimKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DkimKeys.
     */
    data: XOR<DkimKeyUpdateManyMutationInput, DkimKeyUncheckedUpdateManyInput>
    /**
     * Filter which DkimKeys to update
     */
    where?: DkimKeyWhereInput
    /**
     * Limit how many DkimKeys to update.
     */
    limit?: number
  }

  /**
   * DkimKey updateManyAndReturn
   */
  export type DkimKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * The data used to update DkimKeys.
     */
    data: XOR<DkimKeyUpdateManyMutationInput, DkimKeyUncheckedUpdateManyInput>
    /**
     * Filter which DkimKeys to update
     */
    where?: DkimKeyWhereInput
    /**
     * Limit how many DkimKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DkimKey upsert
   */
  export type DkimKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the DkimKey to update in case it exists.
     */
    where: DkimKeyWhereUniqueInput
    /**
     * In case the DkimKey found by the `where` argument doesn't exist, create a new DkimKey with this data.
     */
    create: XOR<DkimKeyCreateInput, DkimKeyUncheckedCreateInput>
    /**
     * In case the DkimKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DkimKeyUpdateInput, DkimKeyUncheckedUpdateInput>
  }

  /**
   * DkimKey delete
   */
  export type DkimKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
    /**
     * Filter which DkimKey to delete.
     */
    where: DkimKeyWhereUniqueInput
  }

  /**
   * DkimKey deleteMany
   */
  export type DkimKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DkimKeys to delete
     */
    where?: DkimKeyWhereInput
    /**
     * Limit how many DkimKeys to delete.
     */
    limit?: number
  }

  /**
   * DkimKey without action
   */
  export type DkimKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DkimKey
     */
    select?: DkimKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DkimKey
     */
    omit?: DkimKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DkimKeyInclude<ExtArgs> | null
  }


  /**
   * Model Email
   */

  export type AggregateEmail = {
    _count: EmailCountAggregateOutputType | null
    _avg: EmailAvgAggregateOutputType | null
    _sum: EmailSumAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  export type EmailAvgAggregateOutputType = {
    id: number | null
    domainId: number | null
    attempts: number | null
  }

  export type EmailSumAggregateOutputType = {
    id: number | null
    domainId: number | null
    attempts: number | null
  }

  export type EmailMinAggregateOutputType = {
    id: number | null
    messageId: string | null
    domainId: number | null
    fromEmail: string | null
    toEmail: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    status: string | null
    direction: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    mxServer: string | null
    errorMessage: string | null
    attempts: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailMaxAggregateOutputType = {
    id: number | null
    messageId: string | null
    domainId: number | null
    fromEmail: string | null
    toEmail: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    status: string | null
    direction: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    mxServer: string | null
    errorMessage: string | null
    attempts: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailCountAggregateOutputType = {
    id: number
    messageId: number
    domainId: number
    fromEmail: number
    toEmail: number
    subject: number
    htmlContent: number
    textContent: number
    status: number
    direction: number
    sentAt: number
    deliveredAt: number
    mxServer: number
    errorMessage: number
    attempts: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailAvgAggregateInputType = {
    id?: true
    domainId?: true
    attempts?: true
  }

  export type EmailSumAggregateInputType = {
    id?: true
    domainId?: true
    attempts?: true
  }

  export type EmailMinAggregateInputType = {
    id?: true
    messageId?: true
    domainId?: true
    fromEmail?: true
    toEmail?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    status?: true
    direction?: true
    sentAt?: true
    deliveredAt?: true
    mxServer?: true
    errorMessage?: true
    attempts?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailMaxAggregateInputType = {
    id?: true
    messageId?: true
    domainId?: true
    fromEmail?: true
    toEmail?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    status?: true
    direction?: true
    sentAt?: true
    deliveredAt?: true
    mxServer?: true
    errorMessage?: true
    attempts?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailCountAggregateInputType = {
    id?: true
    messageId?: true
    domainId?: true
    fromEmail?: true
    toEmail?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    status?: true
    direction?: true
    sentAt?: true
    deliveredAt?: true
    mxServer?: true
    errorMessage?: true
    attempts?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Email to aggregate.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emails
    **/
    _count?: true | EmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailMaxAggregateInputType
  }

  export type GetEmailAggregateType<T extends EmailAggregateArgs> = {
        [P in keyof T & keyof AggregateEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmail[P]>
      : GetScalarType<T[P], AggregateEmail[P]>
  }




  export type EmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithAggregationInput | EmailOrderByWithAggregationInput[]
    by: EmailScalarFieldEnum[] | EmailScalarFieldEnum
    having?: EmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCountAggregateInputType | true
    _avg?: EmailAvgAggregateInputType
    _sum?: EmailSumAggregateInputType
    _min?: EmailMinAggregateInputType
    _max?: EmailMaxAggregateInputType
  }

  export type EmailGroupByOutputType = {
    id: number
    messageId: string
    domainId: number | null
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent: string | null
    textContent: string | null
    status: string
    direction: string
    sentAt: Date | null
    deliveredAt: Date | null
    mxServer: string | null
    errorMessage: string | null
    attempts: number
    createdAt: Date
    updatedAt: Date
    _count: EmailCountAggregateOutputType | null
    _avg: EmailAvgAggregateOutputType | null
    _sum: EmailSumAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  type GetEmailGroupByPayload<T extends EmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailGroupByOutputType[P]>
            : GetScalarType<T[P], EmailGroupByOutputType[P]>
        }
      >
    >


  export type EmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    domainId?: boolean
    fromEmail?: boolean
    toEmail?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    direction?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    mxServer?: boolean
    errorMessage?: boolean
    attempts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | Email$domainArgs<ExtArgs>
  }, ExtArgs["result"]["email"]>

  export type EmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    domainId?: boolean
    fromEmail?: boolean
    toEmail?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    direction?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    mxServer?: boolean
    errorMessage?: boolean
    attempts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | Email$domainArgs<ExtArgs>
  }, ExtArgs["result"]["email"]>

  export type EmailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    domainId?: boolean
    fromEmail?: boolean
    toEmail?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    direction?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    mxServer?: boolean
    errorMessage?: boolean
    attempts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | Email$domainArgs<ExtArgs>
  }, ExtArgs["result"]["email"]>

  export type EmailSelectScalar = {
    id?: boolean
    messageId?: boolean
    domainId?: boolean
    fromEmail?: boolean
    toEmail?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    direction?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    mxServer?: boolean
    errorMessage?: boolean
    attempts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "domainId" | "fromEmail" | "toEmail" | "subject" | "htmlContent" | "textContent" | "status" | "direction" | "sentAt" | "deliveredAt" | "mxServer" | "errorMessage" | "attempts" | "createdAt" | "updatedAt", ExtArgs["result"]["email"]>
  export type EmailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | Email$domainArgs<ExtArgs>
  }
  export type EmailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | Email$domainArgs<ExtArgs>
  }
  export type EmailIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | Email$domainArgs<ExtArgs>
  }

  export type $EmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Email"
    objects: {
      domain: Prisma.$EmailDomainPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      messageId: string
      domainId: number | null
      fromEmail: string
      toEmail: string
      subject: string
      htmlContent: string | null
      textContent: string | null
      status: string
      direction: string
      sentAt: Date | null
      deliveredAt: Date | null
      mxServer: string | null
      errorMessage: string | null
      attempts: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["email"]>
    composites: {}
  }

  type EmailGetPayload<S extends boolean | null | undefined | EmailDefaultArgs> = $Result.GetResult<Prisma.$EmailPayload, S>

  type EmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailCountAggregateInputType | true
    }

  export interface EmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Email'], meta: { name: 'Email' } }
    /**
     * Find zero or one Email that matches the filter.
     * @param {EmailFindUniqueArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailFindUniqueArgs>(args: SelectSubset<T, EmailFindUniqueArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Email that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailFindUniqueOrThrowArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Email that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailFindFirstArgs>(args?: SelectSubset<T, EmailFindFirstArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Email that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstOrThrowArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Emails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emails
     * const emails = await prisma.email.findMany()
     * 
     * // Get first 10 Emails
     * const emails = await prisma.email.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailWithIdOnly = await prisma.email.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailFindManyArgs>(args?: SelectSubset<T, EmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Email.
     * @param {EmailCreateArgs} args - Arguments to create a Email.
     * @example
     * // Create one Email
     * const Email = await prisma.email.create({
     *   data: {
     *     // ... data to create a Email
     *   }
     * })
     * 
     */
    create<T extends EmailCreateArgs>(args: SelectSubset<T, EmailCreateArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Emails.
     * @param {EmailCreateManyArgs} args - Arguments to create many Emails.
     * @example
     * // Create many Emails
     * const email = await prisma.email.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailCreateManyArgs>(args?: SelectSubset<T, EmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Emails and returns the data saved in the database.
     * @param {EmailCreateManyAndReturnArgs} args - Arguments to create many Emails.
     * @example
     * // Create many Emails
     * const email = await prisma.email.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Emails and only return the `id`
     * const emailWithIdOnly = await prisma.email.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Email.
     * @param {EmailDeleteArgs} args - Arguments to delete one Email.
     * @example
     * // Delete one Email
     * const Email = await prisma.email.delete({
     *   where: {
     *     // ... filter to delete one Email
     *   }
     * })
     * 
     */
    delete<T extends EmailDeleteArgs>(args: SelectSubset<T, EmailDeleteArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Email.
     * @param {EmailUpdateArgs} args - Arguments to update one Email.
     * @example
     * // Update one Email
     * const email = await prisma.email.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailUpdateArgs>(args: SelectSubset<T, EmailUpdateArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Emails.
     * @param {EmailDeleteManyArgs} args - Arguments to filter Emails to delete.
     * @example
     * // Delete a few Emails
     * const { count } = await prisma.email.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailDeleteManyArgs>(args?: SelectSubset<T, EmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emails
     * const email = await prisma.email.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailUpdateManyArgs>(args: SelectSubset<T, EmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emails and returns the data updated in the database.
     * @param {EmailUpdateManyAndReturnArgs} args - Arguments to update many Emails.
     * @example
     * // Update many Emails
     * const email = await prisma.email.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Emails and only return the `id`
     * const emailWithIdOnly = await prisma.email.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Email.
     * @param {EmailUpsertArgs} args - Arguments to update or create a Email.
     * @example
     * // Update or create a Email
     * const email = await prisma.email.upsert({
     *   create: {
     *     // ... data to create a Email
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Email we want to update
     *   }
     * })
     */
    upsert<T extends EmailUpsertArgs>(args: SelectSubset<T, EmailUpsertArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCountArgs} args - Arguments to filter Emails to count.
     * @example
     * // Count the number of Emails
     * const count = await prisma.email.count({
     *   where: {
     *     // ... the filter for the Emails we want to count
     *   }
     * })
    **/
    count<T extends EmailCountArgs>(
      args?: Subset<T, EmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAggregateArgs>(args: Subset<T, EmailAggregateArgs>): Prisma.PrismaPromise<GetEmailAggregateType<T>>

    /**
     * Group by Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailGroupByArgs['orderBy'] }
        : { orderBy?: EmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Email model
   */
  readonly fields: EmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Email.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain<T extends Email$domainArgs<ExtArgs> = {}>(args?: Subset<T, Email$domainArgs<ExtArgs>>): Prisma__EmailDomainClient<$Result.GetResult<Prisma.$EmailDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Email model
   */
  interface EmailFieldRefs {
    readonly id: FieldRef<"Email", 'Int'>
    readonly messageId: FieldRef<"Email", 'String'>
    readonly domainId: FieldRef<"Email", 'Int'>
    readonly fromEmail: FieldRef<"Email", 'String'>
    readonly toEmail: FieldRef<"Email", 'String'>
    readonly subject: FieldRef<"Email", 'String'>
    readonly htmlContent: FieldRef<"Email", 'String'>
    readonly textContent: FieldRef<"Email", 'String'>
    readonly status: FieldRef<"Email", 'String'>
    readonly direction: FieldRef<"Email", 'String'>
    readonly sentAt: FieldRef<"Email", 'DateTime'>
    readonly deliveredAt: FieldRef<"Email", 'DateTime'>
    readonly mxServer: FieldRef<"Email", 'String'>
    readonly errorMessage: FieldRef<"Email", 'String'>
    readonly attempts: FieldRef<"Email", 'Int'>
    readonly createdAt: FieldRef<"Email", 'DateTime'>
    readonly updatedAt: FieldRef<"Email", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Email findUnique
   */
  export type EmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email findUniqueOrThrow
   */
  export type EmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email findFirst
   */
  export type EmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     */
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email findFirstOrThrow
   */
  export type EmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     */
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email findMany
   */
  export type EmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Emails to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email create
   */
  export type EmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * The data needed to create a Email.
     */
    data: XOR<EmailCreateInput, EmailUncheckedCreateInput>
  }

  /**
   * Email createMany
   */
  export type EmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Emails.
     */
    data: EmailCreateManyInput | EmailCreateManyInput[]
  }

  /**
   * Email createManyAndReturn
   */
  export type EmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The data used to create many Emails.
     */
    data: EmailCreateManyInput | EmailCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Email update
   */
  export type EmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * The data needed to update a Email.
     */
    data: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
    /**
     * Choose, which Email to update.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email updateMany
   */
  export type EmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Emails.
     */
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyInput>
    /**
     * Filter which Emails to update
     */
    where?: EmailWhereInput
    /**
     * Limit how many Emails to update.
     */
    limit?: number
  }

  /**
   * Email updateManyAndReturn
   */
  export type EmailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * The data used to update Emails.
     */
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyInput>
    /**
     * Filter which Emails to update
     */
    where?: EmailWhereInput
    /**
     * Limit how many Emails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Email upsert
   */
  export type EmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * The filter to search for the Email to update in case it exists.
     */
    where: EmailWhereUniqueInput
    /**
     * In case the Email found by the `where` argument doesn't exist, create a new Email with this data.
     */
    create: XOR<EmailCreateInput, EmailUncheckedCreateInput>
    /**
     * In case the Email was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
  }

  /**
   * Email delete
   */
  export type EmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter which Email to delete.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email deleteMany
   */
  export type EmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emails to delete
     */
    where?: EmailWhereInput
    /**
     * Limit how many Emails to delete.
     */
    limit?: number
  }

  /**
   * Email.domain
   */
  export type Email$domainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailDomain
     */
    select?: EmailDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailDomain
     */
    omit?: EmailDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailDomainInclude<ExtArgs> | null
    where?: EmailDomainWhereInput
  }

  /**
   * Email without action
   */
  export type EmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Email
     */
    omit?: EmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
  }


  /**
   * Model SmtpConnection
   */

  export type AggregateSmtpConnection = {
    _count: SmtpConnectionCountAggregateOutputType | null
    _avg: SmtpConnectionAvgAggregateOutputType | null
    _sum: SmtpConnectionSumAggregateOutputType | null
    _min: SmtpConnectionMinAggregateOutputType | null
    _max: SmtpConnectionMaxAggregateOutputType | null
  }

  export type SmtpConnectionAvgAggregateOutputType = {
    id: number | null
  }

  export type SmtpConnectionSumAggregateOutputType = {
    id: number | null
  }

  export type SmtpConnectionMinAggregateOutputType = {
    id: number | null
    remoteAddress: string | null
    hostname: string | null
    serverType: string | null
    status: string | null
    rejectReason: string | null
    createdAt: Date | null
  }

  export type SmtpConnectionMaxAggregateOutputType = {
    id: number | null
    remoteAddress: string | null
    hostname: string | null
    serverType: string | null
    status: string | null
    rejectReason: string | null
    createdAt: Date | null
  }

  export type SmtpConnectionCountAggregateOutputType = {
    id: number
    remoteAddress: number
    hostname: number
    serverType: number
    status: number
    rejectReason: number
    createdAt: number
    _all: number
  }


  export type SmtpConnectionAvgAggregateInputType = {
    id?: true
  }

  export type SmtpConnectionSumAggregateInputType = {
    id?: true
  }

  export type SmtpConnectionMinAggregateInputType = {
    id?: true
    remoteAddress?: true
    hostname?: true
    serverType?: true
    status?: true
    rejectReason?: true
    createdAt?: true
  }

  export type SmtpConnectionMaxAggregateInputType = {
    id?: true
    remoteAddress?: true
    hostname?: true
    serverType?: true
    status?: true
    rejectReason?: true
    createdAt?: true
  }

  export type SmtpConnectionCountAggregateInputType = {
    id?: true
    remoteAddress?: true
    hostname?: true
    serverType?: true
    status?: true
    rejectReason?: true
    createdAt?: true
    _all?: true
  }

  export type SmtpConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SmtpConnection to aggregate.
     */
    where?: SmtpConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpConnections to fetch.
     */
    orderBy?: SmtpConnectionOrderByWithRelationInput | SmtpConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SmtpConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SmtpConnections
    **/
    _count?: true | SmtpConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SmtpConnectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SmtpConnectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SmtpConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SmtpConnectionMaxAggregateInputType
  }

  export type GetSmtpConnectionAggregateType<T extends SmtpConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSmtpConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSmtpConnection[P]>
      : GetScalarType<T[P], AggregateSmtpConnection[P]>
  }




  export type SmtpConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SmtpConnectionWhereInput
    orderBy?: SmtpConnectionOrderByWithAggregationInput | SmtpConnectionOrderByWithAggregationInput[]
    by: SmtpConnectionScalarFieldEnum[] | SmtpConnectionScalarFieldEnum
    having?: SmtpConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SmtpConnectionCountAggregateInputType | true
    _avg?: SmtpConnectionAvgAggregateInputType
    _sum?: SmtpConnectionSumAggregateInputType
    _min?: SmtpConnectionMinAggregateInputType
    _max?: SmtpConnectionMaxAggregateInputType
  }

  export type SmtpConnectionGroupByOutputType = {
    id: number
    remoteAddress: string
    hostname: string | null
    serverType: string
    status: string
    rejectReason: string | null
    createdAt: Date
    _count: SmtpConnectionCountAggregateOutputType | null
    _avg: SmtpConnectionAvgAggregateOutputType | null
    _sum: SmtpConnectionSumAggregateOutputType | null
    _min: SmtpConnectionMinAggregateOutputType | null
    _max: SmtpConnectionMaxAggregateOutputType | null
  }

  type GetSmtpConnectionGroupByPayload<T extends SmtpConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SmtpConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SmtpConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SmtpConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], SmtpConnectionGroupByOutputType[P]>
        }
      >
    >


  export type SmtpConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remoteAddress?: boolean
    hostname?: boolean
    serverType?: boolean
    status?: boolean
    rejectReason?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["smtpConnection"]>

  export type SmtpConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remoteAddress?: boolean
    hostname?: boolean
    serverType?: boolean
    status?: boolean
    rejectReason?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["smtpConnection"]>

  export type SmtpConnectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    remoteAddress?: boolean
    hostname?: boolean
    serverType?: boolean
    status?: boolean
    rejectReason?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["smtpConnection"]>

  export type SmtpConnectionSelectScalar = {
    id?: boolean
    remoteAddress?: boolean
    hostname?: boolean
    serverType?: boolean
    status?: boolean
    rejectReason?: boolean
    createdAt?: boolean
  }

  export type SmtpConnectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "remoteAddress" | "hostname" | "serverType" | "status" | "rejectReason" | "createdAt", ExtArgs["result"]["smtpConnection"]>

  export type $SmtpConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SmtpConnection"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      remoteAddress: string
      hostname: string | null
      serverType: string
      status: string
      rejectReason: string | null
      createdAt: Date
    }, ExtArgs["result"]["smtpConnection"]>
    composites: {}
  }

  type SmtpConnectionGetPayload<S extends boolean | null | undefined | SmtpConnectionDefaultArgs> = $Result.GetResult<Prisma.$SmtpConnectionPayload, S>

  type SmtpConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SmtpConnectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SmtpConnectionCountAggregateInputType | true
    }

  export interface SmtpConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SmtpConnection'], meta: { name: 'SmtpConnection' } }
    /**
     * Find zero or one SmtpConnection that matches the filter.
     * @param {SmtpConnectionFindUniqueArgs} args - Arguments to find a SmtpConnection
     * @example
     * // Get one SmtpConnection
     * const smtpConnection = await prisma.smtpConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SmtpConnectionFindUniqueArgs>(args: SelectSubset<T, SmtpConnectionFindUniqueArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SmtpConnection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SmtpConnectionFindUniqueOrThrowArgs} args - Arguments to find a SmtpConnection
     * @example
     * // Get one SmtpConnection
     * const smtpConnection = await prisma.smtpConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SmtpConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SmtpConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SmtpConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionFindFirstArgs} args - Arguments to find a SmtpConnection
     * @example
     * // Get one SmtpConnection
     * const smtpConnection = await prisma.smtpConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SmtpConnectionFindFirstArgs>(args?: SelectSubset<T, SmtpConnectionFindFirstArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SmtpConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionFindFirstOrThrowArgs} args - Arguments to find a SmtpConnection
     * @example
     * // Get one SmtpConnection
     * const smtpConnection = await prisma.smtpConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SmtpConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SmtpConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SmtpConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SmtpConnections
     * const smtpConnections = await prisma.smtpConnection.findMany()
     * 
     * // Get first 10 SmtpConnections
     * const smtpConnections = await prisma.smtpConnection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const smtpConnectionWithIdOnly = await prisma.smtpConnection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SmtpConnectionFindManyArgs>(args?: SelectSubset<T, SmtpConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SmtpConnection.
     * @param {SmtpConnectionCreateArgs} args - Arguments to create a SmtpConnection.
     * @example
     * // Create one SmtpConnection
     * const SmtpConnection = await prisma.smtpConnection.create({
     *   data: {
     *     // ... data to create a SmtpConnection
     *   }
     * })
     * 
     */
    create<T extends SmtpConnectionCreateArgs>(args: SelectSubset<T, SmtpConnectionCreateArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SmtpConnections.
     * @param {SmtpConnectionCreateManyArgs} args - Arguments to create many SmtpConnections.
     * @example
     * // Create many SmtpConnections
     * const smtpConnection = await prisma.smtpConnection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SmtpConnectionCreateManyArgs>(args?: SelectSubset<T, SmtpConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SmtpConnections and returns the data saved in the database.
     * @param {SmtpConnectionCreateManyAndReturnArgs} args - Arguments to create many SmtpConnections.
     * @example
     * // Create many SmtpConnections
     * const smtpConnection = await prisma.smtpConnection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SmtpConnections and only return the `id`
     * const smtpConnectionWithIdOnly = await prisma.smtpConnection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SmtpConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SmtpConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SmtpConnection.
     * @param {SmtpConnectionDeleteArgs} args - Arguments to delete one SmtpConnection.
     * @example
     * // Delete one SmtpConnection
     * const SmtpConnection = await prisma.smtpConnection.delete({
     *   where: {
     *     // ... filter to delete one SmtpConnection
     *   }
     * })
     * 
     */
    delete<T extends SmtpConnectionDeleteArgs>(args: SelectSubset<T, SmtpConnectionDeleteArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SmtpConnection.
     * @param {SmtpConnectionUpdateArgs} args - Arguments to update one SmtpConnection.
     * @example
     * // Update one SmtpConnection
     * const smtpConnection = await prisma.smtpConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SmtpConnectionUpdateArgs>(args: SelectSubset<T, SmtpConnectionUpdateArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SmtpConnections.
     * @param {SmtpConnectionDeleteManyArgs} args - Arguments to filter SmtpConnections to delete.
     * @example
     * // Delete a few SmtpConnections
     * const { count } = await prisma.smtpConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SmtpConnectionDeleteManyArgs>(args?: SelectSubset<T, SmtpConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmtpConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SmtpConnections
     * const smtpConnection = await prisma.smtpConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SmtpConnectionUpdateManyArgs>(args: SelectSubset<T, SmtpConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmtpConnections and returns the data updated in the database.
     * @param {SmtpConnectionUpdateManyAndReturnArgs} args - Arguments to update many SmtpConnections.
     * @example
     * // Update many SmtpConnections
     * const smtpConnection = await prisma.smtpConnection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SmtpConnections and only return the `id`
     * const smtpConnectionWithIdOnly = await prisma.smtpConnection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SmtpConnectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SmtpConnectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SmtpConnection.
     * @param {SmtpConnectionUpsertArgs} args - Arguments to update or create a SmtpConnection.
     * @example
     * // Update or create a SmtpConnection
     * const smtpConnection = await prisma.smtpConnection.upsert({
     *   create: {
     *     // ... data to create a SmtpConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SmtpConnection we want to update
     *   }
     * })
     */
    upsert<T extends SmtpConnectionUpsertArgs>(args: SelectSubset<T, SmtpConnectionUpsertArgs<ExtArgs>>): Prisma__SmtpConnectionClient<$Result.GetResult<Prisma.$SmtpConnectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SmtpConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionCountArgs} args - Arguments to filter SmtpConnections to count.
     * @example
     * // Count the number of SmtpConnections
     * const count = await prisma.smtpConnection.count({
     *   where: {
     *     // ... the filter for the SmtpConnections we want to count
     *   }
     * })
    **/
    count<T extends SmtpConnectionCountArgs>(
      args?: Subset<T, SmtpConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SmtpConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SmtpConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SmtpConnectionAggregateArgs>(args: Subset<T, SmtpConnectionAggregateArgs>): Prisma.PrismaPromise<GetSmtpConnectionAggregateType<T>>

    /**
     * Group by SmtpConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmtpConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SmtpConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SmtpConnectionGroupByArgs['orderBy'] }
        : { orderBy?: SmtpConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SmtpConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSmtpConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SmtpConnection model
   */
  readonly fields: SmtpConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SmtpConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SmtpConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SmtpConnection model
   */
  interface SmtpConnectionFieldRefs {
    readonly id: FieldRef<"SmtpConnection", 'Int'>
    readonly remoteAddress: FieldRef<"SmtpConnection", 'String'>
    readonly hostname: FieldRef<"SmtpConnection", 'String'>
    readonly serverType: FieldRef<"SmtpConnection", 'String'>
    readonly status: FieldRef<"SmtpConnection", 'String'>
    readonly rejectReason: FieldRef<"SmtpConnection", 'String'>
    readonly createdAt: FieldRef<"SmtpConnection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SmtpConnection findUnique
   */
  export type SmtpConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SmtpConnection to fetch.
     */
    where: SmtpConnectionWhereUniqueInput
  }

  /**
   * SmtpConnection findUniqueOrThrow
   */
  export type SmtpConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SmtpConnection to fetch.
     */
    where: SmtpConnectionWhereUniqueInput
  }

  /**
   * SmtpConnection findFirst
   */
  export type SmtpConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SmtpConnection to fetch.
     */
    where?: SmtpConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpConnections to fetch.
     */
    orderBy?: SmtpConnectionOrderByWithRelationInput | SmtpConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SmtpConnections.
     */
    cursor?: SmtpConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SmtpConnections.
     */
    distinct?: SmtpConnectionScalarFieldEnum | SmtpConnectionScalarFieldEnum[]
  }

  /**
   * SmtpConnection findFirstOrThrow
   */
  export type SmtpConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SmtpConnection to fetch.
     */
    where?: SmtpConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpConnections to fetch.
     */
    orderBy?: SmtpConnectionOrderByWithRelationInput | SmtpConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SmtpConnections.
     */
    cursor?: SmtpConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SmtpConnections.
     */
    distinct?: SmtpConnectionScalarFieldEnum | SmtpConnectionScalarFieldEnum[]
  }

  /**
   * SmtpConnection findMany
   */
  export type SmtpConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SmtpConnections to fetch.
     */
    where?: SmtpConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmtpConnections to fetch.
     */
    orderBy?: SmtpConnectionOrderByWithRelationInput | SmtpConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SmtpConnections.
     */
    cursor?: SmtpConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmtpConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmtpConnections.
     */
    skip?: number
    distinct?: SmtpConnectionScalarFieldEnum | SmtpConnectionScalarFieldEnum[]
  }

  /**
   * SmtpConnection create
   */
  export type SmtpConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * The data needed to create a SmtpConnection.
     */
    data: XOR<SmtpConnectionCreateInput, SmtpConnectionUncheckedCreateInput>
  }

  /**
   * SmtpConnection createMany
   */
  export type SmtpConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SmtpConnections.
     */
    data: SmtpConnectionCreateManyInput | SmtpConnectionCreateManyInput[]
  }

  /**
   * SmtpConnection createManyAndReturn
   */
  export type SmtpConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * The data used to create many SmtpConnections.
     */
    data: SmtpConnectionCreateManyInput | SmtpConnectionCreateManyInput[]
  }

  /**
   * SmtpConnection update
   */
  export type SmtpConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * The data needed to update a SmtpConnection.
     */
    data: XOR<SmtpConnectionUpdateInput, SmtpConnectionUncheckedUpdateInput>
    /**
     * Choose, which SmtpConnection to update.
     */
    where: SmtpConnectionWhereUniqueInput
  }

  /**
   * SmtpConnection updateMany
   */
  export type SmtpConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SmtpConnections.
     */
    data: XOR<SmtpConnectionUpdateManyMutationInput, SmtpConnectionUncheckedUpdateManyInput>
    /**
     * Filter which SmtpConnections to update
     */
    where?: SmtpConnectionWhereInput
    /**
     * Limit how many SmtpConnections to update.
     */
    limit?: number
  }

  /**
   * SmtpConnection updateManyAndReturn
   */
  export type SmtpConnectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * The data used to update SmtpConnections.
     */
    data: XOR<SmtpConnectionUpdateManyMutationInput, SmtpConnectionUncheckedUpdateManyInput>
    /**
     * Filter which SmtpConnections to update
     */
    where?: SmtpConnectionWhereInput
    /**
     * Limit how many SmtpConnections to update.
     */
    limit?: number
  }

  /**
   * SmtpConnection upsert
   */
  export type SmtpConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * The filter to search for the SmtpConnection to update in case it exists.
     */
    where: SmtpConnectionWhereUniqueInput
    /**
     * In case the SmtpConnection found by the `where` argument doesn't exist, create a new SmtpConnection with this data.
     */
    create: XOR<SmtpConnectionCreateInput, SmtpConnectionUncheckedCreateInput>
    /**
     * In case the SmtpConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SmtpConnectionUpdateInput, SmtpConnectionUncheckedUpdateInput>
  }

  /**
   * SmtpConnection delete
   */
  export type SmtpConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
    /**
     * Filter which SmtpConnection to delete.
     */
    where: SmtpConnectionWhereUniqueInput
  }

  /**
   * SmtpConnection deleteMany
   */
  export type SmtpConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SmtpConnections to delete
     */
    where?: SmtpConnectionWhereInput
    /**
     * Limit how many SmtpConnections to delete.
     */
    limit?: number
  }

  /**
   * SmtpConnection without action
   */
  export type SmtpConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpConnection
     */
    select?: SmtpConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpConnection
     */
    omit?: SmtpConnectionOmit<ExtArgs> | null
  }


  /**
   * Model AuthAttempt
   */

  export type AggregateAuthAttempt = {
    _count: AuthAttemptCountAggregateOutputType | null
    _avg: AuthAttemptAvgAggregateOutputType | null
    _sum: AuthAttemptSumAggregateOutputType | null
    _min: AuthAttemptMinAggregateOutputType | null
    _max: AuthAttemptMaxAggregateOutputType | null
  }

  export type AuthAttemptAvgAggregateOutputType = {
    id: number | null
    smtpUserId: number | null
  }

  export type AuthAttemptSumAggregateOutputType = {
    id: number | null
    smtpUserId: number | null
  }

  export type AuthAttemptMinAggregateOutputType = {
    id: number | null
    smtpUserId: number | null
    username: string | null
    remoteAddress: string | null
    success: boolean | null
    createdAt: Date | null
  }

  export type AuthAttemptMaxAggregateOutputType = {
    id: number | null
    smtpUserId: number | null
    username: string | null
    remoteAddress: string | null
    success: boolean | null
    createdAt: Date | null
  }

  export type AuthAttemptCountAggregateOutputType = {
    id: number
    smtpUserId: number
    username: number
    remoteAddress: number
    success: number
    createdAt: number
    _all: number
  }


  export type AuthAttemptAvgAggregateInputType = {
    id?: true
    smtpUserId?: true
  }

  export type AuthAttemptSumAggregateInputType = {
    id?: true
    smtpUserId?: true
  }

  export type AuthAttemptMinAggregateInputType = {
    id?: true
    smtpUserId?: true
    username?: true
    remoteAddress?: true
    success?: true
    createdAt?: true
  }

  export type AuthAttemptMaxAggregateInputType = {
    id?: true
    smtpUserId?: true
    username?: true
    remoteAddress?: true
    success?: true
    createdAt?: true
  }

  export type AuthAttemptCountAggregateInputType = {
    id?: true
    smtpUserId?: true
    username?: true
    remoteAddress?: true
    success?: true
    createdAt?: true
    _all?: true
  }

  export type AuthAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthAttempt to aggregate.
     */
    where?: AuthAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAttempts to fetch.
     */
    orderBy?: AuthAttemptOrderByWithRelationInput | AuthAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthAttempts
    **/
    _count?: true | AuthAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthAttemptMaxAggregateInputType
  }

  export type GetAuthAttemptAggregateType<T extends AuthAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthAttempt[P]>
      : GetScalarType<T[P], AggregateAuthAttempt[P]>
  }




  export type AuthAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthAttemptWhereInput
    orderBy?: AuthAttemptOrderByWithAggregationInput | AuthAttemptOrderByWithAggregationInput[]
    by: AuthAttemptScalarFieldEnum[] | AuthAttemptScalarFieldEnum
    having?: AuthAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthAttemptCountAggregateInputType | true
    _avg?: AuthAttemptAvgAggregateInputType
    _sum?: AuthAttemptSumAggregateInputType
    _min?: AuthAttemptMinAggregateInputType
    _max?: AuthAttemptMaxAggregateInputType
  }

  export type AuthAttemptGroupByOutputType = {
    id: number
    smtpUserId: number | null
    username: string
    remoteAddress: string
    success: boolean
    createdAt: Date
    _count: AuthAttemptCountAggregateOutputType | null
    _avg: AuthAttemptAvgAggregateOutputType | null
    _sum: AuthAttemptSumAggregateOutputType | null
    _min: AuthAttemptMinAggregateOutputType | null
    _max: AuthAttemptMaxAggregateOutputType | null
  }

  type GetAuthAttemptGroupByPayload<T extends AuthAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], AuthAttemptGroupByOutputType[P]>
        }
      >
    >


  export type AuthAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    smtpUserId?: boolean
    username?: boolean
    remoteAddress?: boolean
    success?: boolean
    createdAt?: boolean
    smtpUser?: boolean | AuthAttempt$smtpUserArgs<ExtArgs>
  }, ExtArgs["result"]["authAttempt"]>

  export type AuthAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    smtpUserId?: boolean
    username?: boolean
    remoteAddress?: boolean
    success?: boolean
    createdAt?: boolean
    smtpUser?: boolean | AuthAttempt$smtpUserArgs<ExtArgs>
  }, ExtArgs["result"]["authAttempt"]>

  export type AuthAttemptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    smtpUserId?: boolean
    username?: boolean
    remoteAddress?: boolean
    success?: boolean
    createdAt?: boolean
    smtpUser?: boolean | AuthAttempt$smtpUserArgs<ExtArgs>
  }, ExtArgs["result"]["authAttempt"]>

  export type AuthAttemptSelectScalar = {
    id?: boolean
    smtpUserId?: boolean
    username?: boolean
    remoteAddress?: boolean
    success?: boolean
    createdAt?: boolean
  }

  export type AuthAttemptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "smtpUserId" | "username" | "remoteAddress" | "success" | "createdAt", ExtArgs["result"]["authAttempt"]>
  export type AuthAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    smtpUser?: boolean | AuthAttempt$smtpUserArgs<ExtArgs>
  }
  export type AuthAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    smtpUser?: boolean | AuthAttempt$smtpUserArgs<ExtArgs>
  }
  export type AuthAttemptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    smtpUser?: boolean | AuthAttempt$smtpUserArgs<ExtArgs>
  }

  export type $AuthAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthAttempt"
    objects: {
      smtpUser: Prisma.$SmtpUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      smtpUserId: number | null
      username: string
      remoteAddress: string
      success: boolean
      createdAt: Date
    }, ExtArgs["result"]["authAttempt"]>
    composites: {}
  }

  type AuthAttemptGetPayload<S extends boolean | null | undefined | AuthAttemptDefaultArgs> = $Result.GetResult<Prisma.$AuthAttemptPayload, S>

  type AuthAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthAttemptCountAggregateInputType | true
    }

  export interface AuthAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthAttempt'], meta: { name: 'AuthAttempt' } }
    /**
     * Find zero or one AuthAttempt that matches the filter.
     * @param {AuthAttemptFindUniqueArgs} args - Arguments to find a AuthAttempt
     * @example
     * // Get one AuthAttempt
     * const authAttempt = await prisma.authAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthAttemptFindUniqueArgs>(args: SelectSubset<T, AuthAttemptFindUniqueArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuthAttempt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthAttemptFindUniqueOrThrowArgs} args - Arguments to find a AuthAttempt
     * @example
     * // Get one AuthAttempt
     * const authAttempt = await prisma.authAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptFindFirstArgs} args - Arguments to find a AuthAttempt
     * @example
     * // Get one AuthAttempt
     * const authAttempt = await prisma.authAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthAttemptFindFirstArgs>(args?: SelectSubset<T, AuthAttemptFindFirstArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptFindFirstOrThrowArgs} args - Arguments to find a AuthAttempt
     * @example
     * // Get one AuthAttempt
     * const authAttempt = await prisma.authAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuthAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthAttempts
     * const authAttempts = await prisma.authAttempt.findMany()
     * 
     * // Get first 10 AuthAttempts
     * const authAttempts = await prisma.authAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authAttemptWithIdOnly = await prisma.authAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthAttemptFindManyArgs>(args?: SelectSubset<T, AuthAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuthAttempt.
     * @param {AuthAttemptCreateArgs} args - Arguments to create a AuthAttempt.
     * @example
     * // Create one AuthAttempt
     * const AuthAttempt = await prisma.authAttempt.create({
     *   data: {
     *     // ... data to create a AuthAttempt
     *   }
     * })
     * 
     */
    create<T extends AuthAttemptCreateArgs>(args: SelectSubset<T, AuthAttemptCreateArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuthAttempts.
     * @param {AuthAttemptCreateManyArgs} args - Arguments to create many AuthAttempts.
     * @example
     * // Create many AuthAttempts
     * const authAttempt = await prisma.authAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthAttemptCreateManyArgs>(args?: SelectSubset<T, AuthAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuthAttempts and returns the data saved in the database.
     * @param {AuthAttemptCreateManyAndReturnArgs} args - Arguments to create many AuthAttempts.
     * @example
     * // Create many AuthAttempts
     * const authAttempt = await prisma.authAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuthAttempts and only return the `id`
     * const authAttemptWithIdOnly = await prisma.authAttempt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuthAttempt.
     * @param {AuthAttemptDeleteArgs} args - Arguments to delete one AuthAttempt.
     * @example
     * // Delete one AuthAttempt
     * const AuthAttempt = await prisma.authAttempt.delete({
     *   where: {
     *     // ... filter to delete one AuthAttempt
     *   }
     * })
     * 
     */
    delete<T extends AuthAttemptDeleteArgs>(args: SelectSubset<T, AuthAttemptDeleteArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuthAttempt.
     * @param {AuthAttemptUpdateArgs} args - Arguments to update one AuthAttempt.
     * @example
     * // Update one AuthAttempt
     * const authAttempt = await prisma.authAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthAttemptUpdateArgs>(args: SelectSubset<T, AuthAttemptUpdateArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuthAttempts.
     * @param {AuthAttemptDeleteManyArgs} args - Arguments to filter AuthAttempts to delete.
     * @example
     * // Delete a few AuthAttempts
     * const { count } = await prisma.authAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthAttemptDeleteManyArgs>(args?: SelectSubset<T, AuthAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthAttempts
     * const authAttempt = await prisma.authAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthAttemptUpdateManyArgs>(args: SelectSubset<T, AuthAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthAttempts and returns the data updated in the database.
     * @param {AuthAttemptUpdateManyAndReturnArgs} args - Arguments to update many AuthAttempts.
     * @example
     * // Update many AuthAttempts
     * const authAttempt = await prisma.authAttempt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuthAttempts and only return the `id`
     * const authAttemptWithIdOnly = await prisma.authAttempt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthAttemptUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuthAttempt.
     * @param {AuthAttemptUpsertArgs} args - Arguments to update or create a AuthAttempt.
     * @example
     * // Update or create a AuthAttempt
     * const authAttempt = await prisma.authAttempt.upsert({
     *   create: {
     *     // ... data to create a AuthAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthAttempt we want to update
     *   }
     * })
     */
    upsert<T extends AuthAttemptUpsertArgs>(args: SelectSubset<T, AuthAttemptUpsertArgs<ExtArgs>>): Prisma__AuthAttemptClient<$Result.GetResult<Prisma.$AuthAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuthAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptCountArgs} args - Arguments to filter AuthAttempts to count.
     * @example
     * // Count the number of AuthAttempts
     * const count = await prisma.authAttempt.count({
     *   where: {
     *     // ... the filter for the AuthAttempts we want to count
     *   }
     * })
    **/
    count<T extends AuthAttemptCountArgs>(
      args?: Subset<T, AuthAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthAttemptAggregateArgs>(args: Subset<T, AuthAttemptAggregateArgs>): Prisma.PrismaPromise<GetAuthAttemptAggregateType<T>>

    /**
     * Group by AuthAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthAttemptGroupByArgs['orderBy'] }
        : { orderBy?: AuthAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthAttempt model
   */
  readonly fields: AuthAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    smtpUser<T extends AuthAttempt$smtpUserArgs<ExtArgs> = {}>(args?: Subset<T, AuthAttempt$smtpUserArgs<ExtArgs>>): Prisma__SmtpUserClient<$Result.GetResult<Prisma.$SmtpUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthAttempt model
   */
  interface AuthAttemptFieldRefs {
    readonly id: FieldRef<"AuthAttempt", 'Int'>
    readonly smtpUserId: FieldRef<"AuthAttempt", 'Int'>
    readonly username: FieldRef<"AuthAttempt", 'String'>
    readonly remoteAddress: FieldRef<"AuthAttempt", 'String'>
    readonly success: FieldRef<"AuthAttempt", 'Boolean'>
    readonly createdAt: FieldRef<"AuthAttempt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuthAttempt findUnique
   */
  export type AuthAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AuthAttempt to fetch.
     */
    where: AuthAttemptWhereUniqueInput
  }

  /**
   * AuthAttempt findUniqueOrThrow
   */
  export type AuthAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AuthAttempt to fetch.
     */
    where: AuthAttemptWhereUniqueInput
  }

  /**
   * AuthAttempt findFirst
   */
  export type AuthAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AuthAttempt to fetch.
     */
    where?: AuthAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAttempts to fetch.
     */
    orderBy?: AuthAttemptOrderByWithRelationInput | AuthAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthAttempts.
     */
    cursor?: AuthAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthAttempts.
     */
    distinct?: AuthAttemptScalarFieldEnum | AuthAttemptScalarFieldEnum[]
  }

  /**
   * AuthAttempt findFirstOrThrow
   */
  export type AuthAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AuthAttempt to fetch.
     */
    where?: AuthAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAttempts to fetch.
     */
    orderBy?: AuthAttemptOrderByWithRelationInput | AuthAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthAttempts.
     */
    cursor?: AuthAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthAttempts.
     */
    distinct?: AuthAttemptScalarFieldEnum | AuthAttemptScalarFieldEnum[]
  }

  /**
   * AuthAttempt findMany
   */
  export type AuthAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AuthAttempts to fetch.
     */
    where?: AuthAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthAttempts to fetch.
     */
    orderBy?: AuthAttemptOrderByWithRelationInput | AuthAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthAttempts.
     */
    cursor?: AuthAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthAttempts.
     */
    skip?: number
    distinct?: AuthAttemptScalarFieldEnum | AuthAttemptScalarFieldEnum[]
  }

  /**
   * AuthAttempt create
   */
  export type AuthAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthAttempt.
     */
    data: XOR<AuthAttemptCreateInput, AuthAttemptUncheckedCreateInput>
  }

  /**
   * AuthAttempt createMany
   */
  export type AuthAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthAttempts.
     */
    data: AuthAttemptCreateManyInput | AuthAttemptCreateManyInput[]
  }

  /**
   * AuthAttempt createManyAndReturn
   */
  export type AuthAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * The data used to create many AuthAttempts.
     */
    data: AuthAttemptCreateManyInput | AuthAttemptCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuthAttempt update
   */
  export type AuthAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthAttempt.
     */
    data: XOR<AuthAttemptUpdateInput, AuthAttemptUncheckedUpdateInput>
    /**
     * Choose, which AuthAttempt to update.
     */
    where: AuthAttemptWhereUniqueInput
  }

  /**
   * AuthAttempt updateMany
   */
  export type AuthAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthAttempts.
     */
    data: XOR<AuthAttemptUpdateManyMutationInput, AuthAttemptUncheckedUpdateManyInput>
    /**
     * Filter which AuthAttempts to update
     */
    where?: AuthAttemptWhereInput
    /**
     * Limit how many AuthAttempts to update.
     */
    limit?: number
  }

  /**
   * AuthAttempt updateManyAndReturn
   */
  export type AuthAttemptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * The data used to update AuthAttempts.
     */
    data: XOR<AuthAttemptUpdateManyMutationInput, AuthAttemptUncheckedUpdateManyInput>
    /**
     * Filter which AuthAttempts to update
     */
    where?: AuthAttemptWhereInput
    /**
     * Limit how many AuthAttempts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuthAttempt upsert
   */
  export type AuthAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthAttempt to update in case it exists.
     */
    where: AuthAttemptWhereUniqueInput
    /**
     * In case the AuthAttempt found by the `where` argument doesn't exist, create a new AuthAttempt with this data.
     */
    create: XOR<AuthAttemptCreateInput, AuthAttemptUncheckedCreateInput>
    /**
     * In case the AuthAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthAttemptUpdateInput, AuthAttemptUncheckedUpdateInput>
  }

  /**
   * AuthAttempt delete
   */
  export type AuthAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
    /**
     * Filter which AuthAttempt to delete.
     */
    where: AuthAttemptWhereUniqueInput
  }

  /**
   * AuthAttempt deleteMany
   */
  export type AuthAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthAttempts to delete
     */
    where?: AuthAttemptWhereInput
    /**
     * Limit how many AuthAttempts to delete.
     */
    limit?: number
  }

  /**
   * AuthAttempt.smtpUser
   */
  export type AuthAttempt$smtpUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmtpUser
     */
    select?: SmtpUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmtpUser
     */
    omit?: SmtpUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmtpUserInclude<ExtArgs> | null
    where?: SmtpUserWhereInput
  }

  /**
   * AuthAttempt without action
   */
  export type AuthAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthAttempt
     */
    select?: AuthAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthAttempt
     */
    omit?: AuthAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthAttemptInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    tokenHash: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    expiresAt: Date | null
    lastActivity: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    tokenHash: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    expiresAt: Date | null
    lastActivity: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    tokenHash: number
    ipAddress: number
    userAgent: number
    isActive: number
    expiresAt: number
    lastActivity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    tokenHash?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    lastActivity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    tokenHash?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    lastActivity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    tokenHash?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    lastActivity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    tokenHash: string
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean
    expiresAt: Date
    lastActivity: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    tokenHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    tokenHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    tokenHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    tokenHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "tokenHash" | "ipAddress" | "userAgent" | "isActive" | "expiresAt" | "lastActivity" | "createdAt" | "updatedAt", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      tokenHash: string
      ipAddress: string | null
      userAgent: string | null
      isActive: boolean
      expiresAt: Date
      lastActivity: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly token: FieldRef<"UserSession", 'String'>
    readonly tokenHash: FieldRef<"UserSession", 'String'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly isActive: FieldRef<"UserSession", 'Boolean'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly lastActivity: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model UserToken
   */

  export type AggregateUserToken = {
    _count: UserTokenCountAggregateOutputType | null
    _avg: UserTokenAvgAggregateOutputType | null
    _sum: UserTokenSumAggregateOutputType | null
    _min: UserTokenMinAggregateOutputType | null
    _max: UserTokenMaxAggregateOutputType | null
  }

  export type UserTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type UserTokenSumAggregateOutputType = {
    id: number | null
  }

  export type UserTokenMinAggregateOutputType = {
    id: number | null
    userId: string | null
    type: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTokenMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    type: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTokenCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    token: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTokenAvgAggregateInputType = {
    id?: true
  }

  export type UserTokenSumAggregateInputType = {
    id?: true
  }

  export type UserTokenMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTokenCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserToken to aggregate.
     */
    where?: UserTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: UserTokenOrderByWithRelationInput | UserTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTokens
    **/
    _count?: true | UserTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTokenMaxAggregateInputType
  }

  export type GetUserTokenAggregateType<T extends UserTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateUserToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserToken[P]>
      : GetScalarType<T[P], AggregateUserToken[P]>
  }




  export type UserTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTokenWhereInput
    orderBy?: UserTokenOrderByWithAggregationInput | UserTokenOrderByWithAggregationInput[]
    by: UserTokenScalarFieldEnum[] | UserTokenScalarFieldEnum
    having?: UserTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTokenCountAggregateInputType | true
    _avg?: UserTokenAvgAggregateInputType
    _sum?: UserTokenSumAggregateInputType
    _min?: UserTokenMinAggregateInputType
    _max?: UserTokenMaxAggregateInputType
  }

  export type UserTokenGroupByOutputType = {
    id: number
    userId: string
    type: string
    token: string
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserTokenCountAggregateOutputType | null
    _avg: UserTokenAvgAggregateOutputType | null
    _sum: UserTokenSumAggregateOutputType | null
    _min: UserTokenMinAggregateOutputType | null
    _max: UserTokenMaxAggregateOutputType | null
  }

  type GetUserTokenGroupByPayload<T extends UserTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTokenGroupByOutputType[P]>
            : GetScalarType<T[P], UserTokenGroupByOutputType[P]>
        }
      >
    >


  export type UserTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userToken"]>

  export type UserTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userToken"]>

  export type UserTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userToken"]>

  export type UserTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "token" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userToken"]>
  export type UserTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      type: string
      token: string
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userToken"]>
    composites: {}
  }

  type UserTokenGetPayload<S extends boolean | null | undefined | UserTokenDefaultArgs> = $Result.GetResult<Prisma.$UserTokenPayload, S>

  type UserTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTokenCountAggregateInputType | true
    }

  export interface UserTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserToken'], meta: { name: 'UserToken' } }
    /**
     * Find zero or one UserToken that matches the filter.
     * @param {UserTokenFindUniqueArgs} args - Arguments to find a UserToken
     * @example
     * // Get one UserToken
     * const userToken = await prisma.userToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTokenFindUniqueArgs>(args: SelectSubset<T, UserTokenFindUniqueArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTokenFindUniqueOrThrowArgs} args - Arguments to find a UserToken
     * @example
     * // Get one UserToken
     * const userToken = await prisma.userToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, UserTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenFindFirstArgs} args - Arguments to find a UserToken
     * @example
     * // Get one UserToken
     * const userToken = await prisma.userToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTokenFindFirstArgs>(args?: SelectSubset<T, UserTokenFindFirstArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenFindFirstOrThrowArgs} args - Arguments to find a UserToken
     * @example
     * // Get one UserToken
     * const userToken = await prisma.userToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, UserTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTokens
     * const userTokens = await prisma.userToken.findMany()
     * 
     * // Get first 10 UserTokens
     * const userTokens = await prisma.userToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTokenWithIdOnly = await prisma.userToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserTokenFindManyArgs>(args?: SelectSubset<T, UserTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserToken.
     * @param {UserTokenCreateArgs} args - Arguments to create a UserToken.
     * @example
     * // Create one UserToken
     * const UserToken = await prisma.userToken.create({
     *   data: {
     *     // ... data to create a UserToken
     *   }
     * })
     * 
     */
    create<T extends UserTokenCreateArgs>(args: SelectSubset<T, UserTokenCreateArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserTokens.
     * @param {UserTokenCreateManyArgs} args - Arguments to create many UserTokens.
     * @example
     * // Create many UserTokens
     * const userToken = await prisma.userToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserTokenCreateManyArgs>(args?: SelectSubset<T, UserTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserTokens and returns the data saved in the database.
     * @param {UserTokenCreateManyAndReturnArgs} args - Arguments to create many UserTokens.
     * @example
     * // Create many UserTokens
     * const userToken = await prisma.userToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserTokens and only return the `id`
     * const userTokenWithIdOnly = await prisma.userToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, UserTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserToken.
     * @param {UserTokenDeleteArgs} args - Arguments to delete one UserToken.
     * @example
     * // Delete one UserToken
     * const UserToken = await prisma.userToken.delete({
     *   where: {
     *     // ... filter to delete one UserToken
     *   }
     * })
     * 
     */
    delete<T extends UserTokenDeleteArgs>(args: SelectSubset<T, UserTokenDeleteArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserToken.
     * @param {UserTokenUpdateArgs} args - Arguments to update one UserToken.
     * @example
     * // Update one UserToken
     * const userToken = await prisma.userToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserTokenUpdateArgs>(args: SelectSubset<T, UserTokenUpdateArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserTokens.
     * @param {UserTokenDeleteManyArgs} args - Arguments to filter UserTokens to delete.
     * @example
     * // Delete a few UserTokens
     * const { count } = await prisma.userToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserTokenDeleteManyArgs>(args?: SelectSubset<T, UserTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTokens
     * const userToken = await prisma.userToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserTokenUpdateManyArgs>(args: SelectSubset<T, UserTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTokens and returns the data updated in the database.
     * @param {UserTokenUpdateManyAndReturnArgs} args - Arguments to update many UserTokens.
     * @example
     * // Update many UserTokens
     * const userToken = await prisma.userToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserTokens and only return the `id`
     * const userTokenWithIdOnly = await prisma.userToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, UserTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserToken.
     * @param {UserTokenUpsertArgs} args - Arguments to update or create a UserToken.
     * @example
     * // Update or create a UserToken
     * const userToken = await prisma.userToken.upsert({
     *   create: {
     *     // ... data to create a UserToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserToken we want to update
     *   }
     * })
     */
    upsert<T extends UserTokenUpsertArgs>(args: SelectSubset<T, UserTokenUpsertArgs<ExtArgs>>): Prisma__UserTokenClient<$Result.GetResult<Prisma.$UserTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenCountArgs} args - Arguments to filter UserTokens to count.
     * @example
     * // Count the number of UserTokens
     * const count = await prisma.userToken.count({
     *   where: {
     *     // ... the filter for the UserTokens we want to count
     *   }
     * })
    **/
    count<T extends UserTokenCountArgs>(
      args?: Subset<T, UserTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTokenAggregateArgs>(args: Subset<T, UserTokenAggregateArgs>): Prisma.PrismaPromise<GetUserTokenAggregateType<T>>

    /**
     * Group by UserToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTokenGroupByArgs['orderBy'] }
        : { orderBy?: UserTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserToken model
   */
  readonly fields: UserTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserToken model
   */
  interface UserTokenFieldRefs {
    readonly id: FieldRef<"UserToken", 'Int'>
    readonly userId: FieldRef<"UserToken", 'String'>
    readonly type: FieldRef<"UserToken", 'String'>
    readonly token: FieldRef<"UserToken", 'String'>
    readonly expiresAt: FieldRef<"UserToken", 'DateTime'>
    readonly createdAt: FieldRef<"UserToken", 'DateTime'>
    readonly updatedAt: FieldRef<"UserToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserToken findUnique
   */
  export type UserTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * Filter, which UserToken to fetch.
     */
    where: UserTokenWhereUniqueInput
  }

  /**
   * UserToken findUniqueOrThrow
   */
  export type UserTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * Filter, which UserToken to fetch.
     */
    where: UserTokenWhereUniqueInput
  }

  /**
   * UserToken findFirst
   */
  export type UserTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * Filter, which UserToken to fetch.
     */
    where?: UserTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: UserTokenOrderByWithRelationInput | UserTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTokens.
     */
    cursor?: UserTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTokens.
     */
    distinct?: UserTokenScalarFieldEnum | UserTokenScalarFieldEnum[]
  }

  /**
   * UserToken findFirstOrThrow
   */
  export type UserTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * Filter, which UserToken to fetch.
     */
    where?: UserTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: UserTokenOrderByWithRelationInput | UserTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTokens.
     */
    cursor?: UserTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTokens.
     */
    distinct?: UserTokenScalarFieldEnum | UserTokenScalarFieldEnum[]
  }

  /**
   * UserToken findMany
   */
  export type UserTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * Filter, which UserTokens to fetch.
     */
    where?: UserTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: UserTokenOrderByWithRelationInput | UserTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTokens.
     */
    cursor?: UserTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    distinct?: UserTokenScalarFieldEnum | UserTokenScalarFieldEnum[]
  }

  /**
   * UserToken create
   */
  export type UserTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a UserToken.
     */
    data: XOR<UserTokenCreateInput, UserTokenUncheckedCreateInput>
  }

  /**
   * UserToken createMany
   */
  export type UserTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTokens.
     */
    data: UserTokenCreateManyInput | UserTokenCreateManyInput[]
  }

  /**
   * UserToken createManyAndReturn
   */
  export type UserTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * The data used to create many UserTokens.
     */
    data: UserTokenCreateManyInput | UserTokenCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserToken update
   */
  export type UserTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a UserToken.
     */
    data: XOR<UserTokenUpdateInput, UserTokenUncheckedUpdateInput>
    /**
     * Choose, which UserToken to update.
     */
    where: UserTokenWhereUniqueInput
  }

  /**
   * UserToken updateMany
   */
  export type UserTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTokens.
     */
    data: XOR<UserTokenUpdateManyMutationInput, UserTokenUncheckedUpdateManyInput>
    /**
     * Filter which UserTokens to update
     */
    where?: UserTokenWhereInput
    /**
     * Limit how many UserTokens to update.
     */
    limit?: number
  }

  /**
   * UserToken updateManyAndReturn
   */
  export type UserTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * The data used to update UserTokens.
     */
    data: XOR<UserTokenUpdateManyMutationInput, UserTokenUncheckedUpdateManyInput>
    /**
     * Filter which UserTokens to update
     */
    where?: UserTokenWhereInput
    /**
     * Limit how many UserTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserToken upsert
   */
  export type UserTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the UserToken to update in case it exists.
     */
    where: UserTokenWhereUniqueInput
    /**
     * In case the UserToken found by the `where` argument doesn't exist, create a new UserToken with this data.
     */
    create: XOR<UserTokenCreateInput, UserTokenUncheckedCreateInput>
    /**
     * In case the UserToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTokenUpdateInput, UserTokenUncheckedUpdateInput>
  }

  /**
   * UserToken delete
   */
  export type UserTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
    /**
     * Filter which UserToken to delete.
     */
    where: UserTokenWhereUniqueInput
  }

  /**
   * UserToken deleteMany
   */
  export type UserTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTokens to delete
     */
    where?: UserTokenWhereInput
    /**
     * Limit how many UserTokens to delete.
     */
    limit?: number
  }

  /**
   * UserToken without action
   */
  export type UserTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserToken
     */
    select?: UserTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserToken
     */
    omit?: UserTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTokenInclude<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _avg: SystemConfigAvgAggregateOutputType | null
    _sum: SystemConfigSumAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type SystemConfigSumAggregateOutputType = {
    id: number | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemConfigAvgAggregateInputType = {
    id?: true
  }

  export type SystemConfigSumAggregateInputType = {
    id?: true
  }

  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _avg?: SystemConfigAvgAggregateInputType
    _sum?: SystemConfigSumAggregateInputType
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: number
    key: string
    value: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SystemConfigCountAggregateOutputType | null
    _avg: SystemConfigAvgAggregateOutputType | null
    _sum: SystemConfigSumAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["systemConfig"]>

  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      value: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemConfigs and returns the data saved in the database.
     * @param {SystemConfigCreateManyAndReturnArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs and returns the data updated in the database.
     * @param {SystemConfigUpdateManyAndReturnArgs} args - Arguments to update many SystemConfigs.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'Int'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'String'>
    readonly description: FieldRef<"SystemConfig", 'String'>
    readonly isActive: FieldRef<"SystemConfig", 'Boolean'>
    readonly createdAt: FieldRef<"SystemConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
  }

  /**
   * SystemConfig createManyAndReturn
   */
  export type SystemConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig updateManyAndReturn
   */
  export type SystemConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to delete.
     */
    limit?: number
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _avg: PasswordResetTokenAvgAggregateOutputType | null
    _sum: PasswordResetTokenSumAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type PasswordResetTokenSumAggregateOutputType = {
    id: number | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: number | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    used: number
    createdAt: number
    _all: number
  }


  export type PasswordResetTokenAvgAggregateInputType = {
    id?: true
  }

  export type PasswordResetTokenSumAggregateInputType = {
    id?: true
  }

  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordResetTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordResetTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _avg?: PasswordResetTokenAvgAggregateInputType
    _sum?: PasswordResetTokenSumAggregateInputType
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: number
    userId: string
    token: string
    expiresAt: Date
    used: boolean
    createdAt: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _avg: PasswordResetTokenAvgAggregateOutputType | null
    _sum: PasswordResetTokenSumAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "used" | "createdAt", ExtArgs["result"]["passwordResetToken"]>
  export type PasswordResetTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      token: string
      expiresAt: Date
      used: boolean
      createdAt: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'Int'>
    readonly userId: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly expiresAt: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly used: FieldRef<"PasswordResetToken", 'Boolean'>
    readonly createdAt: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
  }


  /**
   * Model EmailVerificationToken
   */

  export type AggregateEmailVerificationToken = {
    _count: EmailVerificationTokenCountAggregateOutputType | null
    _avg: EmailVerificationTokenAvgAggregateOutputType | null
    _sum: EmailVerificationTokenSumAggregateOutputType | null
    _min: EmailVerificationTokenMinAggregateOutputType | null
    _max: EmailVerificationTokenMaxAggregateOutputType | null
  }

  export type EmailVerificationTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type EmailVerificationTokenSumAggregateOutputType = {
    id: number | null
  }

  export type EmailVerificationTokenMinAggregateOutputType = {
    id: number | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type EmailVerificationTokenMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type EmailVerificationTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    used: number
    createdAt: number
    _all: number
  }


  export type EmailVerificationTokenAvgAggregateInputType = {
    id?: true
  }

  export type EmailVerificationTokenSumAggregateInputType = {
    id?: true
  }

  export type EmailVerificationTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type EmailVerificationTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type EmailVerificationTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
    _all?: true
  }

  export type EmailVerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerificationToken to aggregate.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: EmailVerificationTokenOrderByWithRelationInput | EmailVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailVerificationTokens
    **/
    _count?: true | EmailVerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailVerificationTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailVerificationTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailVerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailVerificationTokenMaxAggregateInputType
  }

  export type GetEmailVerificationTokenAggregateType<T extends EmailVerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailVerificationToken[P]>
      : GetScalarType<T[P], AggregateEmailVerificationToken[P]>
  }




  export type EmailVerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationTokenWhereInput
    orderBy?: EmailVerificationTokenOrderByWithAggregationInput | EmailVerificationTokenOrderByWithAggregationInput[]
    by: EmailVerificationTokenScalarFieldEnum[] | EmailVerificationTokenScalarFieldEnum
    having?: EmailVerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailVerificationTokenCountAggregateInputType | true
    _avg?: EmailVerificationTokenAvgAggregateInputType
    _sum?: EmailVerificationTokenSumAggregateInputType
    _min?: EmailVerificationTokenMinAggregateInputType
    _max?: EmailVerificationTokenMaxAggregateInputType
  }

  export type EmailVerificationTokenGroupByOutputType = {
    id: number
    userId: string
    token: string
    expiresAt: Date
    used: boolean
    createdAt: Date
    _count: EmailVerificationTokenCountAggregateOutputType | null
    _avg: EmailVerificationTokenAvgAggregateOutputType | null
    _sum: EmailVerificationTokenSumAggregateOutputType | null
    _min: EmailVerificationTokenMinAggregateOutputType | null
    _max: EmailVerificationTokenMaxAggregateOutputType | null
  }

  type GetEmailVerificationTokenGroupByPayload<T extends EmailVerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailVerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailVerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailVerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], EmailVerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type EmailVerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerificationToken"]>

  export type EmailVerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerificationToken"]>

  export type EmailVerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerificationToken"]>

  export type EmailVerificationTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
  }

  export type EmailVerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "used" | "createdAt", ExtArgs["result"]["emailVerificationToken"]>
  export type EmailVerificationTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailVerificationTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailVerificationTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmailVerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailVerificationToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      token: string
      expiresAt: Date
      used: boolean
      createdAt: Date
    }, ExtArgs["result"]["emailVerificationToken"]>
    composites: {}
  }

  type EmailVerificationTokenGetPayload<S extends boolean | null | undefined | EmailVerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$EmailVerificationTokenPayload, S>

  type EmailVerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailVerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailVerificationTokenCountAggregateInputType | true
    }

  export interface EmailVerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerificationToken'], meta: { name: 'EmailVerificationToken' } }
    /**
     * Find zero or one EmailVerificationToken that matches the filter.
     * @param {EmailVerificationTokenFindUniqueArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailVerificationTokenFindUniqueArgs>(args: SelectSubset<T, EmailVerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailVerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailVerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailVerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailVerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenFindFirstArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailVerificationTokenFindFirstArgs>(args?: SelectSubset<T, EmailVerificationTokenFindFirstArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailVerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenFindFirstOrThrowArgs} args - Arguments to find a EmailVerificationToken
     * @example
     * // Get one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailVerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailVerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailVerificationTokens
     * const emailVerificationTokens = await prisma.emailVerificationToken.findMany()
     * 
     * // Get first 10 EmailVerificationTokens
     * const emailVerificationTokens = await prisma.emailVerificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailVerificationTokenWithIdOnly = await prisma.emailVerificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailVerificationTokenFindManyArgs>(args?: SelectSubset<T, EmailVerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailVerificationToken.
     * @param {EmailVerificationTokenCreateArgs} args - Arguments to create a EmailVerificationToken.
     * @example
     * // Create one EmailVerificationToken
     * const EmailVerificationToken = await prisma.emailVerificationToken.create({
     *   data: {
     *     // ... data to create a EmailVerificationToken
     *   }
     * })
     * 
     */
    create<T extends EmailVerificationTokenCreateArgs>(args: SelectSubset<T, EmailVerificationTokenCreateArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailVerificationTokens.
     * @param {EmailVerificationTokenCreateManyArgs} args - Arguments to create many EmailVerificationTokens.
     * @example
     * // Create many EmailVerificationTokens
     * const emailVerificationToken = await prisma.emailVerificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailVerificationTokenCreateManyArgs>(args?: SelectSubset<T, EmailVerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailVerificationTokens and returns the data saved in the database.
     * @param {EmailVerificationTokenCreateManyAndReturnArgs} args - Arguments to create many EmailVerificationTokens.
     * @example
     * // Create many EmailVerificationTokens
     * const emailVerificationToken = await prisma.emailVerificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailVerificationTokens and only return the `id`
     * const emailVerificationTokenWithIdOnly = await prisma.emailVerificationToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailVerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailVerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailVerificationToken.
     * @param {EmailVerificationTokenDeleteArgs} args - Arguments to delete one EmailVerificationToken.
     * @example
     * // Delete one EmailVerificationToken
     * const EmailVerificationToken = await prisma.emailVerificationToken.delete({
     *   where: {
     *     // ... filter to delete one EmailVerificationToken
     *   }
     * })
     * 
     */
    delete<T extends EmailVerificationTokenDeleteArgs>(args: SelectSubset<T, EmailVerificationTokenDeleteArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailVerificationToken.
     * @param {EmailVerificationTokenUpdateArgs} args - Arguments to update one EmailVerificationToken.
     * @example
     * // Update one EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailVerificationTokenUpdateArgs>(args: SelectSubset<T, EmailVerificationTokenUpdateArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailVerificationTokens.
     * @param {EmailVerificationTokenDeleteManyArgs} args - Arguments to filter EmailVerificationTokens to delete.
     * @example
     * // Delete a few EmailVerificationTokens
     * const { count } = await prisma.emailVerificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailVerificationTokenDeleteManyArgs>(args?: SelectSubset<T, EmailVerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailVerificationTokens
     * const emailVerificationToken = await prisma.emailVerificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailVerificationTokenUpdateManyArgs>(args: SelectSubset<T, EmailVerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerificationTokens and returns the data updated in the database.
     * @param {EmailVerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many EmailVerificationTokens.
     * @example
     * // Update many EmailVerificationTokens
     * const emailVerificationToken = await prisma.emailVerificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailVerificationTokens and only return the `id`
     * const emailVerificationTokenWithIdOnly = await prisma.emailVerificationToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailVerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailVerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailVerificationToken.
     * @param {EmailVerificationTokenUpsertArgs} args - Arguments to update or create a EmailVerificationToken.
     * @example
     * // Update or create a EmailVerificationToken
     * const emailVerificationToken = await prisma.emailVerificationToken.upsert({
     *   create: {
     *     // ... data to create a EmailVerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailVerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends EmailVerificationTokenUpsertArgs>(args: SelectSubset<T, EmailVerificationTokenUpsertArgs<ExtArgs>>): Prisma__EmailVerificationTokenClient<$Result.GetResult<Prisma.$EmailVerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailVerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenCountArgs} args - Arguments to filter EmailVerificationTokens to count.
     * @example
     * // Count the number of EmailVerificationTokens
     * const count = await prisma.emailVerificationToken.count({
     *   where: {
     *     // ... the filter for the EmailVerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends EmailVerificationTokenCountArgs>(
      args?: Subset<T, EmailVerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailVerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailVerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailVerificationTokenAggregateArgs>(args: Subset<T, EmailVerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationTokenAggregateType<T>>

    /**
     * Group by EmailVerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailVerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailVerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: EmailVerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailVerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailVerificationToken model
   */
  readonly fields: EmailVerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailVerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailVerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailVerificationToken model
   */
  interface EmailVerificationTokenFieldRefs {
    readonly id: FieldRef<"EmailVerificationToken", 'Int'>
    readonly userId: FieldRef<"EmailVerificationToken", 'String'>
    readonly token: FieldRef<"EmailVerificationToken", 'String'>
    readonly expiresAt: FieldRef<"EmailVerificationToken", 'DateTime'>
    readonly used: FieldRef<"EmailVerificationToken", 'Boolean'>
    readonly createdAt: FieldRef<"EmailVerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailVerificationToken findUnique
   */
  export type EmailVerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }

  /**
   * EmailVerificationToken findUniqueOrThrow
   */
  export type EmailVerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }

  /**
   * EmailVerificationToken findFirst
   */
  export type EmailVerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: EmailVerificationTokenOrderByWithRelationInput | EmailVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerificationTokens.
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerificationTokens.
     */
    distinct?: EmailVerificationTokenScalarFieldEnum | EmailVerificationTokenScalarFieldEnum[]
  }

  /**
   * EmailVerificationToken findFirstOrThrow
   */
  export type EmailVerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationToken to fetch.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: EmailVerificationTokenOrderByWithRelationInput | EmailVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerificationTokens.
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerificationTokens.
     */
    distinct?: EmailVerificationTokenScalarFieldEnum | EmailVerificationTokenScalarFieldEnum[]
  }

  /**
   * EmailVerificationToken findMany
   */
  export type EmailVerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerificationTokens to fetch.
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerificationTokens to fetch.
     */
    orderBy?: EmailVerificationTokenOrderByWithRelationInput | EmailVerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailVerificationTokens.
     */
    cursor?: EmailVerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerificationTokens.
     */
    skip?: number
    distinct?: EmailVerificationTokenScalarFieldEnum | EmailVerificationTokenScalarFieldEnum[]
  }

  /**
   * EmailVerificationToken create
   */
  export type EmailVerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailVerificationToken.
     */
    data: XOR<EmailVerificationTokenCreateInput, EmailVerificationTokenUncheckedCreateInput>
  }

  /**
   * EmailVerificationToken createMany
   */
  export type EmailVerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailVerificationTokens.
     */
    data: EmailVerificationTokenCreateManyInput | EmailVerificationTokenCreateManyInput[]
  }

  /**
   * EmailVerificationToken createManyAndReturn
   */
  export type EmailVerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many EmailVerificationTokens.
     */
    data: EmailVerificationTokenCreateManyInput | EmailVerificationTokenCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailVerificationToken update
   */
  export type EmailVerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailVerificationToken.
     */
    data: XOR<EmailVerificationTokenUpdateInput, EmailVerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which EmailVerificationToken to update.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }

  /**
   * EmailVerificationToken updateMany
   */
  export type EmailVerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailVerificationTokens.
     */
    data: XOR<EmailVerificationTokenUpdateManyMutationInput, EmailVerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerificationTokens to update
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * Limit how many EmailVerificationTokens to update.
     */
    limit?: number
  }

  /**
   * EmailVerificationToken updateManyAndReturn
   */
  export type EmailVerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update EmailVerificationTokens.
     */
    data: XOR<EmailVerificationTokenUpdateManyMutationInput, EmailVerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerificationTokens to update
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * Limit how many EmailVerificationTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailVerificationToken upsert
   */
  export type EmailVerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailVerificationToken to update in case it exists.
     */
    where: EmailVerificationTokenWhereUniqueInput
    /**
     * In case the EmailVerificationToken found by the `where` argument doesn't exist, create a new EmailVerificationToken with this data.
     */
    create: XOR<EmailVerificationTokenCreateInput, EmailVerificationTokenUncheckedCreateInput>
    /**
     * In case the EmailVerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailVerificationTokenUpdateInput, EmailVerificationTokenUncheckedUpdateInput>
  }

  /**
   * EmailVerificationToken delete
   */
  export type EmailVerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
    /**
     * Filter which EmailVerificationToken to delete.
     */
    where: EmailVerificationTokenWhereUniqueInput
  }

  /**
   * EmailVerificationToken deleteMany
   */
  export type EmailVerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerificationTokens to delete
     */
    where?: EmailVerificationTokenWhereInput
    /**
     * Limit how many EmailVerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * EmailVerificationToken without action
   */
  export type EmailVerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerificationToken
     */
    select?: EmailVerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerificationToken
     */
    omit?: EmailVerificationTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationTokenInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    valor: number | null
    desconto: number | null
    taxaAdicional: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    valor: number | null
    desconto: number | null
    taxaAdicional: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    numero: string | null
    periodo: string | null
    valor: number | null
    descricao: string | null
    status: string | null
    dataCriacao: Date | null
    dataVencimento: Date | null
    dataPagamento: Date | null
    metodoPagamento: string | null
    desconto: number | null
    taxaAdicional: number | null
    plano: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    numero: string | null
    periodo: string | null
    valor: number | null
    descricao: string | null
    status: string | null
    dataCriacao: Date | null
    dataVencimento: Date | null
    dataPagamento: Date | null
    metodoPagamento: string | null
    desconto: number | null
    taxaAdicional: number | null
    plano: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    tenantId: number
    numero: number
    periodo: number
    valor: number
    descricao: number
    status: number
    dataCriacao: number
    dataVencimento: number
    dataPagamento: number
    metodoPagamento: number
    desconto: number
    taxaAdicional: number
    plano: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    valor?: true
    desconto?: true
    taxaAdicional?: true
  }

  export type InvoiceSumAggregateInputType = {
    valor?: true
    desconto?: true
    taxaAdicional?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    tenantId?: true
    numero?: true
    periodo?: true
    valor?: true
    descricao?: true
    status?: true
    dataCriacao?: true
    dataVencimento?: true
    dataPagamento?: true
    metodoPagamento?: true
    desconto?: true
    taxaAdicional?: true
    plano?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    tenantId?: true
    numero?: true
    periodo?: true
    valor?: true
    descricao?: true
    status?: true
    dataCriacao?: true
    dataVencimento?: true
    dataPagamento?: true
    metodoPagamento?: true
    desconto?: true
    taxaAdicional?: true
    plano?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    tenantId?: true
    numero?: true
    periodo?: true
    valor?: true
    descricao?: true
    status?: true
    dataCriacao?: true
    dataVencimento?: true
    dataPagamento?: true
    metodoPagamento?: true
    desconto?: true
    taxaAdicional?: true
    plano?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: string
    tenantId: string
    numero: string
    periodo: string
    valor: number
    descricao: string | null
    status: string
    dataCriacao: Date
    dataVencimento: Date
    dataPagamento: Date | null
    metodoPagamento: string | null
    desconto: number
    taxaAdicional: number
    plano: string
    createdAt: Date
    updatedAt: Date
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    numero?: boolean
    periodo?: boolean
    valor?: boolean
    descricao?: boolean
    status?: boolean
    dataCriacao?: boolean
    dataVencimento?: boolean
    dataPagamento?: boolean
    metodoPagamento?: boolean
    desconto?: boolean
    taxaAdicional?: boolean
    plano?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    itens?: boolean | Invoice$itensArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    numero?: boolean
    periodo?: boolean
    valor?: boolean
    descricao?: boolean
    status?: boolean
    dataCriacao?: boolean
    dataVencimento?: boolean
    dataPagamento?: boolean
    metodoPagamento?: boolean
    desconto?: boolean
    taxaAdicional?: boolean
    plano?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    numero?: boolean
    periodo?: boolean
    valor?: boolean
    descricao?: boolean
    status?: boolean
    dataCriacao?: boolean
    dataVencimento?: boolean
    dataPagamento?: boolean
    metodoPagamento?: boolean
    desconto?: boolean
    taxaAdicional?: boolean
    plano?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    tenantId?: boolean
    numero?: boolean
    periodo?: boolean
    valor?: boolean
    descricao?: boolean
    status?: boolean
    dataCriacao?: boolean
    dataVencimento?: boolean
    dataPagamento?: boolean
    metodoPagamento?: boolean
    desconto?: boolean
    taxaAdicional?: boolean
    plano?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "numero" | "periodo" | "valor" | "descricao" | "status" | "dataCriacao" | "dataVencimento" | "dataPagamento" | "metodoPagamento" | "desconto" | "taxaAdicional" | "plano" | "createdAt" | "updatedAt", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    itens?: boolean | Invoice$itensArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      itens: Prisma.$InvoiceItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      numero: string
      periodo: string
      valor: number
      descricao: string | null
      status: string
      dataCriacao: Date
      dataVencimento: Date
      dataPagamento: Date | null
      metodoPagamento: string | null
      desconto: number
      taxaAdicional: number
      plano: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    itens<T extends Invoice$itensArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$itensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'String'>
    readonly tenantId: FieldRef<"Invoice", 'String'>
    readonly numero: FieldRef<"Invoice", 'String'>
    readonly periodo: FieldRef<"Invoice", 'String'>
    readonly valor: FieldRef<"Invoice", 'Float'>
    readonly descricao: FieldRef<"Invoice", 'String'>
    readonly status: FieldRef<"Invoice", 'String'>
    readonly dataCriacao: FieldRef<"Invoice", 'DateTime'>
    readonly dataVencimento: FieldRef<"Invoice", 'DateTime'>
    readonly dataPagamento: FieldRef<"Invoice", 'DateTime'>
    readonly metodoPagamento: FieldRef<"Invoice", 'String'>
    readonly desconto: FieldRef<"Invoice", 'Float'>
    readonly taxaAdicional: FieldRef<"Invoice", 'Float'>
    readonly plano: FieldRef<"Invoice", 'String'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly updatedAt: FieldRef<"Invoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice.itens
   */
  export type Invoice$itensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    cursor?: InvoiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model InvoiceItem
   */

  export type AggregateInvoiceItem = {
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  export type InvoiceItemAvgAggregateOutputType = {
    id: number | null
    quantidade: number | null
    valorUnitario: number | null
    valorTotal: number | null
  }

  export type InvoiceItemSumAggregateOutputType = {
    id: number | null
    quantidade: number | null
    valorUnitario: number | null
    valorTotal: number | null
  }

  export type InvoiceItemMinAggregateOutputType = {
    id: number | null
    invoiceId: string | null
    descricao: string | null
    quantidade: number | null
    valorUnitario: number | null
    valorTotal: number | null
    tipo: string | null
    createdAt: Date | null
  }

  export type InvoiceItemMaxAggregateOutputType = {
    id: number | null
    invoiceId: string | null
    descricao: string | null
    quantidade: number | null
    valorUnitario: number | null
    valorTotal: number | null
    tipo: string | null
    createdAt: Date | null
  }

  export type InvoiceItemCountAggregateOutputType = {
    id: number
    invoiceId: number
    descricao: number
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: number
    createdAt: number
    _all: number
  }


  export type InvoiceItemAvgAggregateInputType = {
    id?: true
    quantidade?: true
    valorUnitario?: true
    valorTotal?: true
  }

  export type InvoiceItemSumAggregateInputType = {
    id?: true
    quantidade?: true
    valorUnitario?: true
    valorTotal?: true
  }

  export type InvoiceItemMinAggregateInputType = {
    id?: true
    invoiceId?: true
    descricao?: true
    quantidade?: true
    valorUnitario?: true
    valorTotal?: true
    tipo?: true
    createdAt?: true
  }

  export type InvoiceItemMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    descricao?: true
    quantidade?: true
    valorUnitario?: true
    valorTotal?: true
    tipo?: true
    createdAt?: true
  }

  export type InvoiceItemCountAggregateInputType = {
    id?: true
    invoiceId?: true
    descricao?: true
    quantidade?: true
    valorUnitario?: true
    valorTotal?: true
    tipo?: true
    createdAt?: true
    _all?: true
  }

  export type InvoiceItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItem to aggregate.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceItems
    **/
    _count?: true | InvoiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type GetInvoiceItemAggregateType<T extends InvoiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceItem[P]>
      : GetScalarType<T[P], AggregateInvoiceItem[P]>
  }




  export type InvoiceItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceItemWhereInput
    orderBy?: InvoiceItemOrderByWithAggregationInput | InvoiceItemOrderByWithAggregationInput[]
    by: InvoiceItemScalarFieldEnum[] | InvoiceItemScalarFieldEnum
    having?: InvoiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceItemCountAggregateInputType | true
    _avg?: InvoiceItemAvgAggregateInputType
    _sum?: InvoiceItemSumAggregateInputType
    _min?: InvoiceItemMinAggregateInputType
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type InvoiceItemGroupByOutputType = {
    id: number
    invoiceId: string
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt: Date
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  type GetInvoiceItemGroupByPayload<T extends InvoiceItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    descricao?: boolean
    quantidade?: boolean
    valorUnitario?: boolean
    valorTotal?: boolean
    tipo?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    descricao?: boolean
    quantidade?: boolean
    valorUnitario?: boolean
    valorTotal?: boolean
    tipo?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invoiceId?: boolean
    descricao?: boolean
    quantidade?: boolean
    valorUnitario?: boolean
    valorTotal?: boolean
    tipo?: boolean
    createdAt?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceItem"]>

  export type InvoiceItemSelectScalar = {
    id?: boolean
    invoiceId?: boolean
    descricao?: boolean
    quantidade?: boolean
    valorUnitario?: boolean
    valorTotal?: boolean
    tipo?: boolean
    createdAt?: boolean
  }

  export type InvoiceItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invoiceId" | "descricao" | "quantidade" | "valorUnitario" | "valorTotal" | "tipo" | "createdAt", ExtArgs["result"]["invoiceItem"]>
  export type InvoiceItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }
  export type InvoiceItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }

  export type $InvoiceItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoiceItem"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      invoiceId: string
      descricao: string
      quantidade: number
      valorUnitario: number
      valorTotal: number
      tipo: string
      createdAt: Date
    }, ExtArgs["result"]["invoiceItem"]>
    composites: {}
  }

  type InvoiceItemGetPayload<S extends boolean | null | undefined | InvoiceItemDefaultArgs> = $Result.GetResult<Prisma.$InvoiceItemPayload, S>

  type InvoiceItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceItemCountAggregateInputType | true
    }

  export interface InvoiceItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoiceItem'], meta: { name: 'InvoiceItem' } }
    /**
     * Find zero or one InvoiceItem that matches the filter.
     * @param {InvoiceItemFindUniqueArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceItemFindUniqueArgs>(args: SelectSubset<T, InvoiceItemFindUniqueArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InvoiceItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceItemFindUniqueOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceItemFindFirstArgs>(args?: SelectSubset<T, InvoiceItemFindFirstArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvoiceItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstOrThrowArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InvoiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany()
     * 
     * // Get first 10 InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceItemFindManyArgs>(args?: SelectSubset<T, InvoiceItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InvoiceItem.
     * @param {InvoiceItemCreateArgs} args - Arguments to create a InvoiceItem.
     * @example
     * // Create one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.create({
     *   data: {
     *     // ... data to create a InvoiceItem
     *   }
     * })
     * 
     */
    create<T extends InvoiceItemCreateArgs>(args: SelectSubset<T, InvoiceItemCreateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InvoiceItems.
     * @param {InvoiceItemCreateManyArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceItemCreateManyArgs>(args?: SelectSubset<T, InvoiceItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvoiceItems and returns the data saved in the database.
     * @param {InvoiceItemCreateManyAndReturnArgs} args - Arguments to create many InvoiceItems.
     * @example
     * // Create many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InvoiceItem.
     * @param {InvoiceItemDeleteArgs} args - Arguments to delete one InvoiceItem.
     * @example
     * // Delete one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.delete({
     *   where: {
     *     // ... filter to delete one InvoiceItem
     *   }
     * })
     * 
     */
    delete<T extends InvoiceItemDeleteArgs>(args: SelectSubset<T, InvoiceItemDeleteArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InvoiceItem.
     * @param {InvoiceItemUpdateArgs} args - Arguments to update one InvoiceItem.
     * @example
     * // Update one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceItemUpdateArgs>(args: SelectSubset<T, InvoiceItemUpdateArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InvoiceItems.
     * @param {InvoiceItemDeleteManyArgs} args - Arguments to filter InvoiceItems to delete.
     * @example
     * // Delete a few InvoiceItems
     * const { count } = await prisma.invoiceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceItemDeleteManyArgs>(args?: SelectSubset<T, InvoiceItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceItemUpdateManyArgs>(args: SelectSubset<T, InvoiceItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems and returns the data updated in the database.
     * @param {InvoiceItemUpdateManyAndReturnArgs} args - Arguments to update many InvoiceItems.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InvoiceItems and only return the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InvoiceItem.
     * @param {InvoiceItemUpsertArgs} args - Arguments to update or create a InvoiceItem.
     * @example
     * // Update or create a InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.upsert({
     *   create: {
     *     // ... data to create a InvoiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceItem we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceItemUpsertArgs>(args: SelectSubset<T, InvoiceItemUpsertArgs<ExtArgs>>): Prisma__InvoiceItemClient<$Result.GetResult<Prisma.$InvoiceItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemCountArgs} args - Arguments to filter InvoiceItems to count.
     * @example
     * // Count the number of InvoiceItems
     * const count = await prisma.invoiceItem.count({
     *   where: {
     *     // ... the filter for the InvoiceItems we want to count
     *   }
     * })
    **/
    count<T extends InvoiceItemCountArgs>(
      args?: Subset<T, InvoiceItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceItemAggregateArgs>(args: Subset<T, InvoiceItemAggregateArgs>): Prisma.PrismaPromise<GetInvoiceItemAggregateType<T>>

    /**
     * Group by InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceItemGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoiceItem model
   */
  readonly fields: InvoiceItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvoiceItem model
   */
  interface InvoiceItemFieldRefs {
    readonly id: FieldRef<"InvoiceItem", 'Int'>
    readonly invoiceId: FieldRef<"InvoiceItem", 'String'>
    readonly descricao: FieldRef<"InvoiceItem", 'String'>
    readonly quantidade: FieldRef<"InvoiceItem", 'Int'>
    readonly valorUnitario: FieldRef<"InvoiceItem", 'Float'>
    readonly valorTotal: FieldRef<"InvoiceItem", 'Float'>
    readonly tipo: FieldRef<"InvoiceItem", 'String'>
    readonly createdAt: FieldRef<"InvoiceItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InvoiceItem findUnique
   */
  export type InvoiceItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findUniqueOrThrow
   */
  export type InvoiceItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem findFirst
   */
  export type InvoiceItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findFirstOrThrow
   */
  export type InvoiceItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItem to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     */
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem findMany
   */
  export type InvoiceItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceItems to fetch.
     */
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     */
    orderBy?: InvoiceItemOrderByWithRelationInput | InvoiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceItems.
     */
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     */
    skip?: number
    distinct?: InvoiceItemScalarFieldEnum | InvoiceItemScalarFieldEnum[]
  }

  /**
   * InvoiceItem create
   */
  export type InvoiceItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InvoiceItem.
     */
    data: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
  }

  /**
   * InvoiceItem createMany
   */
  export type InvoiceItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
  }

  /**
   * InvoiceItem createManyAndReturn
   */
  export type InvoiceItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to create many InvoiceItems.
     */
    data: InvoiceItemCreateManyInput | InvoiceItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem update
   */
  export type InvoiceItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InvoiceItem.
     */
    data: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
    /**
     * Choose, which InvoiceItem to update.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem updateMany
   */
  export type InvoiceItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
  }

  /**
   * InvoiceItem updateManyAndReturn
   */
  export type InvoiceItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * The data used to update InvoiceItems.
     */
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvoiceItem upsert
   */
  export type InvoiceItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InvoiceItem to update in case it exists.
     */
    where: InvoiceItemWhereUniqueInput
    /**
     * In case the InvoiceItem found by the `where` argument doesn't exist, create a new InvoiceItem with this data.
     */
    create: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
    /**
     * In case the InvoiceItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
  }

  /**
   * InvoiceItem delete
   */
  export type InvoiceItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
    /**
     * Filter which InvoiceItem to delete.
     */
    where: InvoiceItemWhereUniqueInput
  }

  /**
   * InvoiceItem deleteMany
   */
  export type InvoiceItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceItems to delete
     */
    where?: InvoiceItemWhereInput
    /**
     * Limit how many InvoiceItems to delete.
     */
    limit?: number
  }

  /**
   * InvoiceItem without action
   */
  export type InvoiceItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     */
    select?: InvoiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvoiceItem
     */
    omit?: InvoiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceItemInclude<ExtArgs> | null
  }


  /**
   * Model BillingMetrics
   */

  export type AggregateBillingMetrics = {
    _count: BillingMetricsCountAggregateOutputType | null
    _avg: BillingMetricsAvgAggregateOutputType | null
    _sum: BillingMetricsSumAggregateOutputType | null
    _min: BillingMetricsMinAggregateOutputType | null
    _max: BillingMetricsMaxAggregateOutputType | null
  }

  export type BillingMetricsAvgAggregateOutputType = {
    id: number | null
    mrr: number | null
    arr: number | null
    churnRate: number | null
    arpu: number | null
    ltv: number | null
    cac: number | null
    receitaMensal: number | null
    faturasPendentes: number | null
    valorPendente: number | null
    faturasVencidas: number | null
    valorVencido: number | null
    taxaCobranca: number | null
  }

  export type BillingMetricsSumAggregateOutputType = {
    id: number | null
    mrr: number | null
    arr: number | null
    churnRate: number | null
    arpu: number | null
    ltv: number | null
    cac: number | null
    receitaMensal: number | null
    faturasPendentes: number | null
    valorPendente: number | null
    faturasVencidas: number | null
    valorVencido: number | null
    taxaCobranca: number | null
  }

  export type BillingMetricsMinAggregateOutputType = {
    id: number | null
    periodo: string | null
    mrr: number | null
    arr: number | null
    churnRate: number | null
    arpu: number | null
    ltv: number | null
    cac: number | null
    receitaMensal: number | null
    faturasPendentes: number | null
    valorPendente: number | null
    faturasVencidas: number | null
    valorVencido: number | null
    taxaCobranca: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingMetricsMaxAggregateOutputType = {
    id: number | null
    periodo: string | null
    mrr: number | null
    arr: number | null
    churnRate: number | null
    arpu: number | null
    ltv: number | null
    cac: number | null
    receitaMensal: number | null
    faturasPendentes: number | null
    valorPendente: number | null
    faturasVencidas: number | null
    valorVencido: number | null
    taxaCobranca: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingMetricsCountAggregateOutputType = {
    id: number
    periodo: number
    mrr: number
    arr: number
    churnRate: number
    arpu: number
    ltv: number
    cac: number
    receitaMensal: number
    faturasPendentes: number
    valorPendente: number
    faturasVencidas: number
    valorVencido: number
    taxaCobranca: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BillingMetricsAvgAggregateInputType = {
    id?: true
    mrr?: true
    arr?: true
    churnRate?: true
    arpu?: true
    ltv?: true
    cac?: true
    receitaMensal?: true
    faturasPendentes?: true
    valorPendente?: true
    faturasVencidas?: true
    valorVencido?: true
    taxaCobranca?: true
  }

  export type BillingMetricsSumAggregateInputType = {
    id?: true
    mrr?: true
    arr?: true
    churnRate?: true
    arpu?: true
    ltv?: true
    cac?: true
    receitaMensal?: true
    faturasPendentes?: true
    valorPendente?: true
    faturasVencidas?: true
    valorVencido?: true
    taxaCobranca?: true
  }

  export type BillingMetricsMinAggregateInputType = {
    id?: true
    periodo?: true
    mrr?: true
    arr?: true
    churnRate?: true
    arpu?: true
    ltv?: true
    cac?: true
    receitaMensal?: true
    faturasPendentes?: true
    valorPendente?: true
    faturasVencidas?: true
    valorVencido?: true
    taxaCobranca?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingMetricsMaxAggregateInputType = {
    id?: true
    periodo?: true
    mrr?: true
    arr?: true
    churnRate?: true
    arpu?: true
    ltv?: true
    cac?: true
    receitaMensal?: true
    faturasPendentes?: true
    valorPendente?: true
    faturasVencidas?: true
    valorVencido?: true
    taxaCobranca?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingMetricsCountAggregateInputType = {
    id?: true
    periodo?: true
    mrr?: true
    arr?: true
    churnRate?: true
    arpu?: true
    ltv?: true
    cac?: true
    receitaMensal?: true
    faturasPendentes?: true
    valorPendente?: true
    faturasVencidas?: true
    valorVencido?: true
    taxaCobranca?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BillingMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingMetrics to aggregate.
     */
    where?: BillingMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingMetrics to fetch.
     */
    orderBy?: BillingMetricsOrderByWithRelationInput | BillingMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingMetrics
    **/
    _count?: true | BillingMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingMetricsMaxAggregateInputType
  }

  export type GetBillingMetricsAggregateType<T extends BillingMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingMetrics[P]>
      : GetScalarType<T[P], AggregateBillingMetrics[P]>
  }




  export type BillingMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingMetricsWhereInput
    orderBy?: BillingMetricsOrderByWithAggregationInput | BillingMetricsOrderByWithAggregationInput[]
    by: BillingMetricsScalarFieldEnum[] | BillingMetricsScalarFieldEnum
    having?: BillingMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingMetricsCountAggregateInputType | true
    _avg?: BillingMetricsAvgAggregateInputType
    _sum?: BillingMetricsSumAggregateInputType
    _min?: BillingMetricsMinAggregateInputType
    _max?: BillingMetricsMaxAggregateInputType
  }

  export type BillingMetricsGroupByOutputType = {
    id: number
    periodo: string
    mrr: number
    arr: number
    churnRate: number | null
    arpu: number | null
    ltv: number | null
    cac: number | null
    receitaMensal: number
    faturasPendentes: number
    valorPendente: number
    faturasVencidas: number
    valorVencido: number
    taxaCobranca: number | null
    createdAt: Date
    updatedAt: Date
    _count: BillingMetricsCountAggregateOutputType | null
    _avg: BillingMetricsAvgAggregateOutputType | null
    _sum: BillingMetricsSumAggregateOutputType | null
    _min: BillingMetricsMinAggregateOutputType | null
    _max: BillingMetricsMaxAggregateOutputType | null
  }

  type GetBillingMetricsGroupByPayload<T extends BillingMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], BillingMetricsGroupByOutputType[P]>
        }
      >
    >


  export type BillingMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    periodo?: boolean
    mrr?: boolean
    arr?: boolean
    churnRate?: boolean
    arpu?: boolean
    ltv?: boolean
    cac?: boolean
    receitaMensal?: boolean
    faturasPendentes?: boolean
    valorPendente?: boolean
    faturasVencidas?: boolean
    valorVencido?: boolean
    taxaCobranca?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billingMetrics"]>

  export type BillingMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    periodo?: boolean
    mrr?: boolean
    arr?: boolean
    churnRate?: boolean
    arpu?: boolean
    ltv?: boolean
    cac?: boolean
    receitaMensal?: boolean
    faturasPendentes?: boolean
    valorPendente?: boolean
    faturasVencidas?: boolean
    valorVencido?: boolean
    taxaCobranca?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billingMetrics"]>

  export type BillingMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    periodo?: boolean
    mrr?: boolean
    arr?: boolean
    churnRate?: boolean
    arpu?: boolean
    ltv?: boolean
    cac?: boolean
    receitaMensal?: boolean
    faturasPendentes?: boolean
    valorPendente?: boolean
    faturasVencidas?: boolean
    valorVencido?: boolean
    taxaCobranca?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billingMetrics"]>

  export type BillingMetricsSelectScalar = {
    id?: boolean
    periodo?: boolean
    mrr?: boolean
    arr?: boolean
    churnRate?: boolean
    arpu?: boolean
    ltv?: boolean
    cac?: boolean
    receitaMensal?: boolean
    faturasPendentes?: boolean
    valorPendente?: boolean
    faturasVencidas?: boolean
    valorVencido?: boolean
    taxaCobranca?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BillingMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "periodo" | "mrr" | "arr" | "churnRate" | "arpu" | "ltv" | "cac" | "receitaMensal" | "faturasPendentes" | "valorPendente" | "faturasVencidas" | "valorVencido" | "taxaCobranca" | "createdAt" | "updatedAt", ExtArgs["result"]["billingMetrics"]>

  export type $BillingMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingMetrics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      periodo: string
      mrr: number
      arr: number
      churnRate: number | null
      arpu: number | null
      ltv: number | null
      cac: number | null
      receitaMensal: number
      faturasPendentes: number
      valorPendente: number
      faturasVencidas: number
      valorVencido: number
      taxaCobranca: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["billingMetrics"]>
    composites: {}
  }

  type BillingMetricsGetPayload<S extends boolean | null | undefined | BillingMetricsDefaultArgs> = $Result.GetResult<Prisma.$BillingMetricsPayload, S>

  type BillingMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BillingMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BillingMetricsCountAggregateInputType | true
    }

  export interface BillingMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingMetrics'], meta: { name: 'BillingMetrics' } }
    /**
     * Find zero or one BillingMetrics that matches the filter.
     * @param {BillingMetricsFindUniqueArgs} args - Arguments to find a BillingMetrics
     * @example
     * // Get one BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingMetricsFindUniqueArgs>(args: SelectSubset<T, BillingMetricsFindUniqueArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BillingMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BillingMetricsFindUniqueOrThrowArgs} args - Arguments to find a BillingMetrics
     * @example
     * // Get one BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BillingMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsFindFirstArgs} args - Arguments to find a BillingMetrics
     * @example
     * // Get one BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingMetricsFindFirstArgs>(args?: SelectSubset<T, BillingMetricsFindFirstArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BillingMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsFindFirstOrThrowArgs} args - Arguments to find a BillingMetrics
     * @example
     * // Get one BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BillingMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.findMany()
     * 
     * // Get first 10 BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingMetricsWithIdOnly = await prisma.billingMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingMetricsFindManyArgs>(args?: SelectSubset<T, BillingMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BillingMetrics.
     * @param {BillingMetricsCreateArgs} args - Arguments to create a BillingMetrics.
     * @example
     * // Create one BillingMetrics
     * const BillingMetrics = await prisma.billingMetrics.create({
     *   data: {
     *     // ... data to create a BillingMetrics
     *   }
     * })
     * 
     */
    create<T extends BillingMetricsCreateArgs>(args: SelectSubset<T, BillingMetricsCreateArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BillingMetrics.
     * @param {BillingMetricsCreateManyArgs} args - Arguments to create many BillingMetrics.
     * @example
     * // Create many BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingMetricsCreateManyArgs>(args?: SelectSubset<T, BillingMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillingMetrics and returns the data saved in the database.
     * @param {BillingMetricsCreateManyAndReturnArgs} args - Arguments to create many BillingMetrics.
     * @example
     * // Create many BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillingMetrics and only return the `id`
     * const billingMetricsWithIdOnly = await prisma.billingMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BillingMetrics.
     * @param {BillingMetricsDeleteArgs} args - Arguments to delete one BillingMetrics.
     * @example
     * // Delete one BillingMetrics
     * const BillingMetrics = await prisma.billingMetrics.delete({
     *   where: {
     *     // ... filter to delete one BillingMetrics
     *   }
     * })
     * 
     */
    delete<T extends BillingMetricsDeleteArgs>(args: SelectSubset<T, BillingMetricsDeleteArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BillingMetrics.
     * @param {BillingMetricsUpdateArgs} args - Arguments to update one BillingMetrics.
     * @example
     * // Update one BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingMetricsUpdateArgs>(args: SelectSubset<T, BillingMetricsUpdateArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BillingMetrics.
     * @param {BillingMetricsDeleteManyArgs} args - Arguments to filter BillingMetrics to delete.
     * @example
     * // Delete a few BillingMetrics
     * const { count } = await prisma.billingMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingMetricsDeleteManyArgs>(args?: SelectSubset<T, BillingMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingMetricsUpdateManyArgs>(args: SelectSubset<T, BillingMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingMetrics and returns the data updated in the database.
     * @param {BillingMetricsUpdateManyAndReturnArgs} args - Arguments to update many BillingMetrics.
     * @example
     * // Update many BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BillingMetrics and only return the `id`
     * const billingMetricsWithIdOnly = await prisma.billingMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BillingMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, BillingMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BillingMetrics.
     * @param {BillingMetricsUpsertArgs} args - Arguments to update or create a BillingMetrics.
     * @example
     * // Update or create a BillingMetrics
     * const billingMetrics = await prisma.billingMetrics.upsert({
     *   create: {
     *     // ... data to create a BillingMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingMetrics we want to update
     *   }
     * })
     */
    upsert<T extends BillingMetricsUpsertArgs>(args: SelectSubset<T, BillingMetricsUpsertArgs<ExtArgs>>): Prisma__BillingMetricsClient<$Result.GetResult<Prisma.$BillingMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BillingMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsCountArgs} args - Arguments to filter BillingMetrics to count.
     * @example
     * // Count the number of BillingMetrics
     * const count = await prisma.billingMetrics.count({
     *   where: {
     *     // ... the filter for the BillingMetrics we want to count
     *   }
     * })
    **/
    count<T extends BillingMetricsCountArgs>(
      args?: Subset<T, BillingMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingMetricsAggregateArgs>(args: Subset<T, BillingMetricsAggregateArgs>): Prisma.PrismaPromise<GetBillingMetricsAggregateType<T>>

    /**
     * Group by BillingMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingMetricsGroupByArgs['orderBy'] }
        : { orderBy?: BillingMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingMetrics model
   */
  readonly fields: BillingMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingMetrics model
   */
  interface BillingMetricsFieldRefs {
    readonly id: FieldRef<"BillingMetrics", 'Int'>
    readonly periodo: FieldRef<"BillingMetrics", 'String'>
    readonly mrr: FieldRef<"BillingMetrics", 'Float'>
    readonly arr: FieldRef<"BillingMetrics", 'Float'>
    readonly churnRate: FieldRef<"BillingMetrics", 'Float'>
    readonly arpu: FieldRef<"BillingMetrics", 'Float'>
    readonly ltv: FieldRef<"BillingMetrics", 'Float'>
    readonly cac: FieldRef<"BillingMetrics", 'Float'>
    readonly receitaMensal: FieldRef<"BillingMetrics", 'Float'>
    readonly faturasPendentes: FieldRef<"BillingMetrics", 'Int'>
    readonly valorPendente: FieldRef<"BillingMetrics", 'Float'>
    readonly faturasVencidas: FieldRef<"BillingMetrics", 'Int'>
    readonly valorVencido: FieldRef<"BillingMetrics", 'Float'>
    readonly taxaCobranca: FieldRef<"BillingMetrics", 'Float'>
    readonly createdAt: FieldRef<"BillingMetrics", 'DateTime'>
    readonly updatedAt: FieldRef<"BillingMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingMetrics findUnique
   */
  export type BillingMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * Filter, which BillingMetrics to fetch.
     */
    where: BillingMetricsWhereUniqueInput
  }

  /**
   * BillingMetrics findUniqueOrThrow
   */
  export type BillingMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * Filter, which BillingMetrics to fetch.
     */
    where: BillingMetricsWhereUniqueInput
  }

  /**
   * BillingMetrics findFirst
   */
  export type BillingMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * Filter, which BillingMetrics to fetch.
     */
    where?: BillingMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingMetrics to fetch.
     */
    orderBy?: BillingMetricsOrderByWithRelationInput | BillingMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingMetrics.
     */
    cursor?: BillingMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingMetrics.
     */
    distinct?: BillingMetricsScalarFieldEnum | BillingMetricsScalarFieldEnum[]
  }

  /**
   * BillingMetrics findFirstOrThrow
   */
  export type BillingMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * Filter, which BillingMetrics to fetch.
     */
    where?: BillingMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingMetrics to fetch.
     */
    orderBy?: BillingMetricsOrderByWithRelationInput | BillingMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingMetrics.
     */
    cursor?: BillingMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingMetrics.
     */
    distinct?: BillingMetricsScalarFieldEnum | BillingMetricsScalarFieldEnum[]
  }

  /**
   * BillingMetrics findMany
   */
  export type BillingMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * Filter, which BillingMetrics to fetch.
     */
    where?: BillingMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingMetrics to fetch.
     */
    orderBy?: BillingMetricsOrderByWithRelationInput | BillingMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingMetrics.
     */
    cursor?: BillingMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingMetrics.
     */
    skip?: number
    distinct?: BillingMetricsScalarFieldEnum | BillingMetricsScalarFieldEnum[]
  }

  /**
   * BillingMetrics create
   */
  export type BillingMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * The data needed to create a BillingMetrics.
     */
    data: XOR<BillingMetricsCreateInput, BillingMetricsUncheckedCreateInput>
  }

  /**
   * BillingMetrics createMany
   */
  export type BillingMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingMetrics.
     */
    data: BillingMetricsCreateManyInput | BillingMetricsCreateManyInput[]
  }

  /**
   * BillingMetrics createManyAndReturn
   */
  export type BillingMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many BillingMetrics.
     */
    data: BillingMetricsCreateManyInput | BillingMetricsCreateManyInput[]
  }

  /**
   * BillingMetrics update
   */
  export type BillingMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * The data needed to update a BillingMetrics.
     */
    data: XOR<BillingMetricsUpdateInput, BillingMetricsUncheckedUpdateInput>
    /**
     * Choose, which BillingMetrics to update.
     */
    where: BillingMetricsWhereUniqueInput
  }

  /**
   * BillingMetrics updateMany
   */
  export type BillingMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingMetrics.
     */
    data: XOR<BillingMetricsUpdateManyMutationInput, BillingMetricsUncheckedUpdateManyInput>
    /**
     * Filter which BillingMetrics to update
     */
    where?: BillingMetricsWhereInput
    /**
     * Limit how many BillingMetrics to update.
     */
    limit?: number
  }

  /**
   * BillingMetrics updateManyAndReturn
   */
  export type BillingMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * The data used to update BillingMetrics.
     */
    data: XOR<BillingMetricsUpdateManyMutationInput, BillingMetricsUncheckedUpdateManyInput>
    /**
     * Filter which BillingMetrics to update
     */
    where?: BillingMetricsWhereInput
    /**
     * Limit how many BillingMetrics to update.
     */
    limit?: number
  }

  /**
   * BillingMetrics upsert
   */
  export type BillingMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * The filter to search for the BillingMetrics to update in case it exists.
     */
    where: BillingMetricsWhereUniqueInput
    /**
     * In case the BillingMetrics found by the `where` argument doesn't exist, create a new BillingMetrics with this data.
     */
    create: XOR<BillingMetricsCreateInput, BillingMetricsUncheckedCreateInput>
    /**
     * In case the BillingMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingMetricsUpdateInput, BillingMetricsUncheckedUpdateInput>
  }

  /**
   * BillingMetrics delete
   */
  export type BillingMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
    /**
     * Filter which BillingMetrics to delete.
     */
    where: BillingMetricsWhereUniqueInput
  }

  /**
   * BillingMetrics deleteMany
   */
  export type BillingMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingMetrics to delete
     */
    where?: BillingMetricsWhereInput
    /**
     * Limit how many BillingMetrics to delete.
     */
    limit?: number
  }

  /**
   * BillingMetrics without action
   */
  export type BillingMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingMetrics
     */
    select?: BillingMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingMetrics
     */
    omit?: BillingMetricsOmit<ExtArgs> | null
  }


  /**
   * Model AnalyticsUserSession
   */

  export type AggregateAnalyticsUserSession = {
    _count: AnalyticsUserSessionCountAggregateOutputType | null
    _avg: AnalyticsUserSessionAvgAggregateOutputType | null
    _sum: AnalyticsUserSessionSumAggregateOutputType | null
    _min: AnalyticsUserSessionMinAggregateOutputType | null
    _max: AnalyticsUserSessionMaxAggregateOutputType | null
  }

  export type AnalyticsUserSessionAvgAggregateOutputType = {
    durationMinutes: number | null
    pagesVisited: number | null
  }

  export type AnalyticsUserSessionSumAggregateOutputType = {
    durationMinutes: number | null
    pagesVisited: number | null
  }

  export type AnalyticsUserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tenantId: string | null
    startedAt: Date | null
    endedAt: Date | null
    durationMinutes: number | null
    pagesVisited: number | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AnalyticsUserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tenantId: string | null
    startedAt: Date | null
    endedAt: Date | null
    durationMinutes: number | null
    pagesVisited: number | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AnalyticsUserSessionCountAggregateOutputType = {
    id: number
    userId: number
    tenantId: number
    startedAt: number
    endedAt: number
    durationMinutes: number
    pagesVisited: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AnalyticsUserSessionAvgAggregateInputType = {
    durationMinutes?: true
    pagesVisited?: true
  }

  export type AnalyticsUserSessionSumAggregateInputType = {
    durationMinutes?: true
    pagesVisited?: true
  }

  export type AnalyticsUserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    startedAt?: true
    endedAt?: true
    durationMinutes?: true
    pagesVisited?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AnalyticsUserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    startedAt?: true
    endedAt?: true
    durationMinutes?: true
    pagesVisited?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AnalyticsUserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    startedAt?: true
    endedAt?: true
    durationMinutes?: true
    pagesVisited?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AnalyticsUserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsUserSession to aggregate.
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsUserSessions to fetch.
     */
    orderBy?: AnalyticsUserSessionOrderByWithRelationInput | AnalyticsUserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalyticsUserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsUserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsUserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnalyticsUserSessions
    **/
    _count?: true | AnalyticsUserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnalyticsUserSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnalyticsUserSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalyticsUserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalyticsUserSessionMaxAggregateInputType
  }

  export type GetAnalyticsUserSessionAggregateType<T extends AnalyticsUserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalyticsUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalyticsUserSession[P]>
      : GetScalarType<T[P], AggregateAnalyticsUserSession[P]>
  }




  export type AnalyticsUserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsUserSessionWhereInput
    orderBy?: AnalyticsUserSessionOrderByWithAggregationInput | AnalyticsUserSessionOrderByWithAggregationInput[]
    by: AnalyticsUserSessionScalarFieldEnum[] | AnalyticsUserSessionScalarFieldEnum
    having?: AnalyticsUserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalyticsUserSessionCountAggregateInputType | true
    _avg?: AnalyticsUserSessionAvgAggregateInputType
    _sum?: AnalyticsUserSessionSumAggregateInputType
    _min?: AnalyticsUserSessionMinAggregateInputType
    _max?: AnalyticsUserSessionMaxAggregateInputType
  }

  export type AnalyticsUserSessionGroupByOutputType = {
    id: string
    userId: string
    tenantId: string | null
    startedAt: Date
    endedAt: Date | null
    durationMinutes: number | null
    pagesVisited: number
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AnalyticsUserSessionCountAggregateOutputType | null
    _avg: AnalyticsUserSessionAvgAggregateOutputType | null
    _sum: AnalyticsUserSessionSumAggregateOutputType | null
    _min: AnalyticsUserSessionMinAggregateOutputType | null
    _max: AnalyticsUserSessionMaxAggregateOutputType | null
  }

  type GetAnalyticsUserSessionGroupByPayload<T extends AnalyticsUserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnalyticsUserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalyticsUserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalyticsUserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], AnalyticsUserSessionGroupByOutputType[P]>
        }
      >
    >


  export type AnalyticsUserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    startedAt?: boolean
    endedAt?: boolean
    durationMinutes?: boolean
    pagesVisited?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | AnalyticsUserSession$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsUserSession"]>

  export type AnalyticsUserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    startedAt?: boolean
    endedAt?: boolean
    durationMinutes?: boolean
    pagesVisited?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | AnalyticsUserSession$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsUserSession"]>

  export type AnalyticsUserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    startedAt?: boolean
    endedAt?: boolean
    durationMinutes?: boolean
    pagesVisited?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | AnalyticsUserSession$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsUserSession"]>

  export type AnalyticsUserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    startedAt?: boolean
    endedAt?: boolean
    durationMinutes?: boolean
    pagesVisited?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AnalyticsUserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tenantId" | "startedAt" | "endedAt" | "durationMinutes" | "pagesVisited" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["analyticsUserSession"]>
  export type AnalyticsUserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | AnalyticsUserSession$tenantArgs<ExtArgs>
  }
  export type AnalyticsUserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | AnalyticsUserSession$tenantArgs<ExtArgs>
  }
  export type AnalyticsUserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | AnalyticsUserSession$tenantArgs<ExtArgs>
  }

  export type $AnalyticsUserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnalyticsUserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tenantId: string | null
      startedAt: Date
      endedAt: Date | null
      durationMinutes: number | null
      pagesVisited: number
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["analyticsUserSession"]>
    composites: {}
  }

  type AnalyticsUserSessionGetPayload<S extends boolean | null | undefined | AnalyticsUserSessionDefaultArgs> = $Result.GetResult<Prisma.$AnalyticsUserSessionPayload, S>

  type AnalyticsUserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnalyticsUserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnalyticsUserSessionCountAggregateInputType | true
    }

  export interface AnalyticsUserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnalyticsUserSession'], meta: { name: 'AnalyticsUserSession' } }
    /**
     * Find zero or one AnalyticsUserSession that matches the filter.
     * @param {AnalyticsUserSessionFindUniqueArgs} args - Arguments to find a AnalyticsUserSession
     * @example
     * // Get one AnalyticsUserSession
     * const analyticsUserSession = await prisma.analyticsUserSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnalyticsUserSessionFindUniqueArgs>(args: SelectSubset<T, AnalyticsUserSessionFindUniqueArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnalyticsUserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnalyticsUserSessionFindUniqueOrThrowArgs} args - Arguments to find a AnalyticsUserSession
     * @example
     * // Get one AnalyticsUserSession
     * const analyticsUserSession = await prisma.analyticsUserSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnalyticsUserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, AnalyticsUserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnalyticsUserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionFindFirstArgs} args - Arguments to find a AnalyticsUserSession
     * @example
     * // Get one AnalyticsUserSession
     * const analyticsUserSession = await prisma.analyticsUserSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnalyticsUserSessionFindFirstArgs>(args?: SelectSubset<T, AnalyticsUserSessionFindFirstArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnalyticsUserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionFindFirstOrThrowArgs} args - Arguments to find a AnalyticsUserSession
     * @example
     * // Get one AnalyticsUserSession
     * const analyticsUserSession = await prisma.analyticsUserSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnalyticsUserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, AnalyticsUserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnalyticsUserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnalyticsUserSessions
     * const analyticsUserSessions = await prisma.analyticsUserSession.findMany()
     * 
     * // Get first 10 AnalyticsUserSessions
     * const analyticsUserSessions = await prisma.analyticsUserSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analyticsUserSessionWithIdOnly = await prisma.analyticsUserSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnalyticsUserSessionFindManyArgs>(args?: SelectSubset<T, AnalyticsUserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnalyticsUserSession.
     * @param {AnalyticsUserSessionCreateArgs} args - Arguments to create a AnalyticsUserSession.
     * @example
     * // Create one AnalyticsUserSession
     * const AnalyticsUserSession = await prisma.analyticsUserSession.create({
     *   data: {
     *     // ... data to create a AnalyticsUserSession
     *   }
     * })
     * 
     */
    create<T extends AnalyticsUserSessionCreateArgs>(args: SelectSubset<T, AnalyticsUserSessionCreateArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnalyticsUserSessions.
     * @param {AnalyticsUserSessionCreateManyArgs} args - Arguments to create many AnalyticsUserSessions.
     * @example
     * // Create many AnalyticsUserSessions
     * const analyticsUserSession = await prisma.analyticsUserSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnalyticsUserSessionCreateManyArgs>(args?: SelectSubset<T, AnalyticsUserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnalyticsUserSessions and returns the data saved in the database.
     * @param {AnalyticsUserSessionCreateManyAndReturnArgs} args - Arguments to create many AnalyticsUserSessions.
     * @example
     * // Create many AnalyticsUserSessions
     * const analyticsUserSession = await prisma.analyticsUserSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnalyticsUserSessions and only return the `id`
     * const analyticsUserSessionWithIdOnly = await prisma.analyticsUserSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnalyticsUserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, AnalyticsUserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnalyticsUserSession.
     * @param {AnalyticsUserSessionDeleteArgs} args - Arguments to delete one AnalyticsUserSession.
     * @example
     * // Delete one AnalyticsUserSession
     * const AnalyticsUserSession = await prisma.analyticsUserSession.delete({
     *   where: {
     *     // ... filter to delete one AnalyticsUserSession
     *   }
     * })
     * 
     */
    delete<T extends AnalyticsUserSessionDeleteArgs>(args: SelectSubset<T, AnalyticsUserSessionDeleteArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnalyticsUserSession.
     * @param {AnalyticsUserSessionUpdateArgs} args - Arguments to update one AnalyticsUserSession.
     * @example
     * // Update one AnalyticsUserSession
     * const analyticsUserSession = await prisma.analyticsUserSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnalyticsUserSessionUpdateArgs>(args: SelectSubset<T, AnalyticsUserSessionUpdateArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnalyticsUserSessions.
     * @param {AnalyticsUserSessionDeleteManyArgs} args - Arguments to filter AnalyticsUserSessions to delete.
     * @example
     * // Delete a few AnalyticsUserSessions
     * const { count } = await prisma.analyticsUserSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnalyticsUserSessionDeleteManyArgs>(args?: SelectSubset<T, AnalyticsUserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalyticsUserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnalyticsUserSessions
     * const analyticsUserSession = await prisma.analyticsUserSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnalyticsUserSessionUpdateManyArgs>(args: SelectSubset<T, AnalyticsUserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalyticsUserSessions and returns the data updated in the database.
     * @param {AnalyticsUserSessionUpdateManyAndReturnArgs} args - Arguments to update many AnalyticsUserSessions.
     * @example
     * // Update many AnalyticsUserSessions
     * const analyticsUserSession = await prisma.analyticsUserSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnalyticsUserSessions and only return the `id`
     * const analyticsUserSessionWithIdOnly = await prisma.analyticsUserSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnalyticsUserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, AnalyticsUserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnalyticsUserSession.
     * @param {AnalyticsUserSessionUpsertArgs} args - Arguments to update or create a AnalyticsUserSession.
     * @example
     * // Update or create a AnalyticsUserSession
     * const analyticsUserSession = await prisma.analyticsUserSession.upsert({
     *   create: {
     *     // ... data to create a AnalyticsUserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnalyticsUserSession we want to update
     *   }
     * })
     */
    upsert<T extends AnalyticsUserSessionUpsertArgs>(args: SelectSubset<T, AnalyticsUserSessionUpsertArgs<ExtArgs>>): Prisma__AnalyticsUserSessionClient<$Result.GetResult<Prisma.$AnalyticsUserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnalyticsUserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionCountArgs} args - Arguments to filter AnalyticsUserSessions to count.
     * @example
     * // Count the number of AnalyticsUserSessions
     * const count = await prisma.analyticsUserSession.count({
     *   where: {
     *     // ... the filter for the AnalyticsUserSessions we want to count
     *   }
     * })
    **/
    count<T extends AnalyticsUserSessionCountArgs>(
      args?: Subset<T, AnalyticsUserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalyticsUserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnalyticsUserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalyticsUserSessionAggregateArgs>(args: Subset<T, AnalyticsUserSessionAggregateArgs>): Prisma.PrismaPromise<GetAnalyticsUserSessionAggregateType<T>>

    /**
     * Group by AnalyticsUserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsUserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalyticsUserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalyticsUserSessionGroupByArgs['orderBy'] }
        : { orderBy?: AnalyticsUserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalyticsUserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalyticsUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnalyticsUserSession model
   */
  readonly fields: AnalyticsUserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnalyticsUserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnalyticsUserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends AnalyticsUserSession$tenantArgs<ExtArgs> = {}>(args?: Subset<T, AnalyticsUserSession$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnalyticsUserSession model
   */
  interface AnalyticsUserSessionFieldRefs {
    readonly id: FieldRef<"AnalyticsUserSession", 'String'>
    readonly userId: FieldRef<"AnalyticsUserSession", 'String'>
    readonly tenantId: FieldRef<"AnalyticsUserSession", 'String'>
    readonly startedAt: FieldRef<"AnalyticsUserSession", 'DateTime'>
    readonly endedAt: FieldRef<"AnalyticsUserSession", 'DateTime'>
    readonly durationMinutes: FieldRef<"AnalyticsUserSession", 'Int'>
    readonly pagesVisited: FieldRef<"AnalyticsUserSession", 'Int'>
    readonly ipAddress: FieldRef<"AnalyticsUserSession", 'String'>
    readonly userAgent: FieldRef<"AnalyticsUserSession", 'String'>
    readonly createdAt: FieldRef<"AnalyticsUserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnalyticsUserSession findUnique
   */
  export type AnalyticsUserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsUserSession to fetch.
     */
    where: AnalyticsUserSessionWhereUniqueInput
  }

  /**
   * AnalyticsUserSession findUniqueOrThrow
   */
  export type AnalyticsUserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsUserSession to fetch.
     */
    where: AnalyticsUserSessionWhereUniqueInput
  }

  /**
   * AnalyticsUserSession findFirst
   */
  export type AnalyticsUserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsUserSession to fetch.
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsUserSessions to fetch.
     */
    orderBy?: AnalyticsUserSessionOrderByWithRelationInput | AnalyticsUserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsUserSessions.
     */
    cursor?: AnalyticsUserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsUserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsUserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsUserSessions.
     */
    distinct?: AnalyticsUserSessionScalarFieldEnum | AnalyticsUserSessionScalarFieldEnum[]
  }

  /**
   * AnalyticsUserSession findFirstOrThrow
   */
  export type AnalyticsUserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsUserSession to fetch.
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsUserSessions to fetch.
     */
    orderBy?: AnalyticsUserSessionOrderByWithRelationInput | AnalyticsUserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsUserSessions.
     */
    cursor?: AnalyticsUserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsUserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsUserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsUserSessions.
     */
    distinct?: AnalyticsUserSessionScalarFieldEnum | AnalyticsUserSessionScalarFieldEnum[]
  }

  /**
   * AnalyticsUserSession findMany
   */
  export type AnalyticsUserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsUserSessions to fetch.
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsUserSessions to fetch.
     */
    orderBy?: AnalyticsUserSessionOrderByWithRelationInput | AnalyticsUserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnalyticsUserSessions.
     */
    cursor?: AnalyticsUserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsUserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsUserSessions.
     */
    skip?: number
    distinct?: AnalyticsUserSessionScalarFieldEnum | AnalyticsUserSessionScalarFieldEnum[]
  }

  /**
   * AnalyticsUserSession create
   */
  export type AnalyticsUserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a AnalyticsUserSession.
     */
    data: XOR<AnalyticsUserSessionCreateInput, AnalyticsUserSessionUncheckedCreateInput>
  }

  /**
   * AnalyticsUserSession createMany
   */
  export type AnalyticsUserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnalyticsUserSessions.
     */
    data: AnalyticsUserSessionCreateManyInput | AnalyticsUserSessionCreateManyInput[]
  }

  /**
   * AnalyticsUserSession createManyAndReturn
   */
  export type AnalyticsUserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many AnalyticsUserSessions.
     */
    data: AnalyticsUserSessionCreateManyInput | AnalyticsUserSessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnalyticsUserSession update
   */
  export type AnalyticsUserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a AnalyticsUserSession.
     */
    data: XOR<AnalyticsUserSessionUpdateInput, AnalyticsUserSessionUncheckedUpdateInput>
    /**
     * Choose, which AnalyticsUserSession to update.
     */
    where: AnalyticsUserSessionWhereUniqueInput
  }

  /**
   * AnalyticsUserSession updateMany
   */
  export type AnalyticsUserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnalyticsUserSessions.
     */
    data: XOR<AnalyticsUserSessionUpdateManyMutationInput, AnalyticsUserSessionUncheckedUpdateManyInput>
    /**
     * Filter which AnalyticsUserSessions to update
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * Limit how many AnalyticsUserSessions to update.
     */
    limit?: number
  }

  /**
   * AnalyticsUserSession updateManyAndReturn
   */
  export type AnalyticsUserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * The data used to update AnalyticsUserSessions.
     */
    data: XOR<AnalyticsUserSessionUpdateManyMutationInput, AnalyticsUserSessionUncheckedUpdateManyInput>
    /**
     * Filter which AnalyticsUserSessions to update
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * Limit how many AnalyticsUserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnalyticsUserSession upsert
   */
  export type AnalyticsUserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the AnalyticsUserSession to update in case it exists.
     */
    where: AnalyticsUserSessionWhereUniqueInput
    /**
     * In case the AnalyticsUserSession found by the `where` argument doesn't exist, create a new AnalyticsUserSession with this data.
     */
    create: XOR<AnalyticsUserSessionCreateInput, AnalyticsUserSessionUncheckedCreateInput>
    /**
     * In case the AnalyticsUserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalyticsUserSessionUpdateInput, AnalyticsUserSessionUncheckedUpdateInput>
  }

  /**
   * AnalyticsUserSession delete
   */
  export type AnalyticsUserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
    /**
     * Filter which AnalyticsUserSession to delete.
     */
    where: AnalyticsUserSessionWhereUniqueInput
  }

  /**
   * AnalyticsUserSession deleteMany
   */
  export type AnalyticsUserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsUserSessions to delete
     */
    where?: AnalyticsUserSessionWhereInput
    /**
     * Limit how many AnalyticsUserSessions to delete.
     */
    limit?: number
  }

  /**
   * AnalyticsUserSession.tenant
   */
  export type AnalyticsUserSession$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * AnalyticsUserSession without action
   */
  export type AnalyticsUserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsUserSession
     */
    select?: AnalyticsUserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsUserSession
     */
    omit?: AnalyticsUserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsUserSessionInclude<ExtArgs> | null
  }


  /**
   * Model FeatureUsage
   */

  export type AggregateFeatureUsage = {
    _count: FeatureUsageCountAggregateOutputType | null
    _avg: FeatureUsageAvgAggregateOutputType | null
    _sum: FeatureUsageSumAggregateOutputType | null
    _min: FeatureUsageMinAggregateOutputType | null
    _max: FeatureUsageMaxAggregateOutputType | null
  }

  export type FeatureUsageAvgAggregateOutputType = {
    id: number | null
    usageCount: number | null
    totalTimeMinutes: number | null
  }

  export type FeatureUsageSumAggregateOutputType = {
    id: number | null
    usageCount: number | null
    totalTimeMinutes: number | null
  }

  export type FeatureUsageMinAggregateOutputType = {
    id: number | null
    userId: string | null
    tenantId: string | null
    featureName: string | null
    featureCategory: string | null
    usageCount: number | null
    totalTimeMinutes: number | null
    date: Date | null
    createdAt: Date | null
  }

  export type FeatureUsageMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    tenantId: string | null
    featureName: string | null
    featureCategory: string | null
    usageCount: number | null
    totalTimeMinutes: number | null
    date: Date | null
    createdAt: Date | null
  }

  export type FeatureUsageCountAggregateOutputType = {
    id: number
    userId: number
    tenantId: number
    featureName: number
    featureCategory: number
    usageCount: number
    totalTimeMinutes: number
    date: number
    createdAt: number
    _all: number
  }


  export type FeatureUsageAvgAggregateInputType = {
    id?: true
    usageCount?: true
    totalTimeMinutes?: true
  }

  export type FeatureUsageSumAggregateInputType = {
    id?: true
    usageCount?: true
    totalTimeMinutes?: true
  }

  export type FeatureUsageMinAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    featureName?: true
    featureCategory?: true
    usageCount?: true
    totalTimeMinutes?: true
    date?: true
    createdAt?: true
  }

  export type FeatureUsageMaxAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    featureName?: true
    featureCategory?: true
    usageCount?: true
    totalTimeMinutes?: true
    date?: true
    createdAt?: true
  }

  export type FeatureUsageCountAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    featureName?: true
    featureCategory?: true
    usageCount?: true
    totalTimeMinutes?: true
    date?: true
    createdAt?: true
    _all?: true
  }

  export type FeatureUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureUsage to aggregate.
     */
    where?: FeatureUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUsages to fetch.
     */
    orderBy?: FeatureUsageOrderByWithRelationInput | FeatureUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeatureUsages
    **/
    _count?: true | FeatureUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeatureUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeatureUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureUsageMaxAggregateInputType
  }

  export type GetFeatureUsageAggregateType<T extends FeatureUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatureUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatureUsage[P]>
      : GetScalarType<T[P], AggregateFeatureUsage[P]>
  }




  export type FeatureUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureUsageWhereInput
    orderBy?: FeatureUsageOrderByWithAggregationInput | FeatureUsageOrderByWithAggregationInput[]
    by: FeatureUsageScalarFieldEnum[] | FeatureUsageScalarFieldEnum
    having?: FeatureUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureUsageCountAggregateInputType | true
    _avg?: FeatureUsageAvgAggregateInputType
    _sum?: FeatureUsageSumAggregateInputType
    _min?: FeatureUsageMinAggregateInputType
    _max?: FeatureUsageMaxAggregateInputType
  }

  export type FeatureUsageGroupByOutputType = {
    id: number
    userId: string
    tenantId: string | null
    featureName: string
    featureCategory: string
    usageCount: number
    totalTimeMinutes: number | null
    date: Date
    createdAt: Date
    _count: FeatureUsageCountAggregateOutputType | null
    _avg: FeatureUsageAvgAggregateOutputType | null
    _sum: FeatureUsageSumAggregateOutputType | null
    _min: FeatureUsageMinAggregateOutputType | null
    _max: FeatureUsageMaxAggregateOutputType | null
  }

  type GetFeatureUsageGroupByPayload<T extends FeatureUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureUsageGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureUsageGroupByOutputType[P]>
        }
      >
    >


  export type FeatureUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    featureName?: boolean
    featureCategory?: boolean
    usageCount?: boolean
    totalTimeMinutes?: boolean
    date?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | FeatureUsage$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["featureUsage"]>

  export type FeatureUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    featureName?: boolean
    featureCategory?: boolean
    usageCount?: boolean
    totalTimeMinutes?: boolean
    date?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | FeatureUsage$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["featureUsage"]>

  export type FeatureUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    featureName?: boolean
    featureCategory?: boolean
    usageCount?: boolean
    totalTimeMinutes?: boolean
    date?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | FeatureUsage$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["featureUsage"]>

  export type FeatureUsageSelectScalar = {
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    featureName?: boolean
    featureCategory?: boolean
    usageCount?: boolean
    totalTimeMinutes?: boolean
    date?: boolean
    createdAt?: boolean
  }

  export type FeatureUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tenantId" | "featureName" | "featureCategory" | "usageCount" | "totalTimeMinutes" | "date" | "createdAt", ExtArgs["result"]["featureUsage"]>
  export type FeatureUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | FeatureUsage$tenantArgs<ExtArgs>
  }
  export type FeatureUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | FeatureUsage$tenantArgs<ExtArgs>
  }
  export type FeatureUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | FeatureUsage$tenantArgs<ExtArgs>
  }

  export type $FeatureUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeatureUsage"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      tenantId: string | null
      featureName: string
      featureCategory: string
      usageCount: number
      totalTimeMinutes: number | null
      date: Date
      createdAt: Date
    }, ExtArgs["result"]["featureUsage"]>
    composites: {}
  }

  type FeatureUsageGetPayload<S extends boolean | null | undefined | FeatureUsageDefaultArgs> = $Result.GetResult<Prisma.$FeatureUsagePayload, S>

  type FeatureUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeatureUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeatureUsageCountAggregateInputType | true
    }

  export interface FeatureUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeatureUsage'], meta: { name: 'FeatureUsage' } }
    /**
     * Find zero or one FeatureUsage that matches the filter.
     * @param {FeatureUsageFindUniqueArgs} args - Arguments to find a FeatureUsage
     * @example
     * // Get one FeatureUsage
     * const featureUsage = await prisma.featureUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeatureUsageFindUniqueArgs>(args: SelectSubset<T, FeatureUsageFindUniqueArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeatureUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeatureUsageFindUniqueOrThrowArgs} args - Arguments to find a FeatureUsage
     * @example
     * // Get one FeatureUsage
     * const featureUsage = await prisma.featureUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeatureUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, FeatureUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeatureUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageFindFirstArgs} args - Arguments to find a FeatureUsage
     * @example
     * // Get one FeatureUsage
     * const featureUsage = await prisma.featureUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeatureUsageFindFirstArgs>(args?: SelectSubset<T, FeatureUsageFindFirstArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeatureUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageFindFirstOrThrowArgs} args - Arguments to find a FeatureUsage
     * @example
     * // Get one FeatureUsage
     * const featureUsage = await prisma.featureUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeatureUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, FeatureUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeatureUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeatureUsages
     * const featureUsages = await prisma.featureUsage.findMany()
     * 
     * // Get first 10 FeatureUsages
     * const featureUsages = await prisma.featureUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureUsageWithIdOnly = await prisma.featureUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeatureUsageFindManyArgs>(args?: SelectSubset<T, FeatureUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeatureUsage.
     * @param {FeatureUsageCreateArgs} args - Arguments to create a FeatureUsage.
     * @example
     * // Create one FeatureUsage
     * const FeatureUsage = await prisma.featureUsage.create({
     *   data: {
     *     // ... data to create a FeatureUsage
     *   }
     * })
     * 
     */
    create<T extends FeatureUsageCreateArgs>(args: SelectSubset<T, FeatureUsageCreateArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeatureUsages.
     * @param {FeatureUsageCreateManyArgs} args - Arguments to create many FeatureUsages.
     * @example
     * // Create many FeatureUsages
     * const featureUsage = await prisma.featureUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeatureUsageCreateManyArgs>(args?: SelectSubset<T, FeatureUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeatureUsages and returns the data saved in the database.
     * @param {FeatureUsageCreateManyAndReturnArgs} args - Arguments to create many FeatureUsages.
     * @example
     * // Create many FeatureUsages
     * const featureUsage = await prisma.featureUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeatureUsages and only return the `id`
     * const featureUsageWithIdOnly = await prisma.featureUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeatureUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, FeatureUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeatureUsage.
     * @param {FeatureUsageDeleteArgs} args - Arguments to delete one FeatureUsage.
     * @example
     * // Delete one FeatureUsage
     * const FeatureUsage = await prisma.featureUsage.delete({
     *   where: {
     *     // ... filter to delete one FeatureUsage
     *   }
     * })
     * 
     */
    delete<T extends FeatureUsageDeleteArgs>(args: SelectSubset<T, FeatureUsageDeleteArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeatureUsage.
     * @param {FeatureUsageUpdateArgs} args - Arguments to update one FeatureUsage.
     * @example
     * // Update one FeatureUsage
     * const featureUsage = await prisma.featureUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeatureUsageUpdateArgs>(args: SelectSubset<T, FeatureUsageUpdateArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeatureUsages.
     * @param {FeatureUsageDeleteManyArgs} args - Arguments to filter FeatureUsages to delete.
     * @example
     * // Delete a few FeatureUsages
     * const { count } = await prisma.featureUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeatureUsageDeleteManyArgs>(args?: SelectSubset<T, FeatureUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeatureUsages
     * const featureUsage = await prisma.featureUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeatureUsageUpdateManyArgs>(args: SelectSubset<T, FeatureUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureUsages and returns the data updated in the database.
     * @param {FeatureUsageUpdateManyAndReturnArgs} args - Arguments to update many FeatureUsages.
     * @example
     * // Update many FeatureUsages
     * const featureUsage = await prisma.featureUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeatureUsages and only return the `id`
     * const featureUsageWithIdOnly = await prisma.featureUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeatureUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, FeatureUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeatureUsage.
     * @param {FeatureUsageUpsertArgs} args - Arguments to update or create a FeatureUsage.
     * @example
     * // Update or create a FeatureUsage
     * const featureUsage = await prisma.featureUsage.upsert({
     *   create: {
     *     // ... data to create a FeatureUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeatureUsage we want to update
     *   }
     * })
     */
    upsert<T extends FeatureUsageUpsertArgs>(args: SelectSubset<T, FeatureUsageUpsertArgs<ExtArgs>>): Prisma__FeatureUsageClient<$Result.GetResult<Prisma.$FeatureUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeatureUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageCountArgs} args - Arguments to filter FeatureUsages to count.
     * @example
     * // Count the number of FeatureUsages
     * const count = await prisma.featureUsage.count({
     *   where: {
     *     // ... the filter for the FeatureUsages we want to count
     *   }
     * })
    **/
    count<T extends FeatureUsageCountArgs>(
      args?: Subset<T, FeatureUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeatureUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureUsageAggregateArgs>(args: Subset<T, FeatureUsageAggregateArgs>): Prisma.PrismaPromise<GetFeatureUsageAggregateType<T>>

    /**
     * Group by FeatureUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureUsageGroupByArgs['orderBy'] }
        : { orderBy?: FeatureUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeatureUsage model
   */
  readonly fields: FeatureUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeatureUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends FeatureUsage$tenantArgs<ExtArgs> = {}>(args?: Subset<T, FeatureUsage$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeatureUsage model
   */
  interface FeatureUsageFieldRefs {
    readonly id: FieldRef<"FeatureUsage", 'Int'>
    readonly userId: FieldRef<"FeatureUsage", 'String'>
    readonly tenantId: FieldRef<"FeatureUsage", 'String'>
    readonly featureName: FieldRef<"FeatureUsage", 'String'>
    readonly featureCategory: FieldRef<"FeatureUsage", 'String'>
    readonly usageCount: FieldRef<"FeatureUsage", 'Int'>
    readonly totalTimeMinutes: FieldRef<"FeatureUsage", 'Float'>
    readonly date: FieldRef<"FeatureUsage", 'DateTime'>
    readonly createdAt: FieldRef<"FeatureUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeatureUsage findUnique
   */
  export type FeatureUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUsage to fetch.
     */
    where: FeatureUsageWhereUniqueInput
  }

  /**
   * FeatureUsage findUniqueOrThrow
   */
  export type FeatureUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUsage to fetch.
     */
    where: FeatureUsageWhereUniqueInput
  }

  /**
   * FeatureUsage findFirst
   */
  export type FeatureUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUsage to fetch.
     */
    where?: FeatureUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUsages to fetch.
     */
    orderBy?: FeatureUsageOrderByWithRelationInput | FeatureUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureUsages.
     */
    cursor?: FeatureUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureUsages.
     */
    distinct?: FeatureUsageScalarFieldEnum | FeatureUsageScalarFieldEnum[]
  }

  /**
   * FeatureUsage findFirstOrThrow
   */
  export type FeatureUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUsage to fetch.
     */
    where?: FeatureUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUsages to fetch.
     */
    orderBy?: FeatureUsageOrderByWithRelationInput | FeatureUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureUsages.
     */
    cursor?: FeatureUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureUsages.
     */
    distinct?: FeatureUsageScalarFieldEnum | FeatureUsageScalarFieldEnum[]
  }

  /**
   * FeatureUsage findMany
   */
  export type FeatureUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * Filter, which FeatureUsages to fetch.
     */
    where?: FeatureUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureUsages to fetch.
     */
    orderBy?: FeatureUsageOrderByWithRelationInput | FeatureUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeatureUsages.
     */
    cursor?: FeatureUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureUsages.
     */
    skip?: number
    distinct?: FeatureUsageScalarFieldEnum | FeatureUsageScalarFieldEnum[]
  }

  /**
   * FeatureUsage create
   */
  export type FeatureUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a FeatureUsage.
     */
    data: XOR<FeatureUsageCreateInput, FeatureUsageUncheckedCreateInput>
  }

  /**
   * FeatureUsage createMany
   */
  export type FeatureUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeatureUsages.
     */
    data: FeatureUsageCreateManyInput | FeatureUsageCreateManyInput[]
  }

  /**
   * FeatureUsage createManyAndReturn
   */
  export type FeatureUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * The data used to create many FeatureUsages.
     */
    data: FeatureUsageCreateManyInput | FeatureUsageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeatureUsage update
   */
  export type FeatureUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a FeatureUsage.
     */
    data: XOR<FeatureUsageUpdateInput, FeatureUsageUncheckedUpdateInput>
    /**
     * Choose, which FeatureUsage to update.
     */
    where: FeatureUsageWhereUniqueInput
  }

  /**
   * FeatureUsage updateMany
   */
  export type FeatureUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeatureUsages.
     */
    data: XOR<FeatureUsageUpdateManyMutationInput, FeatureUsageUncheckedUpdateManyInput>
    /**
     * Filter which FeatureUsages to update
     */
    where?: FeatureUsageWhereInput
    /**
     * Limit how many FeatureUsages to update.
     */
    limit?: number
  }

  /**
   * FeatureUsage updateManyAndReturn
   */
  export type FeatureUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * The data used to update FeatureUsages.
     */
    data: XOR<FeatureUsageUpdateManyMutationInput, FeatureUsageUncheckedUpdateManyInput>
    /**
     * Filter which FeatureUsages to update
     */
    where?: FeatureUsageWhereInput
    /**
     * Limit how many FeatureUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeatureUsage upsert
   */
  export type FeatureUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the FeatureUsage to update in case it exists.
     */
    where: FeatureUsageWhereUniqueInput
    /**
     * In case the FeatureUsage found by the `where` argument doesn't exist, create a new FeatureUsage with this data.
     */
    create: XOR<FeatureUsageCreateInput, FeatureUsageUncheckedCreateInput>
    /**
     * In case the FeatureUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureUsageUpdateInput, FeatureUsageUncheckedUpdateInput>
  }

  /**
   * FeatureUsage delete
   */
  export type FeatureUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
    /**
     * Filter which FeatureUsage to delete.
     */
    where: FeatureUsageWhereUniqueInput
  }

  /**
   * FeatureUsage deleteMany
   */
  export type FeatureUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureUsages to delete
     */
    where?: FeatureUsageWhereInput
    /**
     * Limit how many FeatureUsages to delete.
     */
    limit?: number
  }

  /**
   * FeatureUsage.tenant
   */
  export type FeatureUsage$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * FeatureUsage without action
   */
  export type FeatureUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureUsage
     */
    select?: FeatureUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureUsage
     */
    omit?: FeatureUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureUsageInclude<ExtArgs> | null
  }


  /**
   * Model SystemMetrics
   */

  export type AggregateSystemMetrics = {
    _count: SystemMetricsCountAggregateOutputType | null
    _avg: SystemMetricsAvgAggregateOutputType | null
    _sum: SystemMetricsSumAggregateOutputType | null
    _min: SystemMetricsMinAggregateOutputType | null
    _max: SystemMetricsMaxAggregateOutputType | null
  }

  export type SystemMetricsAvgAggregateOutputType = {
    id: number | null
    metricValue: number | null
  }

  export type SystemMetricsSumAggregateOutputType = {
    id: number | null
    metricValue: number | null
  }

  export type SystemMetricsMinAggregateOutputType = {
    id: number | null
    metricName: string | null
    metricValue: number | null
    metricUnit: string | null
    recordedAt: Date | null
  }

  export type SystemMetricsMaxAggregateOutputType = {
    id: number | null
    metricName: string | null
    metricValue: number | null
    metricUnit: string | null
    recordedAt: Date | null
  }

  export type SystemMetricsCountAggregateOutputType = {
    id: number
    metricName: number
    metricValue: number
    metricUnit: number
    recordedAt: number
    _all: number
  }


  export type SystemMetricsAvgAggregateInputType = {
    id?: true
    metricValue?: true
  }

  export type SystemMetricsSumAggregateInputType = {
    id?: true
    metricValue?: true
  }

  export type SystemMetricsMinAggregateInputType = {
    id?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    recordedAt?: true
  }

  export type SystemMetricsMaxAggregateInputType = {
    id?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    recordedAt?: true
  }

  export type SystemMetricsCountAggregateInputType = {
    id?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    recordedAt?: true
    _all?: true
  }

  export type SystemMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemMetrics to aggregate.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemMetrics
    **/
    _count?: true | SystemMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemMetricsMaxAggregateInputType
  }

  export type GetSystemMetricsAggregateType<T extends SystemMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemMetrics[P]>
      : GetScalarType<T[P], AggregateSystemMetrics[P]>
  }




  export type SystemMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemMetricsWhereInput
    orderBy?: SystemMetricsOrderByWithAggregationInput | SystemMetricsOrderByWithAggregationInput[]
    by: SystemMetricsScalarFieldEnum[] | SystemMetricsScalarFieldEnum
    having?: SystemMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemMetricsCountAggregateInputType | true
    _avg?: SystemMetricsAvgAggregateInputType
    _sum?: SystemMetricsSumAggregateInputType
    _min?: SystemMetricsMinAggregateInputType
    _max?: SystemMetricsMaxAggregateInputType
  }

  export type SystemMetricsGroupByOutputType = {
    id: number
    metricName: string
    metricValue: number
    metricUnit: string | null
    recordedAt: Date
    _count: SystemMetricsCountAggregateOutputType | null
    _avg: SystemMetricsAvgAggregateOutputType | null
    _sum: SystemMetricsSumAggregateOutputType | null
    _min: SystemMetricsMinAggregateOutputType | null
    _max: SystemMetricsMaxAggregateOutputType | null
  }

  type GetSystemMetricsGroupByPayload<T extends SystemMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemMetricsGroupByOutputType[P]>
        }
      >
    >


  export type SystemMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    recordedAt?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    recordedAt?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    recordedAt?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectScalar = {
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    recordedAt?: boolean
  }

  export type SystemMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "metricName" | "metricValue" | "metricUnit" | "recordedAt", ExtArgs["result"]["systemMetrics"]>

  export type $SystemMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemMetrics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      metricName: string
      metricValue: number
      metricUnit: string | null
      recordedAt: Date
    }, ExtArgs["result"]["systemMetrics"]>
    composites: {}
  }

  type SystemMetricsGetPayload<S extends boolean | null | undefined | SystemMetricsDefaultArgs> = $Result.GetResult<Prisma.$SystemMetricsPayload, S>

  type SystemMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemMetricsCountAggregateInputType | true
    }

  export interface SystemMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemMetrics'], meta: { name: 'SystemMetrics' } }
    /**
     * Find zero or one SystemMetrics that matches the filter.
     * @param {SystemMetricsFindUniqueArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemMetricsFindUniqueArgs>(args: SelectSubset<T, SystemMetricsFindUniqueArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemMetricsFindUniqueOrThrowArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindFirstArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemMetricsFindFirstArgs>(args?: SelectSubset<T, SystemMetricsFindFirstArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindFirstOrThrowArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findMany()
     * 
     * // Get first 10 SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemMetricsFindManyArgs>(args?: SelectSubset<T, SystemMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemMetrics.
     * @param {SystemMetricsCreateArgs} args - Arguments to create a SystemMetrics.
     * @example
     * // Create one SystemMetrics
     * const SystemMetrics = await prisma.systemMetrics.create({
     *   data: {
     *     // ... data to create a SystemMetrics
     *   }
     * })
     * 
     */
    create<T extends SystemMetricsCreateArgs>(args: SelectSubset<T, SystemMetricsCreateArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemMetrics.
     * @param {SystemMetricsCreateManyArgs} args - Arguments to create many SystemMetrics.
     * @example
     * // Create many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemMetricsCreateManyArgs>(args?: SelectSubset<T, SystemMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemMetrics and returns the data saved in the database.
     * @param {SystemMetricsCreateManyAndReturnArgs} args - Arguments to create many SystemMetrics.
     * @example
     * // Create many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemMetrics and only return the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemMetrics.
     * @param {SystemMetricsDeleteArgs} args - Arguments to delete one SystemMetrics.
     * @example
     * // Delete one SystemMetrics
     * const SystemMetrics = await prisma.systemMetrics.delete({
     *   where: {
     *     // ... filter to delete one SystemMetrics
     *   }
     * })
     * 
     */
    delete<T extends SystemMetricsDeleteArgs>(args: SelectSubset<T, SystemMetricsDeleteArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemMetrics.
     * @param {SystemMetricsUpdateArgs} args - Arguments to update one SystemMetrics.
     * @example
     * // Update one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemMetricsUpdateArgs>(args: SelectSubset<T, SystemMetricsUpdateArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemMetrics.
     * @param {SystemMetricsDeleteManyArgs} args - Arguments to filter SystemMetrics to delete.
     * @example
     * // Delete a few SystemMetrics
     * const { count } = await prisma.systemMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemMetricsDeleteManyArgs>(args?: SelectSubset<T, SystemMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemMetricsUpdateManyArgs>(args: SelectSubset<T, SystemMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemMetrics and returns the data updated in the database.
     * @param {SystemMetricsUpdateManyAndReturnArgs} args - Arguments to update many SystemMetrics.
     * @example
     * // Update many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemMetrics and only return the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemMetrics.
     * @param {SystemMetricsUpsertArgs} args - Arguments to update or create a SystemMetrics.
     * @example
     * // Update or create a SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.upsert({
     *   create: {
     *     // ... data to create a SystemMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemMetrics we want to update
     *   }
     * })
     */
    upsert<T extends SystemMetricsUpsertArgs>(args: SelectSubset<T, SystemMetricsUpsertArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsCountArgs} args - Arguments to filter SystemMetrics to count.
     * @example
     * // Count the number of SystemMetrics
     * const count = await prisma.systemMetrics.count({
     *   where: {
     *     // ... the filter for the SystemMetrics we want to count
     *   }
     * })
    **/
    count<T extends SystemMetricsCountArgs>(
      args?: Subset<T, SystemMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemMetricsAggregateArgs>(args: Subset<T, SystemMetricsAggregateArgs>): Prisma.PrismaPromise<GetSystemMetricsAggregateType<T>>

    /**
     * Group by SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemMetricsGroupByArgs['orderBy'] }
        : { orderBy?: SystemMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemMetrics model
   */
  readonly fields: SystemMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemMetrics model
   */
  interface SystemMetricsFieldRefs {
    readonly id: FieldRef<"SystemMetrics", 'Int'>
    readonly metricName: FieldRef<"SystemMetrics", 'String'>
    readonly metricValue: FieldRef<"SystemMetrics", 'Float'>
    readonly metricUnit: FieldRef<"SystemMetrics", 'String'>
    readonly recordedAt: FieldRef<"SystemMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemMetrics findUnique
   */
  export type SystemMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics findUniqueOrThrow
   */
  export type SystemMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics findFirst
   */
  export type SystemMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemMetrics.
     */
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics findFirstOrThrow
   */
  export type SystemMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemMetrics.
     */
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics findMany
   */
  export type SystemMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics create
   */
  export type SystemMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemMetrics.
     */
    data: XOR<SystemMetricsCreateInput, SystemMetricsUncheckedCreateInput>
  }

  /**
   * SystemMetrics createMany
   */
  export type SystemMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemMetrics.
     */
    data: SystemMetricsCreateManyInput | SystemMetricsCreateManyInput[]
  }

  /**
   * SystemMetrics createManyAndReturn
   */
  export type SystemMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemMetrics.
     */
    data: SystemMetricsCreateManyInput | SystemMetricsCreateManyInput[]
  }

  /**
   * SystemMetrics update
   */
  export type SystemMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateInput, SystemMetricsUncheckedUpdateInput>
    /**
     * Choose, which SystemMetrics to update.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics updateMany
   */
  export type SystemMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateManyMutationInput, SystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which SystemMetrics to update
     */
    where?: SystemMetricsWhereInput
    /**
     * Limit how many SystemMetrics to update.
     */
    limit?: number
  }

  /**
   * SystemMetrics updateManyAndReturn
   */
  export type SystemMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The data used to update SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateManyMutationInput, SystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which SystemMetrics to update
     */
    where?: SystemMetricsWhereInput
    /**
     * Limit how many SystemMetrics to update.
     */
    limit?: number
  }

  /**
   * SystemMetrics upsert
   */
  export type SystemMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemMetrics to update in case it exists.
     */
    where: SystemMetricsWhereUniqueInput
    /**
     * In case the SystemMetrics found by the `where` argument doesn't exist, create a new SystemMetrics with this data.
     */
    create: XOR<SystemMetricsCreateInput, SystemMetricsUncheckedCreateInput>
    /**
     * In case the SystemMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemMetricsUpdateInput, SystemMetricsUncheckedUpdateInput>
  }

  /**
   * SystemMetrics delete
   */
  export type SystemMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
    /**
     * Filter which SystemMetrics to delete.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics deleteMany
   */
  export type SystemMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemMetrics to delete
     */
    where?: SystemMetricsWhereInput
    /**
     * Limit how many SystemMetrics to delete.
     */
    limit?: number
  }

  /**
   * SystemMetrics without action
   */
  export type SystemMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemMetrics
     */
    omit?: SystemMetricsOmit<ExtArgs> | null
  }


  /**
   * Model PageViews
   */

  export type AggregatePageViews = {
    _count: PageViewsCountAggregateOutputType | null
    _avg: PageViewsAvgAggregateOutputType | null
    _sum: PageViewsSumAggregateOutputType | null
    _min: PageViewsMinAggregateOutputType | null
    _max: PageViewsMaxAggregateOutputType | null
  }

  export type PageViewsAvgAggregateOutputType = {
    id: number | null
    timeSpent: number | null
  }

  export type PageViewsSumAggregateOutputType = {
    id: number | null
    timeSpent: number | null
  }

  export type PageViewsMinAggregateOutputType = {
    id: number | null
    userId: string | null
    tenantId: string | null
    pagePath: string | null
    pageTitle: string | null
    timeSpent: number | null
    sessionId: string | null
    referrer: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type PageViewsMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    tenantId: string | null
    pagePath: string | null
    pageTitle: string | null
    timeSpent: number | null
    sessionId: string | null
    referrer: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type PageViewsCountAggregateOutputType = {
    id: number
    userId: number
    tenantId: number
    pagePath: number
    pageTitle: number
    timeSpent: number
    sessionId: number
    referrer: number
    userAgent: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type PageViewsAvgAggregateInputType = {
    id?: true
    timeSpent?: true
  }

  export type PageViewsSumAggregateInputType = {
    id?: true
    timeSpent?: true
  }

  export type PageViewsMinAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    pagePath?: true
    pageTitle?: true
    timeSpent?: true
    sessionId?: true
    referrer?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
  }

  export type PageViewsMaxAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    pagePath?: true
    pageTitle?: true
    timeSpent?: true
    sessionId?: true
    referrer?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
  }

  export type PageViewsCountAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    pagePath?: true
    pageTitle?: true
    timeSpent?: true
    sessionId?: true
    referrer?: true
    userAgent?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type PageViewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageViews to aggregate.
     */
    where?: PageViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViews to fetch.
     */
    orderBy?: PageViewsOrderByWithRelationInput | PageViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PageViews
    **/
    _count?: true | PageViewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageViewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageViewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageViewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageViewsMaxAggregateInputType
  }

  export type GetPageViewsAggregateType<T extends PageViewsAggregateArgs> = {
        [P in keyof T & keyof AggregatePageViews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageViews[P]>
      : GetScalarType<T[P], AggregatePageViews[P]>
  }




  export type PageViewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageViewsWhereInput
    orderBy?: PageViewsOrderByWithAggregationInput | PageViewsOrderByWithAggregationInput[]
    by: PageViewsScalarFieldEnum[] | PageViewsScalarFieldEnum
    having?: PageViewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageViewsCountAggregateInputType | true
    _avg?: PageViewsAvgAggregateInputType
    _sum?: PageViewsSumAggregateInputType
    _min?: PageViewsMinAggregateInputType
    _max?: PageViewsMaxAggregateInputType
  }

  export type PageViewsGroupByOutputType = {
    id: number
    userId: string
    tenantId: string | null
    pagePath: string
    pageTitle: string | null
    timeSpent: number | null
    sessionId: string | null
    referrer: string | null
    userAgent: string | null
    ipAddress: string | null
    createdAt: Date
    _count: PageViewsCountAggregateOutputType | null
    _avg: PageViewsAvgAggregateOutputType | null
    _sum: PageViewsSumAggregateOutputType | null
    _min: PageViewsMinAggregateOutputType | null
    _max: PageViewsMaxAggregateOutputType | null
  }

  type GetPageViewsGroupByPayload<T extends PageViewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageViewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageViewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageViewsGroupByOutputType[P]>
            : GetScalarType<T[P], PageViewsGroupByOutputType[P]>
        }
      >
    >


  export type PageViewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    pagePath?: boolean
    pageTitle?: boolean
    timeSpent?: boolean
    sessionId?: boolean
    referrer?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | PageViews$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["pageViews"]>

  export type PageViewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    pagePath?: boolean
    pageTitle?: boolean
    timeSpent?: boolean
    sessionId?: boolean
    referrer?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | PageViews$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["pageViews"]>

  export type PageViewsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    pagePath?: boolean
    pageTitle?: boolean
    timeSpent?: boolean
    sessionId?: boolean
    referrer?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | PageViews$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["pageViews"]>

  export type PageViewsSelectScalar = {
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    pagePath?: boolean
    pageTitle?: boolean
    timeSpent?: boolean
    sessionId?: boolean
    referrer?: boolean
    userAgent?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type PageViewsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tenantId" | "pagePath" | "pageTitle" | "timeSpent" | "sessionId" | "referrer" | "userAgent" | "ipAddress" | "createdAt", ExtArgs["result"]["pageViews"]>
  export type PageViewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | PageViews$tenantArgs<ExtArgs>
  }
  export type PageViewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | PageViews$tenantArgs<ExtArgs>
  }
  export type PageViewsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | PageViews$tenantArgs<ExtArgs>
  }

  export type $PageViewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PageViews"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      tenantId: string | null
      pagePath: string
      pageTitle: string | null
      timeSpent: number | null
      sessionId: string | null
      referrer: string | null
      userAgent: string | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["pageViews"]>
    composites: {}
  }

  type PageViewsGetPayload<S extends boolean | null | undefined | PageViewsDefaultArgs> = $Result.GetResult<Prisma.$PageViewsPayload, S>

  type PageViewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PageViewsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PageViewsCountAggregateInputType | true
    }

  export interface PageViewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageViews'], meta: { name: 'PageViews' } }
    /**
     * Find zero or one PageViews that matches the filter.
     * @param {PageViewsFindUniqueArgs} args - Arguments to find a PageViews
     * @example
     * // Get one PageViews
     * const pageViews = await prisma.pageViews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageViewsFindUniqueArgs>(args: SelectSubset<T, PageViewsFindUniqueArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PageViews that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PageViewsFindUniqueOrThrowArgs} args - Arguments to find a PageViews
     * @example
     * // Get one PageViews
     * const pageViews = await prisma.pageViews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageViewsFindUniqueOrThrowArgs>(args: SelectSubset<T, PageViewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PageViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsFindFirstArgs} args - Arguments to find a PageViews
     * @example
     * // Get one PageViews
     * const pageViews = await prisma.pageViews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageViewsFindFirstArgs>(args?: SelectSubset<T, PageViewsFindFirstArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PageViews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsFindFirstOrThrowArgs} args - Arguments to find a PageViews
     * @example
     * // Get one PageViews
     * const pageViews = await prisma.pageViews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageViewsFindFirstOrThrowArgs>(args?: SelectSubset<T, PageViewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PageViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageViews
     * const pageViews = await prisma.pageViews.findMany()
     * 
     * // Get first 10 PageViews
     * const pageViews = await prisma.pageViews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageViewsWithIdOnly = await prisma.pageViews.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageViewsFindManyArgs>(args?: SelectSubset<T, PageViewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PageViews.
     * @param {PageViewsCreateArgs} args - Arguments to create a PageViews.
     * @example
     * // Create one PageViews
     * const PageViews = await prisma.pageViews.create({
     *   data: {
     *     // ... data to create a PageViews
     *   }
     * })
     * 
     */
    create<T extends PageViewsCreateArgs>(args: SelectSubset<T, PageViewsCreateArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PageViews.
     * @param {PageViewsCreateManyArgs} args - Arguments to create many PageViews.
     * @example
     * // Create many PageViews
     * const pageViews = await prisma.pageViews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageViewsCreateManyArgs>(args?: SelectSubset<T, PageViewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PageViews and returns the data saved in the database.
     * @param {PageViewsCreateManyAndReturnArgs} args - Arguments to create many PageViews.
     * @example
     * // Create many PageViews
     * const pageViews = await prisma.pageViews.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PageViews and only return the `id`
     * const pageViewsWithIdOnly = await prisma.pageViews.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageViewsCreateManyAndReturnArgs>(args?: SelectSubset<T, PageViewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PageViews.
     * @param {PageViewsDeleteArgs} args - Arguments to delete one PageViews.
     * @example
     * // Delete one PageViews
     * const PageViews = await prisma.pageViews.delete({
     *   where: {
     *     // ... filter to delete one PageViews
     *   }
     * })
     * 
     */
    delete<T extends PageViewsDeleteArgs>(args: SelectSubset<T, PageViewsDeleteArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PageViews.
     * @param {PageViewsUpdateArgs} args - Arguments to update one PageViews.
     * @example
     * // Update one PageViews
     * const pageViews = await prisma.pageViews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageViewsUpdateArgs>(args: SelectSubset<T, PageViewsUpdateArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PageViews.
     * @param {PageViewsDeleteManyArgs} args - Arguments to filter PageViews to delete.
     * @example
     * // Delete a few PageViews
     * const { count } = await prisma.pageViews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageViewsDeleteManyArgs>(args?: SelectSubset<T, PageViewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageViews
     * const pageViews = await prisma.pageViews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageViewsUpdateManyArgs>(args: SelectSubset<T, PageViewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageViews and returns the data updated in the database.
     * @param {PageViewsUpdateManyAndReturnArgs} args - Arguments to update many PageViews.
     * @example
     * // Update many PageViews
     * const pageViews = await prisma.pageViews.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PageViews and only return the `id`
     * const pageViewsWithIdOnly = await prisma.pageViews.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PageViewsUpdateManyAndReturnArgs>(args: SelectSubset<T, PageViewsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PageViews.
     * @param {PageViewsUpsertArgs} args - Arguments to update or create a PageViews.
     * @example
     * // Update or create a PageViews
     * const pageViews = await prisma.pageViews.upsert({
     *   create: {
     *     // ... data to create a PageViews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageViews we want to update
     *   }
     * })
     */
    upsert<T extends PageViewsUpsertArgs>(args: SelectSubset<T, PageViewsUpsertArgs<ExtArgs>>): Prisma__PageViewsClient<$Result.GetResult<Prisma.$PageViewsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PageViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsCountArgs} args - Arguments to filter PageViews to count.
     * @example
     * // Count the number of PageViews
     * const count = await prisma.pageViews.count({
     *   where: {
     *     // ... the filter for the PageViews we want to count
     *   }
     * })
    **/
    count<T extends PageViewsCountArgs>(
      args?: Subset<T, PageViewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageViewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageViewsAggregateArgs>(args: Subset<T, PageViewsAggregateArgs>): Prisma.PrismaPromise<GetPageViewsAggregateType<T>>

    /**
     * Group by PageViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageViewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageViewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageViewsGroupByArgs['orderBy'] }
        : { orderBy?: PageViewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageViewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageViewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PageViews model
   */
  readonly fields: PageViewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PageViews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageViewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends PageViews$tenantArgs<ExtArgs> = {}>(args?: Subset<T, PageViews$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PageViews model
   */
  interface PageViewsFieldRefs {
    readonly id: FieldRef<"PageViews", 'Int'>
    readonly userId: FieldRef<"PageViews", 'String'>
    readonly tenantId: FieldRef<"PageViews", 'String'>
    readonly pagePath: FieldRef<"PageViews", 'String'>
    readonly pageTitle: FieldRef<"PageViews", 'String'>
    readonly timeSpent: FieldRef<"PageViews", 'Int'>
    readonly sessionId: FieldRef<"PageViews", 'String'>
    readonly referrer: FieldRef<"PageViews", 'String'>
    readonly userAgent: FieldRef<"PageViews", 'String'>
    readonly ipAddress: FieldRef<"PageViews", 'String'>
    readonly createdAt: FieldRef<"PageViews", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PageViews findUnique
   */
  export type PageViewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * Filter, which PageViews to fetch.
     */
    where: PageViewsWhereUniqueInput
  }

  /**
   * PageViews findUniqueOrThrow
   */
  export type PageViewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * Filter, which PageViews to fetch.
     */
    where: PageViewsWhereUniqueInput
  }

  /**
   * PageViews findFirst
   */
  export type PageViewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * Filter, which PageViews to fetch.
     */
    where?: PageViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViews to fetch.
     */
    orderBy?: PageViewsOrderByWithRelationInput | PageViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageViews.
     */
    cursor?: PageViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageViews.
     */
    distinct?: PageViewsScalarFieldEnum | PageViewsScalarFieldEnum[]
  }

  /**
   * PageViews findFirstOrThrow
   */
  export type PageViewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * Filter, which PageViews to fetch.
     */
    where?: PageViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViews to fetch.
     */
    orderBy?: PageViewsOrderByWithRelationInput | PageViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageViews.
     */
    cursor?: PageViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageViews.
     */
    distinct?: PageViewsScalarFieldEnum | PageViewsScalarFieldEnum[]
  }

  /**
   * PageViews findMany
   */
  export type PageViewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * Filter, which PageViews to fetch.
     */
    where?: PageViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageViews to fetch.
     */
    orderBy?: PageViewsOrderByWithRelationInput | PageViewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PageViews.
     */
    cursor?: PageViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageViews.
     */
    skip?: number
    distinct?: PageViewsScalarFieldEnum | PageViewsScalarFieldEnum[]
  }

  /**
   * PageViews create
   */
  export type PageViewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * The data needed to create a PageViews.
     */
    data: XOR<PageViewsCreateInput, PageViewsUncheckedCreateInput>
  }

  /**
   * PageViews createMany
   */
  export type PageViewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PageViews.
     */
    data: PageViewsCreateManyInput | PageViewsCreateManyInput[]
  }

  /**
   * PageViews createManyAndReturn
   */
  export type PageViewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * The data used to create many PageViews.
     */
    data: PageViewsCreateManyInput | PageViewsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PageViews update
   */
  export type PageViewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * The data needed to update a PageViews.
     */
    data: XOR<PageViewsUpdateInput, PageViewsUncheckedUpdateInput>
    /**
     * Choose, which PageViews to update.
     */
    where: PageViewsWhereUniqueInput
  }

  /**
   * PageViews updateMany
   */
  export type PageViewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PageViews.
     */
    data: XOR<PageViewsUpdateManyMutationInput, PageViewsUncheckedUpdateManyInput>
    /**
     * Filter which PageViews to update
     */
    where?: PageViewsWhereInput
    /**
     * Limit how many PageViews to update.
     */
    limit?: number
  }

  /**
   * PageViews updateManyAndReturn
   */
  export type PageViewsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * The data used to update PageViews.
     */
    data: XOR<PageViewsUpdateManyMutationInput, PageViewsUncheckedUpdateManyInput>
    /**
     * Filter which PageViews to update
     */
    where?: PageViewsWhereInput
    /**
     * Limit how many PageViews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PageViews upsert
   */
  export type PageViewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * The filter to search for the PageViews to update in case it exists.
     */
    where: PageViewsWhereUniqueInput
    /**
     * In case the PageViews found by the `where` argument doesn't exist, create a new PageViews with this data.
     */
    create: XOR<PageViewsCreateInput, PageViewsUncheckedCreateInput>
    /**
     * In case the PageViews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageViewsUpdateInput, PageViewsUncheckedUpdateInput>
  }

  /**
   * PageViews delete
   */
  export type PageViewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
    /**
     * Filter which PageViews to delete.
     */
    where: PageViewsWhereUniqueInput
  }

  /**
   * PageViews deleteMany
   */
  export type PageViewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageViews to delete
     */
    where?: PageViewsWhereInput
    /**
     * Limit how many PageViews to delete.
     */
    limit?: number
  }

  /**
   * PageViews.tenant
   */
  export type PageViews$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * PageViews without action
   */
  export type PageViewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageViews
     */
    select?: PageViewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PageViews
     */
    omit?: PageViewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageViewsInclude<ExtArgs> | null
  }


  /**
   * Model ModuleAnalytics
   */

  export type AggregateModuleAnalytics = {
    _count: ModuleAnalyticsCountAggregateOutputType | null
    _avg: ModuleAnalyticsAvgAggregateOutputType | null
    _sum: ModuleAnalyticsSumAggregateOutputType | null
    _min: ModuleAnalyticsMinAggregateOutputType | null
    _max: ModuleAnalyticsMaxAggregateOutputType | null
  }

  export type ModuleAnalyticsAvgAggregateOutputType = {
    id: number | null
    totalUsers: number | null
    activeUsers: number | null
    totalSessions: number | null
    totalPageViews: number | null
    avgSessionTime: number | null
  }

  export type ModuleAnalyticsSumAggregateOutputType = {
    id: number | null
    totalUsers: number | null
    activeUsers: number | null
    totalSessions: number | null
    totalPageViews: number | null
    avgSessionTime: number | null
  }

  export type ModuleAnalyticsMinAggregateOutputType = {
    id: number | null
    tenantId: string | null
    moduleName: string | null
    totalUsers: number | null
    activeUsers: number | null
    totalSessions: number | null
    totalPageViews: number | null
    avgSessionTime: number | null
    popularFeature: string | null
    period: string | null
    createdAt: Date | null
  }

  export type ModuleAnalyticsMaxAggregateOutputType = {
    id: number | null
    tenantId: string | null
    moduleName: string | null
    totalUsers: number | null
    activeUsers: number | null
    totalSessions: number | null
    totalPageViews: number | null
    avgSessionTime: number | null
    popularFeature: string | null
    period: string | null
    createdAt: Date | null
  }

  export type ModuleAnalyticsCountAggregateOutputType = {
    id: number
    tenantId: number
    moduleName: number
    totalUsers: number
    activeUsers: number
    totalSessions: number
    totalPageViews: number
    avgSessionTime: number
    popularFeature: number
    period: number
    createdAt: number
    _all: number
  }


  export type ModuleAnalyticsAvgAggregateInputType = {
    id?: true
    totalUsers?: true
    activeUsers?: true
    totalSessions?: true
    totalPageViews?: true
    avgSessionTime?: true
  }

  export type ModuleAnalyticsSumAggregateInputType = {
    id?: true
    totalUsers?: true
    activeUsers?: true
    totalSessions?: true
    totalPageViews?: true
    avgSessionTime?: true
  }

  export type ModuleAnalyticsMinAggregateInputType = {
    id?: true
    tenantId?: true
    moduleName?: true
    totalUsers?: true
    activeUsers?: true
    totalSessions?: true
    totalPageViews?: true
    avgSessionTime?: true
    popularFeature?: true
    period?: true
    createdAt?: true
  }

  export type ModuleAnalyticsMaxAggregateInputType = {
    id?: true
    tenantId?: true
    moduleName?: true
    totalUsers?: true
    activeUsers?: true
    totalSessions?: true
    totalPageViews?: true
    avgSessionTime?: true
    popularFeature?: true
    period?: true
    createdAt?: true
  }

  export type ModuleAnalyticsCountAggregateInputType = {
    id?: true
    tenantId?: true
    moduleName?: true
    totalUsers?: true
    activeUsers?: true
    totalSessions?: true
    totalPageViews?: true
    avgSessionTime?: true
    popularFeature?: true
    period?: true
    createdAt?: true
    _all?: true
  }

  export type ModuleAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModuleAnalytics to aggregate.
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleAnalytics to fetch.
     */
    orderBy?: ModuleAnalyticsOrderByWithRelationInput | ModuleAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModuleAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ModuleAnalytics
    **/
    _count?: true | ModuleAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModuleAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModuleAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModuleAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModuleAnalyticsMaxAggregateInputType
  }

  export type GetModuleAnalyticsAggregateType<T extends ModuleAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateModuleAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModuleAnalytics[P]>
      : GetScalarType<T[P], AggregateModuleAnalytics[P]>
  }




  export type ModuleAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModuleAnalyticsWhereInput
    orderBy?: ModuleAnalyticsOrderByWithAggregationInput | ModuleAnalyticsOrderByWithAggregationInput[]
    by: ModuleAnalyticsScalarFieldEnum[] | ModuleAnalyticsScalarFieldEnum
    having?: ModuleAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModuleAnalyticsCountAggregateInputType | true
    _avg?: ModuleAnalyticsAvgAggregateInputType
    _sum?: ModuleAnalyticsSumAggregateInputType
    _min?: ModuleAnalyticsMinAggregateInputType
    _max?: ModuleAnalyticsMaxAggregateInputType
  }

  export type ModuleAnalyticsGroupByOutputType = {
    id: number
    tenantId: string | null
    moduleName: string
    totalUsers: number
    activeUsers: number
    totalSessions: number
    totalPageViews: number
    avgSessionTime: number | null
    popularFeature: string | null
    period: string
    createdAt: Date
    _count: ModuleAnalyticsCountAggregateOutputType | null
    _avg: ModuleAnalyticsAvgAggregateOutputType | null
    _sum: ModuleAnalyticsSumAggregateOutputType | null
    _min: ModuleAnalyticsMinAggregateOutputType | null
    _max: ModuleAnalyticsMaxAggregateOutputType | null
  }

  type GetModuleAnalyticsGroupByPayload<T extends ModuleAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModuleAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModuleAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModuleAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], ModuleAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type ModuleAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    moduleName?: boolean
    totalUsers?: boolean
    activeUsers?: boolean
    totalSessions?: boolean
    totalPageViews?: boolean
    avgSessionTime?: boolean
    popularFeature?: boolean
    period?: boolean
    createdAt?: boolean
    tenant?: boolean | ModuleAnalytics$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["moduleAnalytics"]>

  export type ModuleAnalyticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    moduleName?: boolean
    totalUsers?: boolean
    activeUsers?: boolean
    totalSessions?: boolean
    totalPageViews?: boolean
    avgSessionTime?: boolean
    popularFeature?: boolean
    period?: boolean
    createdAt?: boolean
    tenant?: boolean | ModuleAnalytics$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["moduleAnalytics"]>

  export type ModuleAnalyticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    moduleName?: boolean
    totalUsers?: boolean
    activeUsers?: boolean
    totalSessions?: boolean
    totalPageViews?: boolean
    avgSessionTime?: boolean
    popularFeature?: boolean
    period?: boolean
    createdAt?: boolean
    tenant?: boolean | ModuleAnalytics$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["moduleAnalytics"]>

  export type ModuleAnalyticsSelectScalar = {
    id?: boolean
    tenantId?: boolean
    moduleName?: boolean
    totalUsers?: boolean
    activeUsers?: boolean
    totalSessions?: boolean
    totalPageViews?: boolean
    avgSessionTime?: boolean
    popularFeature?: boolean
    period?: boolean
    createdAt?: boolean
  }

  export type ModuleAnalyticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "moduleName" | "totalUsers" | "activeUsers" | "totalSessions" | "totalPageViews" | "avgSessionTime" | "popularFeature" | "period" | "createdAt", ExtArgs["result"]["moduleAnalytics"]>
  export type ModuleAnalyticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | ModuleAnalytics$tenantArgs<ExtArgs>
  }
  export type ModuleAnalyticsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | ModuleAnalytics$tenantArgs<ExtArgs>
  }
  export type ModuleAnalyticsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | ModuleAnalytics$tenantArgs<ExtArgs>
  }

  export type $ModuleAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ModuleAnalytics"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tenantId: string | null
      moduleName: string
      totalUsers: number
      activeUsers: number
      totalSessions: number
      totalPageViews: number
      avgSessionTime: number | null
      popularFeature: string | null
      period: string
      createdAt: Date
    }, ExtArgs["result"]["moduleAnalytics"]>
    composites: {}
  }

  type ModuleAnalyticsGetPayload<S extends boolean | null | undefined | ModuleAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$ModuleAnalyticsPayload, S>

  type ModuleAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ModuleAnalyticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ModuleAnalyticsCountAggregateInputType | true
    }

  export interface ModuleAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModuleAnalytics'], meta: { name: 'ModuleAnalytics' } }
    /**
     * Find zero or one ModuleAnalytics that matches the filter.
     * @param {ModuleAnalyticsFindUniqueArgs} args - Arguments to find a ModuleAnalytics
     * @example
     * // Get one ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModuleAnalyticsFindUniqueArgs>(args: SelectSubset<T, ModuleAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ModuleAnalytics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ModuleAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a ModuleAnalytics
     * @example
     * // Get one ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModuleAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, ModuleAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ModuleAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsFindFirstArgs} args - Arguments to find a ModuleAnalytics
     * @example
     * // Get one ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModuleAnalyticsFindFirstArgs>(args?: SelectSubset<T, ModuleAnalyticsFindFirstArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ModuleAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsFindFirstOrThrowArgs} args - Arguments to find a ModuleAnalytics
     * @example
     * // Get one ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModuleAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, ModuleAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ModuleAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.findMany()
     * 
     * // Get first 10 ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moduleAnalyticsWithIdOnly = await prisma.moduleAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModuleAnalyticsFindManyArgs>(args?: SelectSubset<T, ModuleAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ModuleAnalytics.
     * @param {ModuleAnalyticsCreateArgs} args - Arguments to create a ModuleAnalytics.
     * @example
     * // Create one ModuleAnalytics
     * const ModuleAnalytics = await prisma.moduleAnalytics.create({
     *   data: {
     *     // ... data to create a ModuleAnalytics
     *   }
     * })
     * 
     */
    create<T extends ModuleAnalyticsCreateArgs>(args: SelectSubset<T, ModuleAnalyticsCreateArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ModuleAnalytics.
     * @param {ModuleAnalyticsCreateManyArgs} args - Arguments to create many ModuleAnalytics.
     * @example
     * // Create many ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModuleAnalyticsCreateManyArgs>(args?: SelectSubset<T, ModuleAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ModuleAnalytics and returns the data saved in the database.
     * @param {ModuleAnalyticsCreateManyAndReturnArgs} args - Arguments to create many ModuleAnalytics.
     * @example
     * // Create many ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ModuleAnalytics and only return the `id`
     * const moduleAnalyticsWithIdOnly = await prisma.moduleAnalytics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModuleAnalyticsCreateManyAndReturnArgs>(args?: SelectSubset<T, ModuleAnalyticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ModuleAnalytics.
     * @param {ModuleAnalyticsDeleteArgs} args - Arguments to delete one ModuleAnalytics.
     * @example
     * // Delete one ModuleAnalytics
     * const ModuleAnalytics = await prisma.moduleAnalytics.delete({
     *   where: {
     *     // ... filter to delete one ModuleAnalytics
     *   }
     * })
     * 
     */
    delete<T extends ModuleAnalyticsDeleteArgs>(args: SelectSubset<T, ModuleAnalyticsDeleteArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ModuleAnalytics.
     * @param {ModuleAnalyticsUpdateArgs} args - Arguments to update one ModuleAnalytics.
     * @example
     * // Update one ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModuleAnalyticsUpdateArgs>(args: SelectSubset<T, ModuleAnalyticsUpdateArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ModuleAnalytics.
     * @param {ModuleAnalyticsDeleteManyArgs} args - Arguments to filter ModuleAnalytics to delete.
     * @example
     * // Delete a few ModuleAnalytics
     * const { count } = await prisma.moduleAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModuleAnalyticsDeleteManyArgs>(args?: SelectSubset<T, ModuleAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ModuleAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModuleAnalyticsUpdateManyArgs>(args: SelectSubset<T, ModuleAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ModuleAnalytics and returns the data updated in the database.
     * @param {ModuleAnalyticsUpdateManyAndReturnArgs} args - Arguments to update many ModuleAnalytics.
     * @example
     * // Update many ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ModuleAnalytics and only return the `id`
     * const moduleAnalyticsWithIdOnly = await prisma.moduleAnalytics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ModuleAnalyticsUpdateManyAndReturnArgs>(args: SelectSubset<T, ModuleAnalyticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ModuleAnalytics.
     * @param {ModuleAnalyticsUpsertArgs} args - Arguments to update or create a ModuleAnalytics.
     * @example
     * // Update or create a ModuleAnalytics
     * const moduleAnalytics = await prisma.moduleAnalytics.upsert({
     *   create: {
     *     // ... data to create a ModuleAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ModuleAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends ModuleAnalyticsUpsertArgs>(args: SelectSubset<T, ModuleAnalyticsUpsertArgs<ExtArgs>>): Prisma__ModuleAnalyticsClient<$Result.GetResult<Prisma.$ModuleAnalyticsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ModuleAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsCountArgs} args - Arguments to filter ModuleAnalytics to count.
     * @example
     * // Count the number of ModuleAnalytics
     * const count = await prisma.moduleAnalytics.count({
     *   where: {
     *     // ... the filter for the ModuleAnalytics we want to count
     *   }
     * })
    **/
    count<T extends ModuleAnalyticsCountArgs>(
      args?: Subset<T, ModuleAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModuleAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ModuleAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModuleAnalyticsAggregateArgs>(args: Subset<T, ModuleAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetModuleAnalyticsAggregateType<T>>

    /**
     * Group by ModuleAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModuleAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModuleAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: ModuleAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModuleAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModuleAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ModuleAnalytics model
   */
  readonly fields: ModuleAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ModuleAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModuleAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends ModuleAnalytics$tenantArgs<ExtArgs> = {}>(args?: Subset<T, ModuleAnalytics$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ModuleAnalytics model
   */
  interface ModuleAnalyticsFieldRefs {
    readonly id: FieldRef<"ModuleAnalytics", 'Int'>
    readonly tenantId: FieldRef<"ModuleAnalytics", 'String'>
    readonly moduleName: FieldRef<"ModuleAnalytics", 'String'>
    readonly totalUsers: FieldRef<"ModuleAnalytics", 'Int'>
    readonly activeUsers: FieldRef<"ModuleAnalytics", 'Int'>
    readonly totalSessions: FieldRef<"ModuleAnalytics", 'Int'>
    readonly totalPageViews: FieldRef<"ModuleAnalytics", 'Int'>
    readonly avgSessionTime: FieldRef<"ModuleAnalytics", 'Float'>
    readonly popularFeature: FieldRef<"ModuleAnalytics", 'String'>
    readonly period: FieldRef<"ModuleAnalytics", 'String'>
    readonly createdAt: FieldRef<"ModuleAnalytics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ModuleAnalytics findUnique
   */
  export type ModuleAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which ModuleAnalytics to fetch.
     */
    where: ModuleAnalyticsWhereUniqueInput
  }

  /**
   * ModuleAnalytics findUniqueOrThrow
   */
  export type ModuleAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which ModuleAnalytics to fetch.
     */
    where: ModuleAnalyticsWhereUniqueInput
  }

  /**
   * ModuleAnalytics findFirst
   */
  export type ModuleAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which ModuleAnalytics to fetch.
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleAnalytics to fetch.
     */
    orderBy?: ModuleAnalyticsOrderByWithRelationInput | ModuleAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModuleAnalytics.
     */
    cursor?: ModuleAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModuleAnalytics.
     */
    distinct?: ModuleAnalyticsScalarFieldEnum | ModuleAnalyticsScalarFieldEnum[]
  }

  /**
   * ModuleAnalytics findFirstOrThrow
   */
  export type ModuleAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which ModuleAnalytics to fetch.
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleAnalytics to fetch.
     */
    orderBy?: ModuleAnalyticsOrderByWithRelationInput | ModuleAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModuleAnalytics.
     */
    cursor?: ModuleAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModuleAnalytics.
     */
    distinct?: ModuleAnalyticsScalarFieldEnum | ModuleAnalyticsScalarFieldEnum[]
  }

  /**
   * ModuleAnalytics findMany
   */
  export type ModuleAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which ModuleAnalytics to fetch.
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleAnalytics to fetch.
     */
    orderBy?: ModuleAnalyticsOrderByWithRelationInput | ModuleAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ModuleAnalytics.
     */
    cursor?: ModuleAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleAnalytics.
     */
    skip?: number
    distinct?: ModuleAnalyticsScalarFieldEnum | ModuleAnalyticsScalarFieldEnum[]
  }

  /**
   * ModuleAnalytics create
   */
  export type ModuleAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to create a ModuleAnalytics.
     */
    data: XOR<ModuleAnalyticsCreateInput, ModuleAnalyticsUncheckedCreateInput>
  }

  /**
   * ModuleAnalytics createMany
   */
  export type ModuleAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ModuleAnalytics.
     */
    data: ModuleAnalyticsCreateManyInput | ModuleAnalyticsCreateManyInput[]
  }

  /**
   * ModuleAnalytics createManyAndReturn
   */
  export type ModuleAnalyticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to create many ModuleAnalytics.
     */
    data: ModuleAnalyticsCreateManyInput | ModuleAnalyticsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ModuleAnalytics update
   */
  export type ModuleAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to update a ModuleAnalytics.
     */
    data: XOR<ModuleAnalyticsUpdateInput, ModuleAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which ModuleAnalytics to update.
     */
    where: ModuleAnalyticsWhereUniqueInput
  }

  /**
   * ModuleAnalytics updateMany
   */
  export type ModuleAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ModuleAnalytics.
     */
    data: XOR<ModuleAnalyticsUpdateManyMutationInput, ModuleAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which ModuleAnalytics to update
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * Limit how many ModuleAnalytics to update.
     */
    limit?: number
  }

  /**
   * ModuleAnalytics updateManyAndReturn
   */
  export type ModuleAnalyticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to update ModuleAnalytics.
     */
    data: XOR<ModuleAnalyticsUpdateManyMutationInput, ModuleAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which ModuleAnalytics to update
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * Limit how many ModuleAnalytics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ModuleAnalytics upsert
   */
  export type ModuleAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * The filter to search for the ModuleAnalytics to update in case it exists.
     */
    where: ModuleAnalyticsWhereUniqueInput
    /**
     * In case the ModuleAnalytics found by the `where` argument doesn't exist, create a new ModuleAnalytics with this data.
     */
    create: XOR<ModuleAnalyticsCreateInput, ModuleAnalyticsUncheckedCreateInput>
    /**
     * In case the ModuleAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModuleAnalyticsUpdateInput, ModuleAnalyticsUncheckedUpdateInput>
  }

  /**
   * ModuleAnalytics delete
   */
  export type ModuleAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
    /**
     * Filter which ModuleAnalytics to delete.
     */
    where: ModuleAnalyticsWhereUniqueInput
  }

  /**
   * ModuleAnalytics deleteMany
   */
  export type ModuleAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModuleAnalytics to delete
     */
    where?: ModuleAnalyticsWhereInput
    /**
     * Limit how many ModuleAnalytics to delete.
     */
    limit?: number
  }

  /**
   * ModuleAnalytics.tenant
   */
  export type ModuleAnalytics$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * ModuleAnalytics without action
   */
  export type ModuleAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleAnalytics
     */
    select?: ModuleAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ModuleAnalytics
     */
    omit?: ModuleAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleAnalyticsInclude<ExtArgs> | null
  }


  /**
   * Model GeographicData
   */

  export type AggregateGeographicData = {
    _count: GeographicDataCountAggregateOutputType | null
    _avg: GeographicDataAvgAggregateOutputType | null
    _sum: GeographicDataSumAggregateOutputType | null
    _min: GeographicDataMinAggregateOutputType | null
    _max: GeographicDataMaxAggregateOutputType | null
  }

  export type GeographicDataAvgAggregateOutputType = {
    id: number | null
    populacao: number | null
    totalUsuarios: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    satisfacaoMedia: number | null
  }

  export type GeographicDataSumAggregateOutputType = {
    id: number | null
    populacao: number | null
    totalUsuarios: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    satisfacaoMedia: number | null
  }

  export type GeographicDataMinAggregateOutputType = {
    id: number | null
    tenantId: string | null
    cidade: string | null
    estado: string | null
    regiao: string | null
    populacao: number | null
    totalUsuarios: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    satisfacaoMedia: number | null
    period: string | null
    createdAt: Date | null
  }

  export type GeographicDataMaxAggregateOutputType = {
    id: number | null
    tenantId: string | null
    cidade: string | null
    estado: string | null
    regiao: string | null
    populacao: number | null
    totalUsuarios: number | null
    usuariosAtivos: number | null
    protocolosMes: number | null
    satisfacaoMedia: number | null
    period: string | null
    createdAt: Date | null
  }

  export type GeographicDataCountAggregateOutputType = {
    id: number
    tenantId: number
    cidade: number
    estado: number
    regiao: number
    populacao: number
    totalUsuarios: number
    usuariosAtivos: number
    protocolosMes: number
    satisfacaoMedia: number
    period: number
    createdAt: number
    _all: number
  }


  export type GeographicDataAvgAggregateInputType = {
    id?: true
    populacao?: true
    totalUsuarios?: true
    usuariosAtivos?: true
    protocolosMes?: true
    satisfacaoMedia?: true
  }

  export type GeographicDataSumAggregateInputType = {
    id?: true
    populacao?: true
    totalUsuarios?: true
    usuariosAtivos?: true
    protocolosMes?: true
    satisfacaoMedia?: true
  }

  export type GeographicDataMinAggregateInputType = {
    id?: true
    tenantId?: true
    cidade?: true
    estado?: true
    regiao?: true
    populacao?: true
    totalUsuarios?: true
    usuariosAtivos?: true
    protocolosMes?: true
    satisfacaoMedia?: true
    period?: true
    createdAt?: true
  }

  export type GeographicDataMaxAggregateInputType = {
    id?: true
    tenantId?: true
    cidade?: true
    estado?: true
    regiao?: true
    populacao?: true
    totalUsuarios?: true
    usuariosAtivos?: true
    protocolosMes?: true
    satisfacaoMedia?: true
    period?: true
    createdAt?: true
  }

  export type GeographicDataCountAggregateInputType = {
    id?: true
    tenantId?: true
    cidade?: true
    estado?: true
    regiao?: true
    populacao?: true
    totalUsuarios?: true
    usuariosAtivos?: true
    protocolosMes?: true
    satisfacaoMedia?: true
    period?: true
    createdAt?: true
    _all?: true
  }

  export type GeographicDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeographicData to aggregate.
     */
    where?: GeographicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeographicData to fetch.
     */
    orderBy?: GeographicDataOrderByWithRelationInput | GeographicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeographicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeographicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeographicData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeographicData
    **/
    _count?: true | GeographicDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeographicDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeographicDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeographicDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeographicDataMaxAggregateInputType
  }

  export type GetGeographicDataAggregateType<T extends GeographicDataAggregateArgs> = {
        [P in keyof T & keyof AggregateGeographicData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeographicData[P]>
      : GetScalarType<T[P], AggregateGeographicData[P]>
  }




  export type GeographicDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeographicDataWhereInput
    orderBy?: GeographicDataOrderByWithAggregationInput | GeographicDataOrderByWithAggregationInput[]
    by: GeographicDataScalarFieldEnum[] | GeographicDataScalarFieldEnum
    having?: GeographicDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeographicDataCountAggregateInputType | true
    _avg?: GeographicDataAvgAggregateInputType
    _sum?: GeographicDataSumAggregateInputType
    _min?: GeographicDataMinAggregateInputType
    _max?: GeographicDataMaxAggregateInputType
  }

  export type GeographicDataGroupByOutputType = {
    id: number
    tenantId: string | null
    cidade: string
    estado: string
    regiao: string
    populacao: number | null
    totalUsuarios: number
    usuariosAtivos: number
    protocolosMes: number
    satisfacaoMedia: number | null
    period: string
    createdAt: Date
    _count: GeographicDataCountAggregateOutputType | null
    _avg: GeographicDataAvgAggregateOutputType | null
    _sum: GeographicDataSumAggregateOutputType | null
    _min: GeographicDataMinAggregateOutputType | null
    _max: GeographicDataMaxAggregateOutputType | null
  }

  type GetGeographicDataGroupByPayload<T extends GeographicDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeographicDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeographicDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeographicDataGroupByOutputType[P]>
            : GetScalarType<T[P], GeographicDataGroupByOutputType[P]>
        }
      >
    >


  export type GeographicDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cidade?: boolean
    estado?: boolean
    regiao?: boolean
    populacao?: boolean
    totalUsuarios?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    satisfacaoMedia?: boolean
    period?: boolean
    createdAt?: boolean
    tenant?: boolean | GeographicData$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["geographicData"]>

  export type GeographicDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cidade?: boolean
    estado?: boolean
    regiao?: boolean
    populacao?: boolean
    totalUsuarios?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    satisfacaoMedia?: boolean
    period?: boolean
    createdAt?: boolean
    tenant?: boolean | GeographicData$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["geographicData"]>

  export type GeographicDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cidade?: boolean
    estado?: boolean
    regiao?: boolean
    populacao?: boolean
    totalUsuarios?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    satisfacaoMedia?: boolean
    period?: boolean
    createdAt?: boolean
    tenant?: boolean | GeographicData$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["geographicData"]>

  export type GeographicDataSelectScalar = {
    id?: boolean
    tenantId?: boolean
    cidade?: boolean
    estado?: boolean
    regiao?: boolean
    populacao?: boolean
    totalUsuarios?: boolean
    usuariosAtivos?: boolean
    protocolosMes?: boolean
    satisfacaoMedia?: boolean
    period?: boolean
    createdAt?: boolean
  }

  export type GeographicDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "cidade" | "estado" | "regiao" | "populacao" | "totalUsuarios" | "usuariosAtivos" | "protocolosMes" | "satisfacaoMedia" | "period" | "createdAt", ExtArgs["result"]["geographicData"]>
  export type GeographicDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | GeographicData$tenantArgs<ExtArgs>
  }
  export type GeographicDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | GeographicData$tenantArgs<ExtArgs>
  }
  export type GeographicDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | GeographicData$tenantArgs<ExtArgs>
  }

  export type $GeographicDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeographicData"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tenantId: string | null
      cidade: string
      estado: string
      regiao: string
      populacao: number | null
      totalUsuarios: number
      usuariosAtivos: number
      protocolosMes: number
      satisfacaoMedia: number | null
      period: string
      createdAt: Date
    }, ExtArgs["result"]["geographicData"]>
    composites: {}
  }

  type GeographicDataGetPayload<S extends boolean | null | undefined | GeographicDataDefaultArgs> = $Result.GetResult<Prisma.$GeographicDataPayload, S>

  type GeographicDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeographicDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeographicDataCountAggregateInputType | true
    }

  export interface GeographicDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeographicData'], meta: { name: 'GeographicData' } }
    /**
     * Find zero or one GeographicData that matches the filter.
     * @param {GeographicDataFindUniqueArgs} args - Arguments to find a GeographicData
     * @example
     * // Get one GeographicData
     * const geographicData = await prisma.geographicData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeographicDataFindUniqueArgs>(args: SelectSubset<T, GeographicDataFindUniqueArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeographicData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeographicDataFindUniqueOrThrowArgs} args - Arguments to find a GeographicData
     * @example
     * // Get one GeographicData
     * const geographicData = await prisma.geographicData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeographicDataFindUniqueOrThrowArgs>(args: SelectSubset<T, GeographicDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeographicData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataFindFirstArgs} args - Arguments to find a GeographicData
     * @example
     * // Get one GeographicData
     * const geographicData = await prisma.geographicData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeographicDataFindFirstArgs>(args?: SelectSubset<T, GeographicDataFindFirstArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeographicData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataFindFirstOrThrowArgs} args - Arguments to find a GeographicData
     * @example
     * // Get one GeographicData
     * const geographicData = await prisma.geographicData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeographicDataFindFirstOrThrowArgs>(args?: SelectSubset<T, GeographicDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeographicData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeographicData
     * const geographicData = await prisma.geographicData.findMany()
     * 
     * // Get first 10 GeographicData
     * const geographicData = await prisma.geographicData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const geographicDataWithIdOnly = await prisma.geographicData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeographicDataFindManyArgs>(args?: SelectSubset<T, GeographicDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeographicData.
     * @param {GeographicDataCreateArgs} args - Arguments to create a GeographicData.
     * @example
     * // Create one GeographicData
     * const GeographicData = await prisma.geographicData.create({
     *   data: {
     *     // ... data to create a GeographicData
     *   }
     * })
     * 
     */
    create<T extends GeographicDataCreateArgs>(args: SelectSubset<T, GeographicDataCreateArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeographicData.
     * @param {GeographicDataCreateManyArgs} args - Arguments to create many GeographicData.
     * @example
     * // Create many GeographicData
     * const geographicData = await prisma.geographicData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeographicDataCreateManyArgs>(args?: SelectSubset<T, GeographicDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GeographicData and returns the data saved in the database.
     * @param {GeographicDataCreateManyAndReturnArgs} args - Arguments to create many GeographicData.
     * @example
     * // Create many GeographicData
     * const geographicData = await prisma.geographicData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GeographicData and only return the `id`
     * const geographicDataWithIdOnly = await prisma.geographicData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeographicDataCreateManyAndReturnArgs>(args?: SelectSubset<T, GeographicDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GeographicData.
     * @param {GeographicDataDeleteArgs} args - Arguments to delete one GeographicData.
     * @example
     * // Delete one GeographicData
     * const GeographicData = await prisma.geographicData.delete({
     *   where: {
     *     // ... filter to delete one GeographicData
     *   }
     * })
     * 
     */
    delete<T extends GeographicDataDeleteArgs>(args: SelectSubset<T, GeographicDataDeleteArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeographicData.
     * @param {GeographicDataUpdateArgs} args - Arguments to update one GeographicData.
     * @example
     * // Update one GeographicData
     * const geographicData = await prisma.geographicData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeographicDataUpdateArgs>(args: SelectSubset<T, GeographicDataUpdateArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeographicData.
     * @param {GeographicDataDeleteManyArgs} args - Arguments to filter GeographicData to delete.
     * @example
     * // Delete a few GeographicData
     * const { count } = await prisma.geographicData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeographicDataDeleteManyArgs>(args?: SelectSubset<T, GeographicDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeographicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeographicData
     * const geographicData = await prisma.geographicData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeographicDataUpdateManyArgs>(args: SelectSubset<T, GeographicDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeographicData and returns the data updated in the database.
     * @param {GeographicDataUpdateManyAndReturnArgs} args - Arguments to update many GeographicData.
     * @example
     * // Update many GeographicData
     * const geographicData = await prisma.geographicData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GeographicData and only return the `id`
     * const geographicDataWithIdOnly = await prisma.geographicData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeographicDataUpdateManyAndReturnArgs>(args: SelectSubset<T, GeographicDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GeographicData.
     * @param {GeographicDataUpsertArgs} args - Arguments to update or create a GeographicData.
     * @example
     * // Update or create a GeographicData
     * const geographicData = await prisma.geographicData.upsert({
     *   create: {
     *     // ... data to create a GeographicData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeographicData we want to update
     *   }
     * })
     */
    upsert<T extends GeographicDataUpsertArgs>(args: SelectSubset<T, GeographicDataUpsertArgs<ExtArgs>>): Prisma__GeographicDataClient<$Result.GetResult<Prisma.$GeographicDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeographicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataCountArgs} args - Arguments to filter GeographicData to count.
     * @example
     * // Count the number of GeographicData
     * const count = await prisma.geographicData.count({
     *   where: {
     *     // ... the filter for the GeographicData we want to count
     *   }
     * })
    **/
    count<T extends GeographicDataCountArgs>(
      args?: Subset<T, GeographicDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeographicDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeographicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeographicDataAggregateArgs>(args: Subset<T, GeographicDataAggregateArgs>): Prisma.PrismaPromise<GetGeographicDataAggregateType<T>>

    /**
     * Group by GeographicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeographicDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeographicDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeographicDataGroupByArgs['orderBy'] }
        : { orderBy?: GeographicDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeographicDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeographicDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeographicData model
   */
  readonly fields: GeographicDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeographicData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeographicDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends GeographicData$tenantArgs<ExtArgs> = {}>(args?: Subset<T, GeographicData$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeographicData model
   */
  interface GeographicDataFieldRefs {
    readonly id: FieldRef<"GeographicData", 'Int'>
    readonly tenantId: FieldRef<"GeographicData", 'String'>
    readonly cidade: FieldRef<"GeographicData", 'String'>
    readonly estado: FieldRef<"GeographicData", 'String'>
    readonly regiao: FieldRef<"GeographicData", 'String'>
    readonly populacao: FieldRef<"GeographicData", 'Int'>
    readonly totalUsuarios: FieldRef<"GeographicData", 'Int'>
    readonly usuariosAtivos: FieldRef<"GeographicData", 'Int'>
    readonly protocolosMes: FieldRef<"GeographicData", 'Int'>
    readonly satisfacaoMedia: FieldRef<"GeographicData", 'Float'>
    readonly period: FieldRef<"GeographicData", 'String'>
    readonly createdAt: FieldRef<"GeographicData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeographicData findUnique
   */
  export type GeographicDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * Filter, which GeographicData to fetch.
     */
    where: GeographicDataWhereUniqueInput
  }

  /**
   * GeographicData findUniqueOrThrow
   */
  export type GeographicDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * Filter, which GeographicData to fetch.
     */
    where: GeographicDataWhereUniqueInput
  }

  /**
   * GeographicData findFirst
   */
  export type GeographicDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * Filter, which GeographicData to fetch.
     */
    where?: GeographicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeographicData to fetch.
     */
    orderBy?: GeographicDataOrderByWithRelationInput | GeographicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeographicData.
     */
    cursor?: GeographicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeographicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeographicData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeographicData.
     */
    distinct?: GeographicDataScalarFieldEnum | GeographicDataScalarFieldEnum[]
  }

  /**
   * GeographicData findFirstOrThrow
   */
  export type GeographicDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * Filter, which GeographicData to fetch.
     */
    where?: GeographicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeographicData to fetch.
     */
    orderBy?: GeographicDataOrderByWithRelationInput | GeographicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeographicData.
     */
    cursor?: GeographicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeographicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeographicData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeographicData.
     */
    distinct?: GeographicDataScalarFieldEnum | GeographicDataScalarFieldEnum[]
  }

  /**
   * GeographicData findMany
   */
  export type GeographicDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * Filter, which GeographicData to fetch.
     */
    where?: GeographicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeographicData to fetch.
     */
    orderBy?: GeographicDataOrderByWithRelationInput | GeographicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeographicData.
     */
    cursor?: GeographicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeographicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeographicData.
     */
    skip?: number
    distinct?: GeographicDataScalarFieldEnum | GeographicDataScalarFieldEnum[]
  }

  /**
   * GeographicData create
   */
  export type GeographicDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * The data needed to create a GeographicData.
     */
    data: XOR<GeographicDataCreateInput, GeographicDataUncheckedCreateInput>
  }

  /**
   * GeographicData createMany
   */
  export type GeographicDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeographicData.
     */
    data: GeographicDataCreateManyInput | GeographicDataCreateManyInput[]
  }

  /**
   * GeographicData createManyAndReturn
   */
  export type GeographicDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * The data used to create many GeographicData.
     */
    data: GeographicDataCreateManyInput | GeographicDataCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeographicData update
   */
  export type GeographicDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * The data needed to update a GeographicData.
     */
    data: XOR<GeographicDataUpdateInput, GeographicDataUncheckedUpdateInput>
    /**
     * Choose, which GeographicData to update.
     */
    where: GeographicDataWhereUniqueInput
  }

  /**
   * GeographicData updateMany
   */
  export type GeographicDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeographicData.
     */
    data: XOR<GeographicDataUpdateManyMutationInput, GeographicDataUncheckedUpdateManyInput>
    /**
     * Filter which GeographicData to update
     */
    where?: GeographicDataWhereInput
    /**
     * Limit how many GeographicData to update.
     */
    limit?: number
  }

  /**
   * GeographicData updateManyAndReturn
   */
  export type GeographicDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * The data used to update GeographicData.
     */
    data: XOR<GeographicDataUpdateManyMutationInput, GeographicDataUncheckedUpdateManyInput>
    /**
     * Filter which GeographicData to update
     */
    where?: GeographicDataWhereInput
    /**
     * Limit how many GeographicData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GeographicData upsert
   */
  export type GeographicDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * The filter to search for the GeographicData to update in case it exists.
     */
    where: GeographicDataWhereUniqueInput
    /**
     * In case the GeographicData found by the `where` argument doesn't exist, create a new GeographicData with this data.
     */
    create: XOR<GeographicDataCreateInput, GeographicDataUncheckedCreateInput>
    /**
     * In case the GeographicData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeographicDataUpdateInput, GeographicDataUncheckedUpdateInput>
  }

  /**
   * GeographicData delete
   */
  export type GeographicDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
    /**
     * Filter which GeographicData to delete.
     */
    where: GeographicDataWhereUniqueInput
  }

  /**
   * GeographicData deleteMany
   */
  export type GeographicDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeographicData to delete
     */
    where?: GeographicDataWhereInput
    /**
     * Limit how many GeographicData to delete.
     */
    limit?: number
  }

  /**
   * GeographicData.tenant
   */
  export type GeographicData$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * GeographicData without action
   */
  export type GeographicDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeographicData
     */
    select?: GeographicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeographicData
     */
    omit?: GeographicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeographicDataInclude<ExtArgs> | null
  }


  /**
   * Model AutomatedReports
   */

  export type AggregateAutomatedReports = {
    _count: AutomatedReportsCountAggregateOutputType | null
    _avg: AutomatedReportsAvgAggregateOutputType | null
    _sum: AutomatedReportsSumAggregateOutputType | null
    _min: AutomatedReportsMinAggregateOutputType | null
    _max: AutomatedReportsMaxAggregateOutputType | null
  }

  export type AutomatedReportsAvgAggregateOutputType = {
    id: number | null
  }

  export type AutomatedReportsSumAggregateOutputType = {
    id: number | null
  }

  export type AutomatedReportsMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    reportType: string | null
    frequency: string | null
    isActive: boolean | null
    config: string | null
    template: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AutomatedReportsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    reportType: string | null
    frequency: string | null
    isActive: boolean | null
    config: string | null
    template: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AutomatedReportsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    reportType: number
    frequency: number
    isActive: number
    config: number
    template: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AutomatedReportsAvgAggregateInputType = {
    id?: true
  }

  export type AutomatedReportsSumAggregateInputType = {
    id?: true
  }

  export type AutomatedReportsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    reportType?: true
    frequency?: true
    isActive?: true
    config?: true
    template?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AutomatedReportsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    reportType?: true
    frequency?: true
    isActive?: true
    config?: true
    template?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AutomatedReportsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    reportType?: true
    frequency?: true
    isActive?: true
    config?: true
    template?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AutomatedReportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AutomatedReports to aggregate.
     */
    where?: AutomatedReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutomatedReports to fetch.
     */
    orderBy?: AutomatedReportsOrderByWithRelationInput | AutomatedReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AutomatedReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutomatedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutomatedReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AutomatedReports
    **/
    _count?: true | AutomatedReportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AutomatedReportsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AutomatedReportsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AutomatedReportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AutomatedReportsMaxAggregateInputType
  }

  export type GetAutomatedReportsAggregateType<T extends AutomatedReportsAggregateArgs> = {
        [P in keyof T & keyof AggregateAutomatedReports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAutomatedReports[P]>
      : GetScalarType<T[P], AggregateAutomatedReports[P]>
  }




  export type AutomatedReportsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutomatedReportsWhereInput
    orderBy?: AutomatedReportsOrderByWithAggregationInput | AutomatedReportsOrderByWithAggregationInput[]
    by: AutomatedReportsScalarFieldEnum[] | AutomatedReportsScalarFieldEnum
    having?: AutomatedReportsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AutomatedReportsCountAggregateInputType | true
    _avg?: AutomatedReportsAvgAggregateInputType
    _sum?: AutomatedReportsSumAggregateInputType
    _min?: AutomatedReportsMinAggregateInputType
    _max?: AutomatedReportsMaxAggregateInputType
  }

  export type AutomatedReportsGroupByOutputType = {
    id: number
    name: string
    description: string | null
    reportType: string
    frequency: string
    isActive: boolean
    config: string
    template: string | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: AutomatedReportsCountAggregateOutputType | null
    _avg: AutomatedReportsAvgAggregateOutputType | null
    _sum: AutomatedReportsSumAggregateOutputType | null
    _min: AutomatedReportsMinAggregateOutputType | null
    _max: AutomatedReportsMaxAggregateOutputType | null
  }

  type GetAutomatedReportsGroupByPayload<T extends AutomatedReportsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AutomatedReportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AutomatedReportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AutomatedReportsGroupByOutputType[P]>
            : GetScalarType<T[P], AutomatedReportsGroupByOutputType[P]>
        }
      >
    >


  export type AutomatedReportsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    isActive?: boolean
    config?: boolean
    template?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    schedules?: boolean | AutomatedReports$schedulesArgs<ExtArgs>
    history?: boolean | AutomatedReports$historyArgs<ExtArgs>
    _count?: boolean | AutomatedReportsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["automatedReports"]>

  export type AutomatedReportsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    isActive?: boolean
    config?: boolean
    template?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["automatedReports"]>

  export type AutomatedReportsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    isActive?: boolean
    config?: boolean
    template?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["automatedReports"]>

  export type AutomatedReportsSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    reportType?: boolean
    frequency?: boolean
    isActive?: boolean
    config?: boolean
    template?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AutomatedReportsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "reportType" | "frequency" | "isActive" | "config" | "template" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["automatedReports"]>
  export type AutomatedReportsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    schedules?: boolean | AutomatedReports$schedulesArgs<ExtArgs>
    history?: boolean | AutomatedReports$historyArgs<ExtArgs>
    _count?: boolean | AutomatedReportsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AutomatedReportsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AutomatedReportsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AutomatedReportsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AutomatedReports"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      schedules: Prisma.$ReportSchedulesPayload<ExtArgs>[]
      history: Prisma.$ReportHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      reportType: string
      frequency: string
      isActive: boolean
      config: string
      template: string | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["automatedReports"]>
    composites: {}
  }

  type AutomatedReportsGetPayload<S extends boolean | null | undefined | AutomatedReportsDefaultArgs> = $Result.GetResult<Prisma.$AutomatedReportsPayload, S>

  type AutomatedReportsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AutomatedReportsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AutomatedReportsCountAggregateInputType | true
    }

  export interface AutomatedReportsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AutomatedReports'], meta: { name: 'AutomatedReports' } }
    /**
     * Find zero or one AutomatedReports that matches the filter.
     * @param {AutomatedReportsFindUniqueArgs} args - Arguments to find a AutomatedReports
     * @example
     * // Get one AutomatedReports
     * const automatedReports = await prisma.automatedReports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AutomatedReportsFindUniqueArgs>(args: SelectSubset<T, AutomatedReportsFindUniqueArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AutomatedReports that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AutomatedReportsFindUniqueOrThrowArgs} args - Arguments to find a AutomatedReports
     * @example
     * // Get one AutomatedReports
     * const automatedReports = await prisma.automatedReports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AutomatedReportsFindUniqueOrThrowArgs>(args: SelectSubset<T, AutomatedReportsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AutomatedReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsFindFirstArgs} args - Arguments to find a AutomatedReports
     * @example
     * // Get one AutomatedReports
     * const automatedReports = await prisma.automatedReports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AutomatedReportsFindFirstArgs>(args?: SelectSubset<T, AutomatedReportsFindFirstArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AutomatedReports that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsFindFirstOrThrowArgs} args - Arguments to find a AutomatedReports
     * @example
     * // Get one AutomatedReports
     * const automatedReports = await prisma.automatedReports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AutomatedReportsFindFirstOrThrowArgs>(args?: SelectSubset<T, AutomatedReportsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AutomatedReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AutomatedReports
     * const automatedReports = await prisma.automatedReports.findMany()
     * 
     * // Get first 10 AutomatedReports
     * const automatedReports = await prisma.automatedReports.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const automatedReportsWithIdOnly = await prisma.automatedReports.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AutomatedReportsFindManyArgs>(args?: SelectSubset<T, AutomatedReportsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AutomatedReports.
     * @param {AutomatedReportsCreateArgs} args - Arguments to create a AutomatedReports.
     * @example
     * // Create one AutomatedReports
     * const AutomatedReports = await prisma.automatedReports.create({
     *   data: {
     *     // ... data to create a AutomatedReports
     *   }
     * })
     * 
     */
    create<T extends AutomatedReportsCreateArgs>(args: SelectSubset<T, AutomatedReportsCreateArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AutomatedReports.
     * @param {AutomatedReportsCreateManyArgs} args - Arguments to create many AutomatedReports.
     * @example
     * // Create many AutomatedReports
     * const automatedReports = await prisma.automatedReports.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AutomatedReportsCreateManyArgs>(args?: SelectSubset<T, AutomatedReportsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AutomatedReports and returns the data saved in the database.
     * @param {AutomatedReportsCreateManyAndReturnArgs} args - Arguments to create many AutomatedReports.
     * @example
     * // Create many AutomatedReports
     * const automatedReports = await prisma.automatedReports.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AutomatedReports and only return the `id`
     * const automatedReportsWithIdOnly = await prisma.automatedReports.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AutomatedReportsCreateManyAndReturnArgs>(args?: SelectSubset<T, AutomatedReportsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AutomatedReports.
     * @param {AutomatedReportsDeleteArgs} args - Arguments to delete one AutomatedReports.
     * @example
     * // Delete one AutomatedReports
     * const AutomatedReports = await prisma.automatedReports.delete({
     *   where: {
     *     // ... filter to delete one AutomatedReports
     *   }
     * })
     * 
     */
    delete<T extends AutomatedReportsDeleteArgs>(args: SelectSubset<T, AutomatedReportsDeleteArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AutomatedReports.
     * @param {AutomatedReportsUpdateArgs} args - Arguments to update one AutomatedReports.
     * @example
     * // Update one AutomatedReports
     * const automatedReports = await prisma.automatedReports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AutomatedReportsUpdateArgs>(args: SelectSubset<T, AutomatedReportsUpdateArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AutomatedReports.
     * @param {AutomatedReportsDeleteManyArgs} args - Arguments to filter AutomatedReports to delete.
     * @example
     * // Delete a few AutomatedReports
     * const { count } = await prisma.automatedReports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AutomatedReportsDeleteManyArgs>(args?: SelectSubset<T, AutomatedReportsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AutomatedReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AutomatedReports
     * const automatedReports = await prisma.automatedReports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AutomatedReportsUpdateManyArgs>(args: SelectSubset<T, AutomatedReportsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AutomatedReports and returns the data updated in the database.
     * @param {AutomatedReportsUpdateManyAndReturnArgs} args - Arguments to update many AutomatedReports.
     * @example
     * // Update many AutomatedReports
     * const automatedReports = await prisma.automatedReports.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AutomatedReports and only return the `id`
     * const automatedReportsWithIdOnly = await prisma.automatedReports.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AutomatedReportsUpdateManyAndReturnArgs>(args: SelectSubset<T, AutomatedReportsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AutomatedReports.
     * @param {AutomatedReportsUpsertArgs} args - Arguments to update or create a AutomatedReports.
     * @example
     * // Update or create a AutomatedReports
     * const automatedReports = await prisma.automatedReports.upsert({
     *   create: {
     *     // ... data to create a AutomatedReports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AutomatedReports we want to update
     *   }
     * })
     */
    upsert<T extends AutomatedReportsUpsertArgs>(args: SelectSubset<T, AutomatedReportsUpsertArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AutomatedReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsCountArgs} args - Arguments to filter AutomatedReports to count.
     * @example
     * // Count the number of AutomatedReports
     * const count = await prisma.automatedReports.count({
     *   where: {
     *     // ... the filter for the AutomatedReports we want to count
     *   }
     * })
    **/
    count<T extends AutomatedReportsCountArgs>(
      args?: Subset<T, AutomatedReportsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AutomatedReportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AutomatedReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AutomatedReportsAggregateArgs>(args: Subset<T, AutomatedReportsAggregateArgs>): Prisma.PrismaPromise<GetAutomatedReportsAggregateType<T>>

    /**
     * Group by AutomatedReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomatedReportsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AutomatedReportsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AutomatedReportsGroupByArgs['orderBy'] }
        : { orderBy?: AutomatedReportsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AutomatedReportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAutomatedReportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AutomatedReports model
   */
  readonly fields: AutomatedReportsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AutomatedReports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AutomatedReportsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    schedules<T extends AutomatedReports$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, AutomatedReports$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends AutomatedReports$historyArgs<ExtArgs> = {}>(args?: Subset<T, AutomatedReports$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AutomatedReports model
   */
  interface AutomatedReportsFieldRefs {
    readonly id: FieldRef<"AutomatedReports", 'Int'>
    readonly name: FieldRef<"AutomatedReports", 'String'>
    readonly description: FieldRef<"AutomatedReports", 'String'>
    readonly reportType: FieldRef<"AutomatedReports", 'String'>
    readonly frequency: FieldRef<"AutomatedReports", 'String'>
    readonly isActive: FieldRef<"AutomatedReports", 'Boolean'>
    readonly config: FieldRef<"AutomatedReports", 'String'>
    readonly template: FieldRef<"AutomatedReports", 'String'>
    readonly createdBy: FieldRef<"AutomatedReports", 'String'>
    readonly createdAt: FieldRef<"AutomatedReports", 'DateTime'>
    readonly updatedAt: FieldRef<"AutomatedReports", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AutomatedReports findUnique
   */
  export type AutomatedReportsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * Filter, which AutomatedReports to fetch.
     */
    where: AutomatedReportsWhereUniqueInput
  }

  /**
   * AutomatedReports findUniqueOrThrow
   */
  export type AutomatedReportsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * Filter, which AutomatedReports to fetch.
     */
    where: AutomatedReportsWhereUniqueInput
  }

  /**
   * AutomatedReports findFirst
   */
  export type AutomatedReportsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * Filter, which AutomatedReports to fetch.
     */
    where?: AutomatedReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutomatedReports to fetch.
     */
    orderBy?: AutomatedReportsOrderByWithRelationInput | AutomatedReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AutomatedReports.
     */
    cursor?: AutomatedReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutomatedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutomatedReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AutomatedReports.
     */
    distinct?: AutomatedReportsScalarFieldEnum | AutomatedReportsScalarFieldEnum[]
  }

  /**
   * AutomatedReports findFirstOrThrow
   */
  export type AutomatedReportsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * Filter, which AutomatedReports to fetch.
     */
    where?: AutomatedReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutomatedReports to fetch.
     */
    orderBy?: AutomatedReportsOrderByWithRelationInput | AutomatedReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AutomatedReports.
     */
    cursor?: AutomatedReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutomatedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutomatedReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AutomatedReports.
     */
    distinct?: AutomatedReportsScalarFieldEnum | AutomatedReportsScalarFieldEnum[]
  }

  /**
   * AutomatedReports findMany
   */
  export type AutomatedReportsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * Filter, which AutomatedReports to fetch.
     */
    where?: AutomatedReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AutomatedReports to fetch.
     */
    orderBy?: AutomatedReportsOrderByWithRelationInput | AutomatedReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AutomatedReports.
     */
    cursor?: AutomatedReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AutomatedReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AutomatedReports.
     */
    skip?: number
    distinct?: AutomatedReportsScalarFieldEnum | AutomatedReportsScalarFieldEnum[]
  }

  /**
   * AutomatedReports create
   */
  export type AutomatedReportsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * The data needed to create a AutomatedReports.
     */
    data: XOR<AutomatedReportsCreateInput, AutomatedReportsUncheckedCreateInput>
  }

  /**
   * AutomatedReports createMany
   */
  export type AutomatedReportsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AutomatedReports.
     */
    data: AutomatedReportsCreateManyInput | AutomatedReportsCreateManyInput[]
  }

  /**
   * AutomatedReports createManyAndReturn
   */
  export type AutomatedReportsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * The data used to create many AutomatedReports.
     */
    data: AutomatedReportsCreateManyInput | AutomatedReportsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AutomatedReports update
   */
  export type AutomatedReportsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * The data needed to update a AutomatedReports.
     */
    data: XOR<AutomatedReportsUpdateInput, AutomatedReportsUncheckedUpdateInput>
    /**
     * Choose, which AutomatedReports to update.
     */
    where: AutomatedReportsWhereUniqueInput
  }

  /**
   * AutomatedReports updateMany
   */
  export type AutomatedReportsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AutomatedReports.
     */
    data: XOR<AutomatedReportsUpdateManyMutationInput, AutomatedReportsUncheckedUpdateManyInput>
    /**
     * Filter which AutomatedReports to update
     */
    where?: AutomatedReportsWhereInput
    /**
     * Limit how many AutomatedReports to update.
     */
    limit?: number
  }

  /**
   * AutomatedReports updateManyAndReturn
   */
  export type AutomatedReportsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * The data used to update AutomatedReports.
     */
    data: XOR<AutomatedReportsUpdateManyMutationInput, AutomatedReportsUncheckedUpdateManyInput>
    /**
     * Filter which AutomatedReports to update
     */
    where?: AutomatedReportsWhereInput
    /**
     * Limit how many AutomatedReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AutomatedReports upsert
   */
  export type AutomatedReportsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * The filter to search for the AutomatedReports to update in case it exists.
     */
    where: AutomatedReportsWhereUniqueInput
    /**
     * In case the AutomatedReports found by the `where` argument doesn't exist, create a new AutomatedReports with this data.
     */
    create: XOR<AutomatedReportsCreateInput, AutomatedReportsUncheckedCreateInput>
    /**
     * In case the AutomatedReports was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AutomatedReportsUpdateInput, AutomatedReportsUncheckedUpdateInput>
  }

  /**
   * AutomatedReports delete
   */
  export type AutomatedReportsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
    /**
     * Filter which AutomatedReports to delete.
     */
    where: AutomatedReportsWhereUniqueInput
  }

  /**
   * AutomatedReports deleteMany
   */
  export type AutomatedReportsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AutomatedReports to delete
     */
    where?: AutomatedReportsWhereInput
    /**
     * Limit how many AutomatedReports to delete.
     */
    limit?: number
  }

  /**
   * AutomatedReports.schedules
   */
  export type AutomatedReports$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    where?: ReportSchedulesWhereInput
    orderBy?: ReportSchedulesOrderByWithRelationInput | ReportSchedulesOrderByWithRelationInput[]
    cursor?: ReportSchedulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportSchedulesScalarFieldEnum | ReportSchedulesScalarFieldEnum[]
  }

  /**
   * AutomatedReports.history
   */
  export type AutomatedReports$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    where?: ReportHistoryWhereInput
    orderBy?: ReportHistoryOrderByWithRelationInput | ReportHistoryOrderByWithRelationInput[]
    cursor?: ReportHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportHistoryScalarFieldEnum | ReportHistoryScalarFieldEnum[]
  }

  /**
   * AutomatedReports without action
   */
  export type AutomatedReportsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomatedReports
     */
    select?: AutomatedReportsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AutomatedReports
     */
    omit?: AutomatedReportsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomatedReportsInclude<ExtArgs> | null
  }


  /**
   * Model ReportSchedules
   */

  export type AggregateReportSchedules = {
    _count: ReportSchedulesCountAggregateOutputType | null
    _avg: ReportSchedulesAvgAggregateOutputType | null
    _sum: ReportSchedulesSumAggregateOutputType | null
    _min: ReportSchedulesMinAggregateOutputType | null
    _max: ReportSchedulesMaxAggregateOutputType | null
  }

  export type ReportSchedulesAvgAggregateOutputType = {
    id: number | null
    reportId: number | null
  }

  export type ReportSchedulesSumAggregateOutputType = {
    id: number | null
    reportId: number | null
  }

  export type ReportSchedulesMinAggregateOutputType = {
    id: number | null
    reportId: number | null
    cronExpression: string | null
    timezone: string | null
    nextRun: Date | null
    lastRun: Date | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type ReportSchedulesMaxAggregateOutputType = {
    id: number | null
    reportId: number | null
    cronExpression: string | null
    timezone: string | null
    nextRun: Date | null
    lastRun: Date | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type ReportSchedulesCountAggregateOutputType = {
    id: number
    reportId: number
    cronExpression: number
    timezone: number
    nextRun: number
    lastRun: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type ReportSchedulesAvgAggregateInputType = {
    id?: true
    reportId?: true
  }

  export type ReportSchedulesSumAggregateInputType = {
    id?: true
    reportId?: true
  }

  export type ReportSchedulesMinAggregateInputType = {
    id?: true
    reportId?: true
    cronExpression?: true
    timezone?: true
    nextRun?: true
    lastRun?: true
    isActive?: true
    createdAt?: true
  }

  export type ReportSchedulesMaxAggregateInputType = {
    id?: true
    reportId?: true
    cronExpression?: true
    timezone?: true
    nextRun?: true
    lastRun?: true
    isActive?: true
    createdAt?: true
  }

  export type ReportSchedulesCountAggregateInputType = {
    id?: true
    reportId?: true
    cronExpression?: true
    timezone?: true
    nextRun?: true
    lastRun?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type ReportSchedulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportSchedules to aggregate.
     */
    where?: ReportSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSchedules to fetch.
     */
    orderBy?: ReportSchedulesOrderByWithRelationInput | ReportSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportSchedules
    **/
    _count?: true | ReportSchedulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportSchedulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSchedulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportSchedulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportSchedulesMaxAggregateInputType
  }

  export type GetReportSchedulesAggregateType<T extends ReportSchedulesAggregateArgs> = {
        [P in keyof T & keyof AggregateReportSchedules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportSchedules[P]>
      : GetScalarType<T[P], AggregateReportSchedules[P]>
  }




  export type ReportSchedulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportSchedulesWhereInput
    orderBy?: ReportSchedulesOrderByWithAggregationInput | ReportSchedulesOrderByWithAggregationInput[]
    by: ReportSchedulesScalarFieldEnum[] | ReportSchedulesScalarFieldEnum
    having?: ReportSchedulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportSchedulesCountAggregateInputType | true
    _avg?: ReportSchedulesAvgAggregateInputType
    _sum?: ReportSchedulesSumAggregateInputType
    _min?: ReportSchedulesMinAggregateInputType
    _max?: ReportSchedulesMaxAggregateInputType
  }

  export type ReportSchedulesGroupByOutputType = {
    id: number
    reportId: number
    cronExpression: string
    timezone: string
    nextRun: Date
    lastRun: Date | null
    isActive: boolean
    createdAt: Date
    _count: ReportSchedulesCountAggregateOutputType | null
    _avg: ReportSchedulesAvgAggregateOutputType | null
    _sum: ReportSchedulesSumAggregateOutputType | null
    _min: ReportSchedulesMinAggregateOutputType | null
    _max: ReportSchedulesMaxAggregateOutputType | null
  }

  type GetReportSchedulesGroupByPayload<T extends ReportSchedulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportSchedulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportSchedulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportSchedulesGroupByOutputType[P]>
            : GetScalarType<T[P], ReportSchedulesGroupByOutputType[P]>
        }
      >
    >


  export type ReportSchedulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    nextRun?: boolean
    lastRun?: boolean
    isActive?: boolean
    createdAt?: boolean
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
    recipients?: boolean | ReportSchedules$recipientsArgs<ExtArgs>
    _count?: boolean | ReportSchedulesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportSchedules"]>

  export type ReportSchedulesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    nextRun?: boolean
    lastRun?: boolean
    isActive?: boolean
    createdAt?: boolean
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportSchedules"]>

  export type ReportSchedulesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    nextRun?: boolean
    lastRun?: boolean
    isActive?: boolean
    createdAt?: boolean
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportSchedules"]>

  export type ReportSchedulesSelectScalar = {
    id?: boolean
    reportId?: boolean
    cronExpression?: boolean
    timezone?: boolean
    nextRun?: boolean
    lastRun?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type ReportSchedulesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "cronExpression" | "timezone" | "nextRun" | "lastRun" | "isActive" | "createdAt", ExtArgs["result"]["reportSchedules"]>
  export type ReportSchedulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
    recipients?: boolean | ReportSchedules$recipientsArgs<ExtArgs>
    _count?: boolean | ReportSchedulesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportSchedulesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }
  export type ReportSchedulesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }

  export type $ReportSchedulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportSchedules"
    objects: {
      report: Prisma.$AutomatedReportsPayload<ExtArgs>
      recipients: Prisma.$ReportRecipientsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reportId: number
      cronExpression: string
      timezone: string
      nextRun: Date
      lastRun: Date | null
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["reportSchedules"]>
    composites: {}
  }

  type ReportSchedulesGetPayload<S extends boolean | null | undefined | ReportSchedulesDefaultArgs> = $Result.GetResult<Prisma.$ReportSchedulesPayload, S>

  type ReportSchedulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportSchedulesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportSchedulesCountAggregateInputType | true
    }

  export interface ReportSchedulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportSchedules'], meta: { name: 'ReportSchedules' } }
    /**
     * Find zero or one ReportSchedules that matches the filter.
     * @param {ReportSchedulesFindUniqueArgs} args - Arguments to find a ReportSchedules
     * @example
     * // Get one ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportSchedulesFindUniqueArgs>(args: SelectSubset<T, ReportSchedulesFindUniqueArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportSchedules that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportSchedulesFindUniqueOrThrowArgs} args - Arguments to find a ReportSchedules
     * @example
     * // Get one ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportSchedulesFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportSchedulesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesFindFirstArgs} args - Arguments to find a ReportSchedules
     * @example
     * // Get one ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportSchedulesFindFirstArgs>(args?: SelectSubset<T, ReportSchedulesFindFirstArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportSchedules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesFindFirstOrThrowArgs} args - Arguments to find a ReportSchedules
     * @example
     * // Get one ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportSchedulesFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportSchedulesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.findMany()
     * 
     * // Get first 10 ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportSchedulesWithIdOnly = await prisma.reportSchedules.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportSchedulesFindManyArgs>(args?: SelectSubset<T, ReportSchedulesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportSchedules.
     * @param {ReportSchedulesCreateArgs} args - Arguments to create a ReportSchedules.
     * @example
     * // Create one ReportSchedules
     * const ReportSchedules = await prisma.reportSchedules.create({
     *   data: {
     *     // ... data to create a ReportSchedules
     *   }
     * })
     * 
     */
    create<T extends ReportSchedulesCreateArgs>(args: SelectSubset<T, ReportSchedulesCreateArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportSchedules.
     * @param {ReportSchedulesCreateManyArgs} args - Arguments to create many ReportSchedules.
     * @example
     * // Create many ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportSchedulesCreateManyArgs>(args?: SelectSubset<T, ReportSchedulesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportSchedules and returns the data saved in the database.
     * @param {ReportSchedulesCreateManyAndReturnArgs} args - Arguments to create many ReportSchedules.
     * @example
     * // Create many ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportSchedules and only return the `id`
     * const reportSchedulesWithIdOnly = await prisma.reportSchedules.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportSchedulesCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportSchedulesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportSchedules.
     * @param {ReportSchedulesDeleteArgs} args - Arguments to delete one ReportSchedules.
     * @example
     * // Delete one ReportSchedules
     * const ReportSchedules = await prisma.reportSchedules.delete({
     *   where: {
     *     // ... filter to delete one ReportSchedules
     *   }
     * })
     * 
     */
    delete<T extends ReportSchedulesDeleteArgs>(args: SelectSubset<T, ReportSchedulesDeleteArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportSchedules.
     * @param {ReportSchedulesUpdateArgs} args - Arguments to update one ReportSchedules.
     * @example
     * // Update one ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportSchedulesUpdateArgs>(args: SelectSubset<T, ReportSchedulesUpdateArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportSchedules.
     * @param {ReportSchedulesDeleteManyArgs} args - Arguments to filter ReportSchedules to delete.
     * @example
     * // Delete a few ReportSchedules
     * const { count } = await prisma.reportSchedules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportSchedulesDeleteManyArgs>(args?: SelectSubset<T, ReportSchedulesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportSchedulesUpdateManyArgs>(args: SelectSubset<T, ReportSchedulesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportSchedules and returns the data updated in the database.
     * @param {ReportSchedulesUpdateManyAndReturnArgs} args - Arguments to update many ReportSchedules.
     * @example
     * // Update many ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportSchedules and only return the `id`
     * const reportSchedulesWithIdOnly = await prisma.reportSchedules.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportSchedulesUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportSchedulesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportSchedules.
     * @param {ReportSchedulesUpsertArgs} args - Arguments to update or create a ReportSchedules.
     * @example
     * // Update or create a ReportSchedules
     * const reportSchedules = await prisma.reportSchedules.upsert({
     *   create: {
     *     // ... data to create a ReportSchedules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportSchedules we want to update
     *   }
     * })
     */
    upsert<T extends ReportSchedulesUpsertArgs>(args: SelectSubset<T, ReportSchedulesUpsertArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesCountArgs} args - Arguments to filter ReportSchedules to count.
     * @example
     * // Count the number of ReportSchedules
     * const count = await prisma.reportSchedules.count({
     *   where: {
     *     // ... the filter for the ReportSchedules we want to count
     *   }
     * })
    **/
    count<T extends ReportSchedulesCountArgs>(
      args?: Subset<T, ReportSchedulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportSchedulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportSchedulesAggregateArgs>(args: Subset<T, ReportSchedulesAggregateArgs>): Prisma.PrismaPromise<GetReportSchedulesAggregateType<T>>

    /**
     * Group by ReportSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportSchedulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportSchedulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportSchedulesGroupByArgs['orderBy'] }
        : { orderBy?: ReportSchedulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportSchedulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportSchedulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportSchedules model
   */
  readonly fields: ReportSchedulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportSchedules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportSchedulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends AutomatedReportsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AutomatedReportsDefaultArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recipients<T extends ReportSchedules$recipientsArgs<ExtArgs> = {}>(args?: Subset<T, ReportSchedules$recipientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportSchedules model
   */
  interface ReportSchedulesFieldRefs {
    readonly id: FieldRef<"ReportSchedules", 'Int'>
    readonly reportId: FieldRef<"ReportSchedules", 'Int'>
    readonly cronExpression: FieldRef<"ReportSchedules", 'String'>
    readonly timezone: FieldRef<"ReportSchedules", 'String'>
    readonly nextRun: FieldRef<"ReportSchedules", 'DateTime'>
    readonly lastRun: FieldRef<"ReportSchedules", 'DateTime'>
    readonly isActive: FieldRef<"ReportSchedules", 'Boolean'>
    readonly createdAt: FieldRef<"ReportSchedules", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportSchedules findUnique
   */
  export type ReportSchedulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which ReportSchedules to fetch.
     */
    where: ReportSchedulesWhereUniqueInput
  }

  /**
   * ReportSchedules findUniqueOrThrow
   */
  export type ReportSchedulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which ReportSchedules to fetch.
     */
    where: ReportSchedulesWhereUniqueInput
  }

  /**
   * ReportSchedules findFirst
   */
  export type ReportSchedulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which ReportSchedules to fetch.
     */
    where?: ReportSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSchedules to fetch.
     */
    orderBy?: ReportSchedulesOrderByWithRelationInput | ReportSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportSchedules.
     */
    cursor?: ReportSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportSchedules.
     */
    distinct?: ReportSchedulesScalarFieldEnum | ReportSchedulesScalarFieldEnum[]
  }

  /**
   * ReportSchedules findFirstOrThrow
   */
  export type ReportSchedulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which ReportSchedules to fetch.
     */
    where?: ReportSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSchedules to fetch.
     */
    orderBy?: ReportSchedulesOrderByWithRelationInput | ReportSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportSchedules.
     */
    cursor?: ReportSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportSchedules.
     */
    distinct?: ReportSchedulesScalarFieldEnum | ReportSchedulesScalarFieldEnum[]
  }

  /**
   * ReportSchedules findMany
   */
  export type ReportSchedulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which ReportSchedules to fetch.
     */
    where?: ReportSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportSchedules to fetch.
     */
    orderBy?: ReportSchedulesOrderByWithRelationInput | ReportSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportSchedules.
     */
    cursor?: ReportSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportSchedules.
     */
    skip?: number
    distinct?: ReportSchedulesScalarFieldEnum | ReportSchedulesScalarFieldEnum[]
  }

  /**
   * ReportSchedules create
   */
  export type ReportSchedulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportSchedules.
     */
    data: XOR<ReportSchedulesCreateInput, ReportSchedulesUncheckedCreateInput>
  }

  /**
   * ReportSchedules createMany
   */
  export type ReportSchedulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportSchedules.
     */
    data: ReportSchedulesCreateManyInput | ReportSchedulesCreateManyInput[]
  }

  /**
   * ReportSchedules createManyAndReturn
   */
  export type ReportSchedulesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * The data used to create many ReportSchedules.
     */
    data: ReportSchedulesCreateManyInput | ReportSchedulesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportSchedules update
   */
  export type ReportSchedulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportSchedules.
     */
    data: XOR<ReportSchedulesUpdateInput, ReportSchedulesUncheckedUpdateInput>
    /**
     * Choose, which ReportSchedules to update.
     */
    where: ReportSchedulesWhereUniqueInput
  }

  /**
   * ReportSchedules updateMany
   */
  export type ReportSchedulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportSchedules.
     */
    data: XOR<ReportSchedulesUpdateManyMutationInput, ReportSchedulesUncheckedUpdateManyInput>
    /**
     * Filter which ReportSchedules to update
     */
    where?: ReportSchedulesWhereInput
    /**
     * Limit how many ReportSchedules to update.
     */
    limit?: number
  }

  /**
   * ReportSchedules updateManyAndReturn
   */
  export type ReportSchedulesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * The data used to update ReportSchedules.
     */
    data: XOR<ReportSchedulesUpdateManyMutationInput, ReportSchedulesUncheckedUpdateManyInput>
    /**
     * Filter which ReportSchedules to update
     */
    where?: ReportSchedulesWhereInput
    /**
     * Limit how many ReportSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportSchedules upsert
   */
  export type ReportSchedulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportSchedules to update in case it exists.
     */
    where: ReportSchedulesWhereUniqueInput
    /**
     * In case the ReportSchedules found by the `where` argument doesn't exist, create a new ReportSchedules with this data.
     */
    create: XOR<ReportSchedulesCreateInput, ReportSchedulesUncheckedCreateInput>
    /**
     * In case the ReportSchedules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportSchedulesUpdateInput, ReportSchedulesUncheckedUpdateInput>
  }

  /**
   * ReportSchedules delete
   */
  export type ReportSchedulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
    /**
     * Filter which ReportSchedules to delete.
     */
    where: ReportSchedulesWhereUniqueInput
  }

  /**
   * ReportSchedules deleteMany
   */
  export type ReportSchedulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportSchedules to delete
     */
    where?: ReportSchedulesWhereInput
    /**
     * Limit how many ReportSchedules to delete.
     */
    limit?: number
  }

  /**
   * ReportSchedules.recipients
   */
  export type ReportSchedules$recipientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    where?: ReportRecipientsWhereInput
    orderBy?: ReportRecipientsOrderByWithRelationInput | ReportRecipientsOrderByWithRelationInput[]
    cursor?: ReportRecipientsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportRecipientsScalarFieldEnum | ReportRecipientsScalarFieldEnum[]
  }

  /**
   * ReportSchedules without action
   */
  export type ReportSchedulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportSchedules
     */
    select?: ReportSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportSchedules
     */
    omit?: ReportSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportSchedulesInclude<ExtArgs> | null
  }


  /**
   * Model ReportRecipients
   */

  export type AggregateReportRecipients = {
    _count: ReportRecipientsCountAggregateOutputType | null
    _avg: ReportRecipientsAvgAggregateOutputType | null
    _sum: ReportRecipientsSumAggregateOutputType | null
    _min: ReportRecipientsMinAggregateOutputType | null
    _max: ReportRecipientsMaxAggregateOutputType | null
  }

  export type ReportRecipientsAvgAggregateOutputType = {
    id: number | null
    scheduleId: number | null
  }

  export type ReportRecipientsSumAggregateOutputType = {
    id: number | null
    scheduleId: number | null
  }

  export type ReportRecipientsMinAggregateOutputType = {
    id: number | null
    scheduleId: number | null
    email: string | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type ReportRecipientsMaxAggregateOutputType = {
    id: number | null
    scheduleId: number | null
    email: string | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type ReportRecipientsCountAggregateOutputType = {
    id: number
    scheduleId: number
    email: number
    name: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type ReportRecipientsAvgAggregateInputType = {
    id?: true
    scheduleId?: true
  }

  export type ReportRecipientsSumAggregateInputType = {
    id?: true
    scheduleId?: true
  }

  export type ReportRecipientsMinAggregateInputType = {
    id?: true
    scheduleId?: true
    email?: true
    name?: true
    isActive?: true
    createdAt?: true
  }

  export type ReportRecipientsMaxAggregateInputType = {
    id?: true
    scheduleId?: true
    email?: true
    name?: true
    isActive?: true
    createdAt?: true
  }

  export type ReportRecipientsCountAggregateInputType = {
    id?: true
    scheduleId?: true
    email?: true
    name?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type ReportRecipientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportRecipients to aggregate.
     */
    where?: ReportRecipientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportRecipients to fetch.
     */
    orderBy?: ReportRecipientsOrderByWithRelationInput | ReportRecipientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportRecipientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportRecipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportRecipients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportRecipients
    **/
    _count?: true | ReportRecipientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportRecipientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportRecipientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportRecipientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportRecipientsMaxAggregateInputType
  }

  export type GetReportRecipientsAggregateType<T extends ReportRecipientsAggregateArgs> = {
        [P in keyof T & keyof AggregateReportRecipients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportRecipients[P]>
      : GetScalarType<T[P], AggregateReportRecipients[P]>
  }




  export type ReportRecipientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportRecipientsWhereInput
    orderBy?: ReportRecipientsOrderByWithAggregationInput | ReportRecipientsOrderByWithAggregationInput[]
    by: ReportRecipientsScalarFieldEnum[] | ReportRecipientsScalarFieldEnum
    having?: ReportRecipientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportRecipientsCountAggregateInputType | true
    _avg?: ReportRecipientsAvgAggregateInputType
    _sum?: ReportRecipientsSumAggregateInputType
    _min?: ReportRecipientsMinAggregateInputType
    _max?: ReportRecipientsMaxAggregateInputType
  }

  export type ReportRecipientsGroupByOutputType = {
    id: number
    scheduleId: number
    email: string
    name: string | null
    isActive: boolean
    createdAt: Date
    _count: ReportRecipientsCountAggregateOutputType | null
    _avg: ReportRecipientsAvgAggregateOutputType | null
    _sum: ReportRecipientsSumAggregateOutputType | null
    _min: ReportRecipientsMinAggregateOutputType | null
    _max: ReportRecipientsMaxAggregateOutputType | null
  }

  type GetReportRecipientsGroupByPayload<T extends ReportRecipientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportRecipientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportRecipientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportRecipientsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportRecipientsGroupByOutputType[P]>
        }
      >
    >


  export type ReportRecipientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    email?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    schedule?: boolean | ReportSchedulesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportRecipients"]>

  export type ReportRecipientsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    email?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    schedule?: boolean | ReportSchedulesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportRecipients"]>

  export type ReportRecipientsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleId?: boolean
    email?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    schedule?: boolean | ReportSchedulesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportRecipients"]>

  export type ReportRecipientsSelectScalar = {
    id?: boolean
    scheduleId?: boolean
    email?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type ReportRecipientsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scheduleId" | "email" | "name" | "isActive" | "createdAt", ExtArgs["result"]["reportRecipients"]>
  export type ReportRecipientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ReportSchedulesDefaultArgs<ExtArgs>
  }
  export type ReportRecipientsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ReportSchedulesDefaultArgs<ExtArgs>
  }
  export type ReportRecipientsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | ReportSchedulesDefaultArgs<ExtArgs>
  }

  export type $ReportRecipientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportRecipients"
    objects: {
      schedule: Prisma.$ReportSchedulesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      scheduleId: number
      email: string
      name: string | null
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["reportRecipients"]>
    composites: {}
  }

  type ReportRecipientsGetPayload<S extends boolean | null | undefined | ReportRecipientsDefaultArgs> = $Result.GetResult<Prisma.$ReportRecipientsPayload, S>

  type ReportRecipientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportRecipientsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportRecipientsCountAggregateInputType | true
    }

  export interface ReportRecipientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportRecipients'], meta: { name: 'ReportRecipients' } }
    /**
     * Find zero or one ReportRecipients that matches the filter.
     * @param {ReportRecipientsFindUniqueArgs} args - Arguments to find a ReportRecipients
     * @example
     * // Get one ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportRecipientsFindUniqueArgs>(args: SelectSubset<T, ReportRecipientsFindUniqueArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportRecipients that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportRecipientsFindUniqueOrThrowArgs} args - Arguments to find a ReportRecipients
     * @example
     * // Get one ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportRecipientsFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportRecipientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportRecipients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsFindFirstArgs} args - Arguments to find a ReportRecipients
     * @example
     * // Get one ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportRecipientsFindFirstArgs>(args?: SelectSubset<T, ReportRecipientsFindFirstArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportRecipients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsFindFirstOrThrowArgs} args - Arguments to find a ReportRecipients
     * @example
     * // Get one ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportRecipientsFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportRecipientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportRecipients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.findMany()
     * 
     * // Get first 10 ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportRecipientsWithIdOnly = await prisma.reportRecipients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportRecipientsFindManyArgs>(args?: SelectSubset<T, ReportRecipientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportRecipients.
     * @param {ReportRecipientsCreateArgs} args - Arguments to create a ReportRecipients.
     * @example
     * // Create one ReportRecipients
     * const ReportRecipients = await prisma.reportRecipients.create({
     *   data: {
     *     // ... data to create a ReportRecipients
     *   }
     * })
     * 
     */
    create<T extends ReportRecipientsCreateArgs>(args: SelectSubset<T, ReportRecipientsCreateArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportRecipients.
     * @param {ReportRecipientsCreateManyArgs} args - Arguments to create many ReportRecipients.
     * @example
     * // Create many ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportRecipientsCreateManyArgs>(args?: SelectSubset<T, ReportRecipientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportRecipients and returns the data saved in the database.
     * @param {ReportRecipientsCreateManyAndReturnArgs} args - Arguments to create many ReportRecipients.
     * @example
     * // Create many ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportRecipients and only return the `id`
     * const reportRecipientsWithIdOnly = await prisma.reportRecipients.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportRecipientsCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportRecipientsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportRecipients.
     * @param {ReportRecipientsDeleteArgs} args - Arguments to delete one ReportRecipients.
     * @example
     * // Delete one ReportRecipients
     * const ReportRecipients = await prisma.reportRecipients.delete({
     *   where: {
     *     // ... filter to delete one ReportRecipients
     *   }
     * })
     * 
     */
    delete<T extends ReportRecipientsDeleteArgs>(args: SelectSubset<T, ReportRecipientsDeleteArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportRecipients.
     * @param {ReportRecipientsUpdateArgs} args - Arguments to update one ReportRecipients.
     * @example
     * // Update one ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportRecipientsUpdateArgs>(args: SelectSubset<T, ReportRecipientsUpdateArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportRecipients.
     * @param {ReportRecipientsDeleteManyArgs} args - Arguments to filter ReportRecipients to delete.
     * @example
     * // Delete a few ReportRecipients
     * const { count } = await prisma.reportRecipients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportRecipientsDeleteManyArgs>(args?: SelectSubset<T, ReportRecipientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportRecipients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportRecipientsUpdateManyArgs>(args: SelectSubset<T, ReportRecipientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportRecipients and returns the data updated in the database.
     * @param {ReportRecipientsUpdateManyAndReturnArgs} args - Arguments to update many ReportRecipients.
     * @example
     * // Update many ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportRecipients and only return the `id`
     * const reportRecipientsWithIdOnly = await prisma.reportRecipients.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportRecipientsUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportRecipientsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportRecipients.
     * @param {ReportRecipientsUpsertArgs} args - Arguments to update or create a ReportRecipients.
     * @example
     * // Update or create a ReportRecipients
     * const reportRecipients = await prisma.reportRecipients.upsert({
     *   create: {
     *     // ... data to create a ReportRecipients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportRecipients we want to update
     *   }
     * })
     */
    upsert<T extends ReportRecipientsUpsertArgs>(args: SelectSubset<T, ReportRecipientsUpsertArgs<ExtArgs>>): Prisma__ReportRecipientsClient<$Result.GetResult<Prisma.$ReportRecipientsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportRecipients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsCountArgs} args - Arguments to filter ReportRecipients to count.
     * @example
     * // Count the number of ReportRecipients
     * const count = await prisma.reportRecipients.count({
     *   where: {
     *     // ... the filter for the ReportRecipients we want to count
     *   }
     * })
    **/
    count<T extends ReportRecipientsCountArgs>(
      args?: Subset<T, ReportRecipientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportRecipientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportRecipients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportRecipientsAggregateArgs>(args: Subset<T, ReportRecipientsAggregateArgs>): Prisma.PrismaPromise<GetReportRecipientsAggregateType<T>>

    /**
     * Group by ReportRecipients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportRecipientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportRecipientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportRecipientsGroupByArgs['orderBy'] }
        : { orderBy?: ReportRecipientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportRecipientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportRecipientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportRecipients model
   */
  readonly fields: ReportRecipientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportRecipients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportRecipientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedule<T extends ReportSchedulesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportSchedulesDefaultArgs<ExtArgs>>): Prisma__ReportSchedulesClient<$Result.GetResult<Prisma.$ReportSchedulesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportRecipients model
   */
  interface ReportRecipientsFieldRefs {
    readonly id: FieldRef<"ReportRecipients", 'Int'>
    readonly scheduleId: FieldRef<"ReportRecipients", 'Int'>
    readonly email: FieldRef<"ReportRecipients", 'String'>
    readonly name: FieldRef<"ReportRecipients", 'String'>
    readonly isActive: FieldRef<"ReportRecipients", 'Boolean'>
    readonly createdAt: FieldRef<"ReportRecipients", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReportRecipients findUnique
   */
  export type ReportRecipientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * Filter, which ReportRecipients to fetch.
     */
    where: ReportRecipientsWhereUniqueInput
  }

  /**
   * ReportRecipients findUniqueOrThrow
   */
  export type ReportRecipientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * Filter, which ReportRecipients to fetch.
     */
    where: ReportRecipientsWhereUniqueInput
  }

  /**
   * ReportRecipients findFirst
   */
  export type ReportRecipientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * Filter, which ReportRecipients to fetch.
     */
    where?: ReportRecipientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportRecipients to fetch.
     */
    orderBy?: ReportRecipientsOrderByWithRelationInput | ReportRecipientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportRecipients.
     */
    cursor?: ReportRecipientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportRecipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportRecipients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportRecipients.
     */
    distinct?: ReportRecipientsScalarFieldEnum | ReportRecipientsScalarFieldEnum[]
  }

  /**
   * ReportRecipients findFirstOrThrow
   */
  export type ReportRecipientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * Filter, which ReportRecipients to fetch.
     */
    where?: ReportRecipientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportRecipients to fetch.
     */
    orderBy?: ReportRecipientsOrderByWithRelationInput | ReportRecipientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportRecipients.
     */
    cursor?: ReportRecipientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportRecipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportRecipients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportRecipients.
     */
    distinct?: ReportRecipientsScalarFieldEnum | ReportRecipientsScalarFieldEnum[]
  }

  /**
   * ReportRecipients findMany
   */
  export type ReportRecipientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * Filter, which ReportRecipients to fetch.
     */
    where?: ReportRecipientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportRecipients to fetch.
     */
    orderBy?: ReportRecipientsOrderByWithRelationInput | ReportRecipientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportRecipients.
     */
    cursor?: ReportRecipientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportRecipients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportRecipients.
     */
    skip?: number
    distinct?: ReportRecipientsScalarFieldEnum | ReportRecipientsScalarFieldEnum[]
  }

  /**
   * ReportRecipients create
   */
  export type ReportRecipientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportRecipients.
     */
    data: XOR<ReportRecipientsCreateInput, ReportRecipientsUncheckedCreateInput>
  }

  /**
   * ReportRecipients createMany
   */
  export type ReportRecipientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportRecipients.
     */
    data: ReportRecipientsCreateManyInput | ReportRecipientsCreateManyInput[]
  }

  /**
   * ReportRecipients createManyAndReturn
   */
  export type ReportRecipientsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * The data used to create many ReportRecipients.
     */
    data: ReportRecipientsCreateManyInput | ReportRecipientsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportRecipients update
   */
  export type ReportRecipientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportRecipients.
     */
    data: XOR<ReportRecipientsUpdateInput, ReportRecipientsUncheckedUpdateInput>
    /**
     * Choose, which ReportRecipients to update.
     */
    where: ReportRecipientsWhereUniqueInput
  }

  /**
   * ReportRecipients updateMany
   */
  export type ReportRecipientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportRecipients.
     */
    data: XOR<ReportRecipientsUpdateManyMutationInput, ReportRecipientsUncheckedUpdateManyInput>
    /**
     * Filter which ReportRecipients to update
     */
    where?: ReportRecipientsWhereInput
    /**
     * Limit how many ReportRecipients to update.
     */
    limit?: number
  }

  /**
   * ReportRecipients updateManyAndReturn
   */
  export type ReportRecipientsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * The data used to update ReportRecipients.
     */
    data: XOR<ReportRecipientsUpdateManyMutationInput, ReportRecipientsUncheckedUpdateManyInput>
    /**
     * Filter which ReportRecipients to update
     */
    where?: ReportRecipientsWhereInput
    /**
     * Limit how many ReportRecipients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportRecipients upsert
   */
  export type ReportRecipientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportRecipients to update in case it exists.
     */
    where: ReportRecipientsWhereUniqueInput
    /**
     * In case the ReportRecipients found by the `where` argument doesn't exist, create a new ReportRecipients with this data.
     */
    create: XOR<ReportRecipientsCreateInput, ReportRecipientsUncheckedCreateInput>
    /**
     * In case the ReportRecipients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportRecipientsUpdateInput, ReportRecipientsUncheckedUpdateInput>
  }

  /**
   * ReportRecipients delete
   */
  export type ReportRecipientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
    /**
     * Filter which ReportRecipients to delete.
     */
    where: ReportRecipientsWhereUniqueInput
  }

  /**
   * ReportRecipients deleteMany
   */
  export type ReportRecipientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportRecipients to delete
     */
    where?: ReportRecipientsWhereInput
    /**
     * Limit how many ReportRecipients to delete.
     */
    limit?: number
  }

  /**
   * ReportRecipients without action
   */
  export type ReportRecipientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportRecipients
     */
    select?: ReportRecipientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportRecipients
     */
    omit?: ReportRecipientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportRecipientsInclude<ExtArgs> | null
  }


  /**
   * Model ReportHistory
   */

  export type AggregateReportHistory = {
    _count: ReportHistoryCountAggregateOutputType | null
    _avg: ReportHistoryAvgAggregateOutputType | null
    _sum: ReportHistorySumAggregateOutputType | null
    _min: ReportHistoryMinAggregateOutputType | null
    _max: ReportHistoryMaxAggregateOutputType | null
  }

  export type ReportHistoryAvgAggregateOutputType = {
    id: number | null
    reportId: number | null
    fileSize: number | null
    executionTime: number | null
  }

  export type ReportHistorySumAggregateOutputType = {
    id: number | null
    reportId: number | null
    fileSize: number | null
    executionTime: number | null
  }

  export type ReportHistoryMinAggregateOutputType = {
    id: number | null
    reportId: number | null
    generatedAt: Date | null
    status: string | null
    filePath: string | null
    fileSize: number | null
    executionTime: number | null
    errorMessage: string | null
    sentTo: string | null
    period: string | null
  }

  export type ReportHistoryMaxAggregateOutputType = {
    id: number | null
    reportId: number | null
    generatedAt: Date | null
    status: string | null
    filePath: string | null
    fileSize: number | null
    executionTime: number | null
    errorMessage: string | null
    sentTo: string | null
    period: string | null
  }

  export type ReportHistoryCountAggregateOutputType = {
    id: number
    reportId: number
    generatedAt: number
    status: number
    filePath: number
    fileSize: number
    executionTime: number
    errorMessage: number
    sentTo: number
    period: number
    _all: number
  }


  export type ReportHistoryAvgAggregateInputType = {
    id?: true
    reportId?: true
    fileSize?: true
    executionTime?: true
  }

  export type ReportHistorySumAggregateInputType = {
    id?: true
    reportId?: true
    fileSize?: true
    executionTime?: true
  }

  export type ReportHistoryMinAggregateInputType = {
    id?: true
    reportId?: true
    generatedAt?: true
    status?: true
    filePath?: true
    fileSize?: true
    executionTime?: true
    errorMessage?: true
    sentTo?: true
    period?: true
  }

  export type ReportHistoryMaxAggregateInputType = {
    id?: true
    reportId?: true
    generatedAt?: true
    status?: true
    filePath?: true
    fileSize?: true
    executionTime?: true
    errorMessage?: true
    sentTo?: true
    period?: true
  }

  export type ReportHistoryCountAggregateInputType = {
    id?: true
    reportId?: true
    generatedAt?: true
    status?: true
    filePath?: true
    fileSize?: true
    executionTime?: true
    errorMessage?: true
    sentTo?: true
    period?: true
    _all?: true
  }

  export type ReportHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportHistory to aggregate.
     */
    where?: ReportHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportHistories to fetch.
     */
    orderBy?: ReportHistoryOrderByWithRelationInput | ReportHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportHistories
    **/
    _count?: true | ReportHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportHistoryMaxAggregateInputType
  }

  export type GetReportHistoryAggregateType<T extends ReportHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateReportHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportHistory[P]>
      : GetScalarType<T[P], AggregateReportHistory[P]>
  }




  export type ReportHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportHistoryWhereInput
    orderBy?: ReportHistoryOrderByWithAggregationInput | ReportHistoryOrderByWithAggregationInput[]
    by: ReportHistoryScalarFieldEnum[] | ReportHistoryScalarFieldEnum
    having?: ReportHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportHistoryCountAggregateInputType | true
    _avg?: ReportHistoryAvgAggregateInputType
    _sum?: ReportHistorySumAggregateInputType
    _min?: ReportHistoryMinAggregateInputType
    _max?: ReportHistoryMaxAggregateInputType
  }

  export type ReportHistoryGroupByOutputType = {
    id: number
    reportId: number
    generatedAt: Date
    status: string
    filePath: string | null
    fileSize: number | null
    executionTime: number | null
    errorMessage: string | null
    sentTo: string | null
    period: string | null
    _count: ReportHistoryCountAggregateOutputType | null
    _avg: ReportHistoryAvgAggregateOutputType | null
    _sum: ReportHistorySumAggregateOutputType | null
    _min: ReportHistoryMinAggregateOutputType | null
    _max: ReportHistoryMaxAggregateOutputType | null
  }

  type GetReportHistoryGroupByPayload<T extends ReportHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ReportHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ReportHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    generatedAt?: boolean
    status?: boolean
    filePath?: boolean
    fileSize?: boolean
    executionTime?: boolean
    errorMessage?: boolean
    sentTo?: boolean
    period?: boolean
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportHistory"]>

  export type ReportHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    generatedAt?: boolean
    status?: boolean
    filePath?: boolean
    fileSize?: boolean
    executionTime?: boolean
    errorMessage?: boolean
    sentTo?: boolean
    period?: boolean
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportHistory"]>

  export type ReportHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    generatedAt?: boolean
    status?: boolean
    filePath?: boolean
    fileSize?: boolean
    executionTime?: boolean
    errorMessage?: boolean
    sentTo?: boolean
    period?: boolean
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportHistory"]>

  export type ReportHistorySelectScalar = {
    id?: boolean
    reportId?: boolean
    generatedAt?: boolean
    status?: boolean
    filePath?: boolean
    fileSize?: boolean
    executionTime?: boolean
    errorMessage?: boolean
    sentTo?: boolean
    period?: boolean
  }

  export type ReportHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "generatedAt" | "status" | "filePath" | "fileSize" | "executionTime" | "errorMessage" | "sentTo" | "period", ExtArgs["result"]["reportHistory"]>
  export type ReportHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }
  export type ReportHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }
  export type ReportHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | AutomatedReportsDefaultArgs<ExtArgs>
  }

  export type $ReportHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportHistory"
    objects: {
      report: Prisma.$AutomatedReportsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reportId: number
      generatedAt: Date
      status: string
      filePath: string | null
      fileSize: number | null
      executionTime: number | null
      errorMessage: string | null
      sentTo: string | null
      period: string | null
    }, ExtArgs["result"]["reportHistory"]>
    composites: {}
  }

  type ReportHistoryGetPayload<S extends boolean | null | undefined | ReportHistoryDefaultArgs> = $Result.GetResult<Prisma.$ReportHistoryPayload, S>

  type ReportHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportHistoryCountAggregateInputType | true
    }

  export interface ReportHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportHistory'], meta: { name: 'ReportHistory' } }
    /**
     * Find zero or one ReportHistory that matches the filter.
     * @param {ReportHistoryFindUniqueArgs} args - Arguments to find a ReportHistory
     * @example
     * // Get one ReportHistory
     * const reportHistory = await prisma.reportHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportHistoryFindUniqueArgs>(args: SelectSubset<T, ReportHistoryFindUniqueArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportHistoryFindUniqueOrThrowArgs} args - Arguments to find a ReportHistory
     * @example
     * // Get one ReportHistory
     * const reportHistory = await prisma.reportHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryFindFirstArgs} args - Arguments to find a ReportHistory
     * @example
     * // Get one ReportHistory
     * const reportHistory = await prisma.reportHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportHistoryFindFirstArgs>(args?: SelectSubset<T, ReportHistoryFindFirstArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryFindFirstOrThrowArgs} args - Arguments to find a ReportHistory
     * @example
     * // Get one ReportHistory
     * const reportHistory = await prisma.reportHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportHistories
     * const reportHistories = await prisma.reportHistory.findMany()
     * 
     * // Get first 10 ReportHistories
     * const reportHistories = await prisma.reportHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportHistoryWithIdOnly = await prisma.reportHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportHistoryFindManyArgs>(args?: SelectSubset<T, ReportHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportHistory.
     * @param {ReportHistoryCreateArgs} args - Arguments to create a ReportHistory.
     * @example
     * // Create one ReportHistory
     * const ReportHistory = await prisma.reportHistory.create({
     *   data: {
     *     // ... data to create a ReportHistory
     *   }
     * })
     * 
     */
    create<T extends ReportHistoryCreateArgs>(args: SelectSubset<T, ReportHistoryCreateArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportHistories.
     * @param {ReportHistoryCreateManyArgs} args - Arguments to create many ReportHistories.
     * @example
     * // Create many ReportHistories
     * const reportHistory = await prisma.reportHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportHistoryCreateManyArgs>(args?: SelectSubset<T, ReportHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportHistories and returns the data saved in the database.
     * @param {ReportHistoryCreateManyAndReturnArgs} args - Arguments to create many ReportHistories.
     * @example
     * // Create many ReportHistories
     * const reportHistory = await prisma.reportHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportHistories and only return the `id`
     * const reportHistoryWithIdOnly = await prisma.reportHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportHistory.
     * @param {ReportHistoryDeleteArgs} args - Arguments to delete one ReportHistory.
     * @example
     * // Delete one ReportHistory
     * const ReportHistory = await prisma.reportHistory.delete({
     *   where: {
     *     // ... filter to delete one ReportHistory
     *   }
     * })
     * 
     */
    delete<T extends ReportHistoryDeleteArgs>(args: SelectSubset<T, ReportHistoryDeleteArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportHistory.
     * @param {ReportHistoryUpdateArgs} args - Arguments to update one ReportHistory.
     * @example
     * // Update one ReportHistory
     * const reportHistory = await prisma.reportHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportHistoryUpdateArgs>(args: SelectSubset<T, ReportHistoryUpdateArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportHistories.
     * @param {ReportHistoryDeleteManyArgs} args - Arguments to filter ReportHistories to delete.
     * @example
     * // Delete a few ReportHistories
     * const { count } = await prisma.reportHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportHistoryDeleteManyArgs>(args?: SelectSubset<T, ReportHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportHistories
     * const reportHistory = await prisma.reportHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportHistoryUpdateManyArgs>(args: SelectSubset<T, ReportHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportHistories and returns the data updated in the database.
     * @param {ReportHistoryUpdateManyAndReturnArgs} args - Arguments to update many ReportHistories.
     * @example
     * // Update many ReportHistories
     * const reportHistory = await prisma.reportHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportHistories and only return the `id`
     * const reportHistoryWithIdOnly = await prisma.reportHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportHistory.
     * @param {ReportHistoryUpsertArgs} args - Arguments to update or create a ReportHistory.
     * @example
     * // Update or create a ReportHistory
     * const reportHistory = await prisma.reportHistory.upsert({
     *   create: {
     *     // ... data to create a ReportHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportHistory we want to update
     *   }
     * })
     */
    upsert<T extends ReportHistoryUpsertArgs>(args: SelectSubset<T, ReportHistoryUpsertArgs<ExtArgs>>): Prisma__ReportHistoryClient<$Result.GetResult<Prisma.$ReportHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryCountArgs} args - Arguments to filter ReportHistories to count.
     * @example
     * // Count the number of ReportHistories
     * const count = await prisma.reportHistory.count({
     *   where: {
     *     // ... the filter for the ReportHistories we want to count
     *   }
     * })
    **/
    count<T extends ReportHistoryCountArgs>(
      args?: Subset<T, ReportHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportHistoryAggregateArgs>(args: Subset<T, ReportHistoryAggregateArgs>): Prisma.PrismaPromise<GetReportHistoryAggregateType<T>>

    /**
     * Group by ReportHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ReportHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportHistory model
   */
  readonly fields: ReportHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends AutomatedReportsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AutomatedReportsDefaultArgs<ExtArgs>>): Prisma__AutomatedReportsClient<$Result.GetResult<Prisma.$AutomatedReportsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportHistory model
   */
  interface ReportHistoryFieldRefs {
    readonly id: FieldRef<"ReportHistory", 'Int'>
    readonly reportId: FieldRef<"ReportHistory", 'Int'>
    readonly generatedAt: FieldRef<"ReportHistory", 'DateTime'>
    readonly status: FieldRef<"ReportHistory", 'String'>
    readonly filePath: FieldRef<"ReportHistory", 'String'>
    readonly fileSize: FieldRef<"ReportHistory", 'Int'>
    readonly executionTime: FieldRef<"ReportHistory", 'Int'>
    readonly errorMessage: FieldRef<"ReportHistory", 'String'>
    readonly sentTo: FieldRef<"ReportHistory", 'String'>
    readonly period: FieldRef<"ReportHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportHistory findUnique
   */
  export type ReportHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportHistory to fetch.
     */
    where: ReportHistoryWhereUniqueInput
  }

  /**
   * ReportHistory findUniqueOrThrow
   */
  export type ReportHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportHistory to fetch.
     */
    where: ReportHistoryWhereUniqueInput
  }

  /**
   * ReportHistory findFirst
   */
  export type ReportHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportHistory to fetch.
     */
    where?: ReportHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportHistories to fetch.
     */
    orderBy?: ReportHistoryOrderByWithRelationInput | ReportHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportHistories.
     */
    cursor?: ReportHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportHistories.
     */
    distinct?: ReportHistoryScalarFieldEnum | ReportHistoryScalarFieldEnum[]
  }

  /**
   * ReportHistory findFirstOrThrow
   */
  export type ReportHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportHistory to fetch.
     */
    where?: ReportHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportHistories to fetch.
     */
    orderBy?: ReportHistoryOrderByWithRelationInput | ReportHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportHistories.
     */
    cursor?: ReportHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportHistories.
     */
    distinct?: ReportHistoryScalarFieldEnum | ReportHistoryScalarFieldEnum[]
  }

  /**
   * ReportHistory findMany
   */
  export type ReportHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportHistories to fetch.
     */
    where?: ReportHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportHistories to fetch.
     */
    orderBy?: ReportHistoryOrderByWithRelationInput | ReportHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportHistories.
     */
    cursor?: ReportHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportHistories.
     */
    skip?: number
    distinct?: ReportHistoryScalarFieldEnum | ReportHistoryScalarFieldEnum[]
  }

  /**
   * ReportHistory create
   */
  export type ReportHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportHistory.
     */
    data: XOR<ReportHistoryCreateInput, ReportHistoryUncheckedCreateInput>
  }

  /**
   * ReportHistory createMany
   */
  export type ReportHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportHistories.
     */
    data: ReportHistoryCreateManyInput | ReportHistoryCreateManyInput[]
  }

  /**
   * ReportHistory createManyAndReturn
   */
  export type ReportHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ReportHistories.
     */
    data: ReportHistoryCreateManyInput | ReportHistoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportHistory update
   */
  export type ReportHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportHistory.
     */
    data: XOR<ReportHistoryUpdateInput, ReportHistoryUncheckedUpdateInput>
    /**
     * Choose, which ReportHistory to update.
     */
    where: ReportHistoryWhereUniqueInput
  }

  /**
   * ReportHistory updateMany
   */
  export type ReportHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportHistories.
     */
    data: XOR<ReportHistoryUpdateManyMutationInput, ReportHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ReportHistories to update
     */
    where?: ReportHistoryWhereInput
    /**
     * Limit how many ReportHistories to update.
     */
    limit?: number
  }

  /**
   * ReportHistory updateManyAndReturn
   */
  export type ReportHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ReportHistories.
     */
    data: XOR<ReportHistoryUpdateManyMutationInput, ReportHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ReportHistories to update
     */
    where?: ReportHistoryWhereInput
    /**
     * Limit how many ReportHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportHistory upsert
   */
  export type ReportHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportHistory to update in case it exists.
     */
    where: ReportHistoryWhereUniqueInput
    /**
     * In case the ReportHistory found by the `where` argument doesn't exist, create a new ReportHistory with this data.
     */
    create: XOR<ReportHistoryCreateInput, ReportHistoryUncheckedCreateInput>
    /**
     * In case the ReportHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportHistoryUpdateInput, ReportHistoryUncheckedUpdateInput>
  }

  /**
   * ReportHistory delete
   */
  export type ReportHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
    /**
     * Filter which ReportHistory to delete.
     */
    where: ReportHistoryWhereUniqueInput
  }

  /**
   * ReportHistory deleteMany
   */
  export type ReportHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportHistories to delete
     */
    where?: ReportHistoryWhereInput
    /**
     * Limit how many ReportHistories to delete.
     */
    limit?: number
  }

  /**
   * ReportHistory without action
   */
  export type ReportHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportHistory
     */
    select?: ReportHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportHistory
     */
    omit?: ReportHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportHistoryInclude<ExtArgs> | null
  }


  /**
   * Model SatisfactionSurveys
   */

  export type AggregateSatisfactionSurveys = {
    _count: SatisfactionSurveysCountAggregateOutputType | null
    _avg: SatisfactionSurveysAvgAggregateOutputType | null
    _sum: SatisfactionSurveysSumAggregateOutputType | null
    _min: SatisfactionSurveysMinAggregateOutputType | null
    _max: SatisfactionSurveysMaxAggregateOutputType | null
  }

  export type SatisfactionSurveysAvgAggregateOutputType = {
    id: number | null
  }

  export type SatisfactionSurveysSumAggregateOutputType = {
    id: number | null
  }

  export type SatisfactionSurveysMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    tenantId: string | null
    surveyType: string | null
    questions: string | null
    isActive: boolean | null
    startDate: Date | null
    endDate: Date | null
    targetAudience: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SatisfactionSurveysMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    tenantId: string | null
    surveyType: string | null
    questions: string | null
    isActive: boolean | null
    startDate: Date | null
    endDate: Date | null
    targetAudience: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SatisfactionSurveysCountAggregateOutputType = {
    id: number
    title: number
    description: number
    tenantId: number
    surveyType: number
    questions: number
    isActive: number
    startDate: number
    endDate: number
    targetAudience: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SatisfactionSurveysAvgAggregateInputType = {
    id?: true
  }

  export type SatisfactionSurveysSumAggregateInputType = {
    id?: true
  }

  export type SatisfactionSurveysMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    tenantId?: true
    surveyType?: true
    questions?: true
    isActive?: true
    startDate?: true
    endDate?: true
    targetAudience?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SatisfactionSurveysMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    tenantId?: true
    surveyType?: true
    questions?: true
    isActive?: true
    startDate?: true
    endDate?: true
    targetAudience?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SatisfactionSurveysCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    tenantId?: true
    surveyType?: true
    questions?: true
    isActive?: true
    startDate?: true
    endDate?: true
    targetAudience?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SatisfactionSurveysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SatisfactionSurveys to aggregate.
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SatisfactionSurveys to fetch.
     */
    orderBy?: SatisfactionSurveysOrderByWithRelationInput | SatisfactionSurveysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SatisfactionSurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SatisfactionSurveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SatisfactionSurveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SatisfactionSurveys
    **/
    _count?: true | SatisfactionSurveysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SatisfactionSurveysAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SatisfactionSurveysSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SatisfactionSurveysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SatisfactionSurveysMaxAggregateInputType
  }

  export type GetSatisfactionSurveysAggregateType<T extends SatisfactionSurveysAggregateArgs> = {
        [P in keyof T & keyof AggregateSatisfactionSurveys]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSatisfactionSurveys[P]>
      : GetScalarType<T[P], AggregateSatisfactionSurveys[P]>
  }




  export type SatisfactionSurveysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SatisfactionSurveysWhereInput
    orderBy?: SatisfactionSurveysOrderByWithAggregationInput | SatisfactionSurveysOrderByWithAggregationInput[]
    by: SatisfactionSurveysScalarFieldEnum[] | SatisfactionSurveysScalarFieldEnum
    having?: SatisfactionSurveysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SatisfactionSurveysCountAggregateInputType | true
    _avg?: SatisfactionSurveysAvgAggregateInputType
    _sum?: SatisfactionSurveysSumAggregateInputType
    _min?: SatisfactionSurveysMinAggregateInputType
    _max?: SatisfactionSurveysMaxAggregateInputType
  }

  export type SatisfactionSurveysGroupByOutputType = {
    id: number
    title: string
    description: string | null
    tenantId: string | null
    surveyType: string
    questions: string
    isActive: boolean
    startDate: Date
    endDate: Date | null
    targetAudience: string
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: SatisfactionSurveysCountAggregateOutputType | null
    _avg: SatisfactionSurveysAvgAggregateOutputType | null
    _sum: SatisfactionSurveysSumAggregateOutputType | null
    _min: SatisfactionSurveysMinAggregateOutputType | null
    _max: SatisfactionSurveysMaxAggregateOutputType | null
  }

  type GetSatisfactionSurveysGroupByPayload<T extends SatisfactionSurveysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SatisfactionSurveysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SatisfactionSurveysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SatisfactionSurveysGroupByOutputType[P]>
            : GetScalarType<T[P], SatisfactionSurveysGroupByOutputType[P]>
        }
      >
    >


  export type SatisfactionSurveysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    tenantId?: boolean
    surveyType?: boolean
    questions?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    targetAudience?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | SatisfactionSurveys$tenantArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    npsResponses?: boolean | SatisfactionSurveys$npsResponsesArgs<ExtArgs>
    feedbacks?: boolean | SatisfactionSurveys$feedbacksArgs<ExtArgs>
    _count?: boolean | SatisfactionSurveysCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["satisfactionSurveys"]>

  export type SatisfactionSurveysSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    tenantId?: boolean
    surveyType?: boolean
    questions?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    targetAudience?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | SatisfactionSurveys$tenantArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["satisfactionSurveys"]>

  export type SatisfactionSurveysSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    tenantId?: boolean
    surveyType?: boolean
    questions?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    targetAudience?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | SatisfactionSurveys$tenantArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["satisfactionSurveys"]>

  export type SatisfactionSurveysSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    tenantId?: boolean
    surveyType?: boolean
    questions?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    targetAudience?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SatisfactionSurveysOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "tenantId" | "surveyType" | "questions" | "isActive" | "startDate" | "endDate" | "targetAudience" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["satisfactionSurveys"]>
  export type SatisfactionSurveysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | SatisfactionSurveys$tenantArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    npsResponses?: boolean | SatisfactionSurveys$npsResponsesArgs<ExtArgs>
    feedbacks?: boolean | SatisfactionSurveys$feedbacksArgs<ExtArgs>
    _count?: boolean | SatisfactionSurveysCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SatisfactionSurveysIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | SatisfactionSurveys$tenantArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SatisfactionSurveysIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | SatisfactionSurveys$tenantArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SatisfactionSurveysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SatisfactionSurveys"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      creator: Prisma.$UserPayload<ExtArgs>
      npsResponses: Prisma.$NpsResponsesPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackSubmissionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      tenantId: string | null
      surveyType: string
      questions: string
      isActive: boolean
      startDate: Date
      endDate: Date | null
      targetAudience: string
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["satisfactionSurveys"]>
    composites: {}
  }

  type SatisfactionSurveysGetPayload<S extends boolean | null | undefined | SatisfactionSurveysDefaultArgs> = $Result.GetResult<Prisma.$SatisfactionSurveysPayload, S>

  type SatisfactionSurveysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SatisfactionSurveysFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SatisfactionSurveysCountAggregateInputType | true
    }

  export interface SatisfactionSurveysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SatisfactionSurveys'], meta: { name: 'SatisfactionSurveys' } }
    /**
     * Find zero or one SatisfactionSurveys that matches the filter.
     * @param {SatisfactionSurveysFindUniqueArgs} args - Arguments to find a SatisfactionSurveys
     * @example
     * // Get one SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SatisfactionSurveysFindUniqueArgs>(args: SelectSubset<T, SatisfactionSurveysFindUniqueArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SatisfactionSurveys that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SatisfactionSurveysFindUniqueOrThrowArgs} args - Arguments to find a SatisfactionSurveys
     * @example
     * // Get one SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SatisfactionSurveysFindUniqueOrThrowArgs>(args: SelectSubset<T, SatisfactionSurveysFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SatisfactionSurveys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysFindFirstArgs} args - Arguments to find a SatisfactionSurveys
     * @example
     * // Get one SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SatisfactionSurveysFindFirstArgs>(args?: SelectSubset<T, SatisfactionSurveysFindFirstArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SatisfactionSurveys that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysFindFirstOrThrowArgs} args - Arguments to find a SatisfactionSurveys
     * @example
     * // Get one SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SatisfactionSurveysFindFirstOrThrowArgs>(args?: SelectSubset<T, SatisfactionSurveysFindFirstOrThrowArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SatisfactionSurveys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.findMany()
     * 
     * // Get first 10 SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const satisfactionSurveysWithIdOnly = await prisma.satisfactionSurveys.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SatisfactionSurveysFindManyArgs>(args?: SelectSubset<T, SatisfactionSurveysFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SatisfactionSurveys.
     * @param {SatisfactionSurveysCreateArgs} args - Arguments to create a SatisfactionSurveys.
     * @example
     * // Create one SatisfactionSurveys
     * const SatisfactionSurveys = await prisma.satisfactionSurveys.create({
     *   data: {
     *     // ... data to create a SatisfactionSurveys
     *   }
     * })
     * 
     */
    create<T extends SatisfactionSurveysCreateArgs>(args: SelectSubset<T, SatisfactionSurveysCreateArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SatisfactionSurveys.
     * @param {SatisfactionSurveysCreateManyArgs} args - Arguments to create many SatisfactionSurveys.
     * @example
     * // Create many SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SatisfactionSurveysCreateManyArgs>(args?: SelectSubset<T, SatisfactionSurveysCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SatisfactionSurveys and returns the data saved in the database.
     * @param {SatisfactionSurveysCreateManyAndReturnArgs} args - Arguments to create many SatisfactionSurveys.
     * @example
     * // Create many SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SatisfactionSurveys and only return the `id`
     * const satisfactionSurveysWithIdOnly = await prisma.satisfactionSurveys.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SatisfactionSurveysCreateManyAndReturnArgs>(args?: SelectSubset<T, SatisfactionSurveysCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SatisfactionSurveys.
     * @param {SatisfactionSurveysDeleteArgs} args - Arguments to delete one SatisfactionSurveys.
     * @example
     * // Delete one SatisfactionSurveys
     * const SatisfactionSurveys = await prisma.satisfactionSurveys.delete({
     *   where: {
     *     // ... filter to delete one SatisfactionSurveys
     *   }
     * })
     * 
     */
    delete<T extends SatisfactionSurveysDeleteArgs>(args: SelectSubset<T, SatisfactionSurveysDeleteArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SatisfactionSurveys.
     * @param {SatisfactionSurveysUpdateArgs} args - Arguments to update one SatisfactionSurveys.
     * @example
     * // Update one SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SatisfactionSurveysUpdateArgs>(args: SelectSubset<T, SatisfactionSurveysUpdateArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SatisfactionSurveys.
     * @param {SatisfactionSurveysDeleteManyArgs} args - Arguments to filter SatisfactionSurveys to delete.
     * @example
     * // Delete a few SatisfactionSurveys
     * const { count } = await prisma.satisfactionSurveys.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SatisfactionSurveysDeleteManyArgs>(args?: SelectSubset<T, SatisfactionSurveysDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SatisfactionSurveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SatisfactionSurveysUpdateManyArgs>(args: SelectSubset<T, SatisfactionSurveysUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SatisfactionSurveys and returns the data updated in the database.
     * @param {SatisfactionSurveysUpdateManyAndReturnArgs} args - Arguments to update many SatisfactionSurveys.
     * @example
     * // Update many SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SatisfactionSurveys and only return the `id`
     * const satisfactionSurveysWithIdOnly = await prisma.satisfactionSurveys.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SatisfactionSurveysUpdateManyAndReturnArgs>(args: SelectSubset<T, SatisfactionSurveysUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SatisfactionSurveys.
     * @param {SatisfactionSurveysUpsertArgs} args - Arguments to update or create a SatisfactionSurveys.
     * @example
     * // Update or create a SatisfactionSurveys
     * const satisfactionSurveys = await prisma.satisfactionSurveys.upsert({
     *   create: {
     *     // ... data to create a SatisfactionSurveys
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SatisfactionSurveys we want to update
     *   }
     * })
     */
    upsert<T extends SatisfactionSurveysUpsertArgs>(args: SelectSubset<T, SatisfactionSurveysUpsertArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SatisfactionSurveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysCountArgs} args - Arguments to filter SatisfactionSurveys to count.
     * @example
     * // Count the number of SatisfactionSurveys
     * const count = await prisma.satisfactionSurveys.count({
     *   where: {
     *     // ... the filter for the SatisfactionSurveys we want to count
     *   }
     * })
    **/
    count<T extends SatisfactionSurveysCountArgs>(
      args?: Subset<T, SatisfactionSurveysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SatisfactionSurveysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SatisfactionSurveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SatisfactionSurveysAggregateArgs>(args: Subset<T, SatisfactionSurveysAggregateArgs>): Prisma.PrismaPromise<GetSatisfactionSurveysAggregateType<T>>

    /**
     * Group by SatisfactionSurveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SatisfactionSurveysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SatisfactionSurveysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SatisfactionSurveysGroupByArgs['orderBy'] }
        : { orderBy?: SatisfactionSurveysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SatisfactionSurveysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSatisfactionSurveysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SatisfactionSurveys model
   */
  readonly fields: SatisfactionSurveysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SatisfactionSurveys.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SatisfactionSurveysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends SatisfactionSurveys$tenantArgs<ExtArgs> = {}>(args?: Subset<T, SatisfactionSurveys$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    npsResponses<T extends SatisfactionSurveys$npsResponsesArgs<ExtArgs> = {}>(args?: Subset<T, SatisfactionSurveys$npsResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends SatisfactionSurveys$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, SatisfactionSurveys$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SatisfactionSurveys model
   */
  interface SatisfactionSurveysFieldRefs {
    readonly id: FieldRef<"SatisfactionSurveys", 'Int'>
    readonly title: FieldRef<"SatisfactionSurveys", 'String'>
    readonly description: FieldRef<"SatisfactionSurveys", 'String'>
    readonly tenantId: FieldRef<"SatisfactionSurveys", 'String'>
    readonly surveyType: FieldRef<"SatisfactionSurveys", 'String'>
    readonly questions: FieldRef<"SatisfactionSurveys", 'String'>
    readonly isActive: FieldRef<"SatisfactionSurveys", 'Boolean'>
    readonly startDate: FieldRef<"SatisfactionSurveys", 'DateTime'>
    readonly endDate: FieldRef<"SatisfactionSurveys", 'DateTime'>
    readonly targetAudience: FieldRef<"SatisfactionSurveys", 'String'>
    readonly createdBy: FieldRef<"SatisfactionSurveys", 'String'>
    readonly createdAt: FieldRef<"SatisfactionSurveys", 'DateTime'>
    readonly updatedAt: FieldRef<"SatisfactionSurveys", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SatisfactionSurveys findUnique
   */
  export type SatisfactionSurveysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * Filter, which SatisfactionSurveys to fetch.
     */
    where: SatisfactionSurveysWhereUniqueInput
  }

  /**
   * SatisfactionSurveys findUniqueOrThrow
   */
  export type SatisfactionSurveysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * Filter, which SatisfactionSurveys to fetch.
     */
    where: SatisfactionSurveysWhereUniqueInput
  }

  /**
   * SatisfactionSurveys findFirst
   */
  export type SatisfactionSurveysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * Filter, which SatisfactionSurveys to fetch.
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SatisfactionSurveys to fetch.
     */
    orderBy?: SatisfactionSurveysOrderByWithRelationInput | SatisfactionSurveysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SatisfactionSurveys.
     */
    cursor?: SatisfactionSurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SatisfactionSurveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SatisfactionSurveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SatisfactionSurveys.
     */
    distinct?: SatisfactionSurveysScalarFieldEnum | SatisfactionSurveysScalarFieldEnum[]
  }

  /**
   * SatisfactionSurveys findFirstOrThrow
   */
  export type SatisfactionSurveysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * Filter, which SatisfactionSurveys to fetch.
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SatisfactionSurveys to fetch.
     */
    orderBy?: SatisfactionSurveysOrderByWithRelationInput | SatisfactionSurveysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SatisfactionSurveys.
     */
    cursor?: SatisfactionSurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SatisfactionSurveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SatisfactionSurveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SatisfactionSurveys.
     */
    distinct?: SatisfactionSurveysScalarFieldEnum | SatisfactionSurveysScalarFieldEnum[]
  }

  /**
   * SatisfactionSurveys findMany
   */
  export type SatisfactionSurveysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * Filter, which SatisfactionSurveys to fetch.
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SatisfactionSurveys to fetch.
     */
    orderBy?: SatisfactionSurveysOrderByWithRelationInput | SatisfactionSurveysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SatisfactionSurveys.
     */
    cursor?: SatisfactionSurveysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SatisfactionSurveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SatisfactionSurveys.
     */
    skip?: number
    distinct?: SatisfactionSurveysScalarFieldEnum | SatisfactionSurveysScalarFieldEnum[]
  }

  /**
   * SatisfactionSurveys create
   */
  export type SatisfactionSurveysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * The data needed to create a SatisfactionSurveys.
     */
    data: XOR<SatisfactionSurveysCreateInput, SatisfactionSurveysUncheckedCreateInput>
  }

  /**
   * SatisfactionSurveys createMany
   */
  export type SatisfactionSurveysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SatisfactionSurveys.
     */
    data: SatisfactionSurveysCreateManyInput | SatisfactionSurveysCreateManyInput[]
  }

  /**
   * SatisfactionSurveys createManyAndReturn
   */
  export type SatisfactionSurveysCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * The data used to create many SatisfactionSurveys.
     */
    data: SatisfactionSurveysCreateManyInput | SatisfactionSurveysCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SatisfactionSurveys update
   */
  export type SatisfactionSurveysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * The data needed to update a SatisfactionSurveys.
     */
    data: XOR<SatisfactionSurveysUpdateInput, SatisfactionSurveysUncheckedUpdateInput>
    /**
     * Choose, which SatisfactionSurveys to update.
     */
    where: SatisfactionSurveysWhereUniqueInput
  }

  /**
   * SatisfactionSurveys updateMany
   */
  export type SatisfactionSurveysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SatisfactionSurveys.
     */
    data: XOR<SatisfactionSurveysUpdateManyMutationInput, SatisfactionSurveysUncheckedUpdateManyInput>
    /**
     * Filter which SatisfactionSurveys to update
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * Limit how many SatisfactionSurveys to update.
     */
    limit?: number
  }

  /**
   * SatisfactionSurveys updateManyAndReturn
   */
  export type SatisfactionSurveysUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * The data used to update SatisfactionSurveys.
     */
    data: XOR<SatisfactionSurveysUpdateManyMutationInput, SatisfactionSurveysUncheckedUpdateManyInput>
    /**
     * Filter which SatisfactionSurveys to update
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * Limit how many SatisfactionSurveys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SatisfactionSurveys upsert
   */
  export type SatisfactionSurveysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * The filter to search for the SatisfactionSurveys to update in case it exists.
     */
    where: SatisfactionSurveysWhereUniqueInput
    /**
     * In case the SatisfactionSurveys found by the `where` argument doesn't exist, create a new SatisfactionSurveys with this data.
     */
    create: XOR<SatisfactionSurveysCreateInput, SatisfactionSurveysUncheckedCreateInput>
    /**
     * In case the SatisfactionSurveys was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SatisfactionSurveysUpdateInput, SatisfactionSurveysUncheckedUpdateInput>
  }

  /**
   * SatisfactionSurveys delete
   */
  export type SatisfactionSurveysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    /**
     * Filter which SatisfactionSurveys to delete.
     */
    where: SatisfactionSurveysWhereUniqueInput
  }

  /**
   * SatisfactionSurveys deleteMany
   */
  export type SatisfactionSurveysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SatisfactionSurveys to delete
     */
    where?: SatisfactionSurveysWhereInput
    /**
     * Limit how many SatisfactionSurveys to delete.
     */
    limit?: number
  }

  /**
   * SatisfactionSurveys.tenant
   */
  export type SatisfactionSurveys$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * SatisfactionSurveys.npsResponses
   */
  export type SatisfactionSurveys$npsResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    where?: NpsResponsesWhereInput
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    cursor?: NpsResponsesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NpsResponsesScalarFieldEnum | NpsResponsesScalarFieldEnum[]
  }

  /**
   * SatisfactionSurveys.feedbacks
   */
  export type SatisfactionSurveys$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    where?: FeedbackSubmissionsWhereInput
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    cursor?: FeedbackSubmissionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * SatisfactionSurveys without action
   */
  export type SatisfactionSurveysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
  }


  /**
   * Model NpsResponses
   */

  export type AggregateNpsResponses = {
    _count: NpsResponsesCountAggregateOutputType | null
    _avg: NpsResponsesAvgAggregateOutputType | null
    _sum: NpsResponsesSumAggregateOutputType | null
    _min: NpsResponsesMinAggregateOutputType | null
    _max: NpsResponsesMaxAggregateOutputType | null
  }

  export type NpsResponsesAvgAggregateOutputType = {
    id: number | null
    surveyId: number | null
    score: number | null
  }

  export type NpsResponsesSumAggregateOutputType = {
    id: number | null
    surveyId: number | null
    score: number | null
  }

  export type NpsResponsesMinAggregateOutputType = {
    id: number | null
    surveyId: number | null
    userId: string | null
    tenantId: string | null
    score: number | null
    category: string | null
    comment: string | null
    anonymous: boolean | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type NpsResponsesMaxAggregateOutputType = {
    id: number | null
    surveyId: number | null
    userId: string | null
    tenantId: string | null
    score: number | null
    category: string | null
    comment: string | null
    anonymous: boolean | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type NpsResponsesCountAggregateOutputType = {
    id: number
    surveyId: number
    userId: number
    tenantId: number
    score: number
    category: number
    comment: number
    anonymous: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type NpsResponsesAvgAggregateInputType = {
    id?: true
    surveyId?: true
    score?: true
  }

  export type NpsResponsesSumAggregateInputType = {
    id?: true
    surveyId?: true
    score?: true
  }

  export type NpsResponsesMinAggregateInputType = {
    id?: true
    surveyId?: true
    userId?: true
    tenantId?: true
    score?: true
    category?: true
    comment?: true
    anonymous?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type NpsResponsesMaxAggregateInputType = {
    id?: true
    surveyId?: true
    userId?: true
    tenantId?: true
    score?: true
    category?: true
    comment?: true
    anonymous?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type NpsResponsesCountAggregateInputType = {
    id?: true
    surveyId?: true
    userId?: true
    tenantId?: true
    score?: true
    category?: true
    comment?: true
    anonymous?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type NpsResponsesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NpsResponses to aggregate.
     */
    where?: NpsResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NpsResponses to fetch.
     */
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NpsResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NpsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NpsResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NpsResponses
    **/
    _count?: true | NpsResponsesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NpsResponsesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NpsResponsesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NpsResponsesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NpsResponsesMaxAggregateInputType
  }

  export type GetNpsResponsesAggregateType<T extends NpsResponsesAggregateArgs> = {
        [P in keyof T & keyof AggregateNpsResponses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNpsResponses[P]>
      : GetScalarType<T[P], AggregateNpsResponses[P]>
  }




  export type NpsResponsesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NpsResponsesWhereInput
    orderBy?: NpsResponsesOrderByWithAggregationInput | NpsResponsesOrderByWithAggregationInput[]
    by: NpsResponsesScalarFieldEnum[] | NpsResponsesScalarFieldEnum
    having?: NpsResponsesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NpsResponsesCountAggregateInputType | true
    _avg?: NpsResponsesAvgAggregateInputType
    _sum?: NpsResponsesSumAggregateInputType
    _min?: NpsResponsesMinAggregateInputType
    _max?: NpsResponsesMaxAggregateInputType
  }

  export type NpsResponsesGroupByOutputType = {
    id: number
    surveyId: number
    userId: string | null
    tenantId: string | null
    score: number
    category: string
    comment: string | null
    anonymous: boolean
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: NpsResponsesCountAggregateOutputType | null
    _avg: NpsResponsesAvgAggregateOutputType | null
    _sum: NpsResponsesSumAggregateOutputType | null
    _min: NpsResponsesMinAggregateOutputType | null
    _max: NpsResponsesMaxAggregateOutputType | null
  }

  type GetNpsResponsesGroupByPayload<T extends NpsResponsesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NpsResponsesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NpsResponsesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NpsResponsesGroupByOutputType[P]>
            : GetScalarType<T[P], NpsResponsesGroupByOutputType[P]>
        }
      >
    >


  export type NpsResponsesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    score?: boolean
    category?: boolean
    comment?: boolean
    anonymous?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    survey?: boolean | SatisfactionSurveysDefaultArgs<ExtArgs>
    user?: boolean | NpsResponses$userArgs<ExtArgs>
    tenant?: boolean | NpsResponses$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["npsResponses"]>

  export type NpsResponsesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    score?: boolean
    category?: boolean
    comment?: boolean
    anonymous?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    survey?: boolean | SatisfactionSurveysDefaultArgs<ExtArgs>
    user?: boolean | NpsResponses$userArgs<ExtArgs>
    tenant?: boolean | NpsResponses$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["npsResponses"]>

  export type NpsResponsesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    score?: boolean
    category?: boolean
    comment?: boolean
    anonymous?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    survey?: boolean | SatisfactionSurveysDefaultArgs<ExtArgs>
    user?: boolean | NpsResponses$userArgs<ExtArgs>
    tenant?: boolean | NpsResponses$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["npsResponses"]>

  export type NpsResponsesSelectScalar = {
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    score?: boolean
    category?: boolean
    comment?: boolean
    anonymous?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type NpsResponsesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "surveyId" | "userId" | "tenantId" | "score" | "category" | "comment" | "anonymous" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["npsResponses"]>
  export type NpsResponsesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SatisfactionSurveysDefaultArgs<ExtArgs>
    user?: boolean | NpsResponses$userArgs<ExtArgs>
    tenant?: boolean | NpsResponses$tenantArgs<ExtArgs>
  }
  export type NpsResponsesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SatisfactionSurveysDefaultArgs<ExtArgs>
    user?: boolean | NpsResponses$userArgs<ExtArgs>
    tenant?: boolean | NpsResponses$tenantArgs<ExtArgs>
  }
  export type NpsResponsesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SatisfactionSurveysDefaultArgs<ExtArgs>
    user?: boolean | NpsResponses$userArgs<ExtArgs>
    tenant?: boolean | NpsResponses$tenantArgs<ExtArgs>
  }

  export type $NpsResponsesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NpsResponses"
    objects: {
      survey: Prisma.$SatisfactionSurveysPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      surveyId: number
      userId: string | null
      tenantId: string | null
      score: number
      category: string
      comment: string | null
      anonymous: boolean
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["npsResponses"]>
    composites: {}
  }

  type NpsResponsesGetPayload<S extends boolean | null | undefined | NpsResponsesDefaultArgs> = $Result.GetResult<Prisma.$NpsResponsesPayload, S>

  type NpsResponsesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NpsResponsesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NpsResponsesCountAggregateInputType | true
    }

  export interface NpsResponsesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NpsResponses'], meta: { name: 'NpsResponses' } }
    /**
     * Find zero or one NpsResponses that matches the filter.
     * @param {NpsResponsesFindUniqueArgs} args - Arguments to find a NpsResponses
     * @example
     * // Get one NpsResponses
     * const npsResponses = await prisma.npsResponses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NpsResponsesFindUniqueArgs>(args: SelectSubset<T, NpsResponsesFindUniqueArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NpsResponses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NpsResponsesFindUniqueOrThrowArgs} args - Arguments to find a NpsResponses
     * @example
     * // Get one NpsResponses
     * const npsResponses = await prisma.npsResponses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NpsResponsesFindUniqueOrThrowArgs>(args: SelectSubset<T, NpsResponsesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NpsResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesFindFirstArgs} args - Arguments to find a NpsResponses
     * @example
     * // Get one NpsResponses
     * const npsResponses = await prisma.npsResponses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NpsResponsesFindFirstArgs>(args?: SelectSubset<T, NpsResponsesFindFirstArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NpsResponses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesFindFirstOrThrowArgs} args - Arguments to find a NpsResponses
     * @example
     * // Get one NpsResponses
     * const npsResponses = await prisma.npsResponses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NpsResponsesFindFirstOrThrowArgs>(args?: SelectSubset<T, NpsResponsesFindFirstOrThrowArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NpsResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NpsResponses
     * const npsResponses = await prisma.npsResponses.findMany()
     * 
     * // Get first 10 NpsResponses
     * const npsResponses = await prisma.npsResponses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const npsResponsesWithIdOnly = await prisma.npsResponses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NpsResponsesFindManyArgs>(args?: SelectSubset<T, NpsResponsesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NpsResponses.
     * @param {NpsResponsesCreateArgs} args - Arguments to create a NpsResponses.
     * @example
     * // Create one NpsResponses
     * const NpsResponses = await prisma.npsResponses.create({
     *   data: {
     *     // ... data to create a NpsResponses
     *   }
     * })
     * 
     */
    create<T extends NpsResponsesCreateArgs>(args: SelectSubset<T, NpsResponsesCreateArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NpsResponses.
     * @param {NpsResponsesCreateManyArgs} args - Arguments to create many NpsResponses.
     * @example
     * // Create many NpsResponses
     * const npsResponses = await prisma.npsResponses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NpsResponsesCreateManyArgs>(args?: SelectSubset<T, NpsResponsesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NpsResponses and returns the data saved in the database.
     * @param {NpsResponsesCreateManyAndReturnArgs} args - Arguments to create many NpsResponses.
     * @example
     * // Create many NpsResponses
     * const npsResponses = await prisma.npsResponses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NpsResponses and only return the `id`
     * const npsResponsesWithIdOnly = await prisma.npsResponses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NpsResponsesCreateManyAndReturnArgs>(args?: SelectSubset<T, NpsResponsesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NpsResponses.
     * @param {NpsResponsesDeleteArgs} args - Arguments to delete one NpsResponses.
     * @example
     * // Delete one NpsResponses
     * const NpsResponses = await prisma.npsResponses.delete({
     *   where: {
     *     // ... filter to delete one NpsResponses
     *   }
     * })
     * 
     */
    delete<T extends NpsResponsesDeleteArgs>(args: SelectSubset<T, NpsResponsesDeleteArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NpsResponses.
     * @param {NpsResponsesUpdateArgs} args - Arguments to update one NpsResponses.
     * @example
     * // Update one NpsResponses
     * const npsResponses = await prisma.npsResponses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NpsResponsesUpdateArgs>(args: SelectSubset<T, NpsResponsesUpdateArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NpsResponses.
     * @param {NpsResponsesDeleteManyArgs} args - Arguments to filter NpsResponses to delete.
     * @example
     * // Delete a few NpsResponses
     * const { count } = await prisma.npsResponses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NpsResponsesDeleteManyArgs>(args?: SelectSubset<T, NpsResponsesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NpsResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NpsResponses
     * const npsResponses = await prisma.npsResponses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NpsResponsesUpdateManyArgs>(args: SelectSubset<T, NpsResponsesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NpsResponses and returns the data updated in the database.
     * @param {NpsResponsesUpdateManyAndReturnArgs} args - Arguments to update many NpsResponses.
     * @example
     * // Update many NpsResponses
     * const npsResponses = await prisma.npsResponses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NpsResponses and only return the `id`
     * const npsResponsesWithIdOnly = await prisma.npsResponses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NpsResponsesUpdateManyAndReturnArgs>(args: SelectSubset<T, NpsResponsesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NpsResponses.
     * @param {NpsResponsesUpsertArgs} args - Arguments to update or create a NpsResponses.
     * @example
     * // Update or create a NpsResponses
     * const npsResponses = await prisma.npsResponses.upsert({
     *   create: {
     *     // ... data to create a NpsResponses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NpsResponses we want to update
     *   }
     * })
     */
    upsert<T extends NpsResponsesUpsertArgs>(args: SelectSubset<T, NpsResponsesUpsertArgs<ExtArgs>>): Prisma__NpsResponsesClient<$Result.GetResult<Prisma.$NpsResponsesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NpsResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesCountArgs} args - Arguments to filter NpsResponses to count.
     * @example
     * // Count the number of NpsResponses
     * const count = await prisma.npsResponses.count({
     *   where: {
     *     // ... the filter for the NpsResponses we want to count
     *   }
     * })
    **/
    count<T extends NpsResponsesCountArgs>(
      args?: Subset<T, NpsResponsesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NpsResponsesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NpsResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NpsResponsesAggregateArgs>(args: Subset<T, NpsResponsesAggregateArgs>): Prisma.PrismaPromise<GetNpsResponsesAggregateType<T>>

    /**
     * Group by NpsResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NpsResponsesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NpsResponsesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NpsResponsesGroupByArgs['orderBy'] }
        : { orderBy?: NpsResponsesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NpsResponsesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNpsResponsesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NpsResponses model
   */
  readonly fields: NpsResponsesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NpsResponses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NpsResponsesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survey<T extends SatisfactionSurveysDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SatisfactionSurveysDefaultArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends NpsResponses$userArgs<ExtArgs> = {}>(args?: Subset<T, NpsResponses$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends NpsResponses$tenantArgs<ExtArgs> = {}>(args?: Subset<T, NpsResponses$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NpsResponses model
   */
  interface NpsResponsesFieldRefs {
    readonly id: FieldRef<"NpsResponses", 'Int'>
    readonly surveyId: FieldRef<"NpsResponses", 'Int'>
    readonly userId: FieldRef<"NpsResponses", 'String'>
    readonly tenantId: FieldRef<"NpsResponses", 'String'>
    readonly score: FieldRef<"NpsResponses", 'Int'>
    readonly category: FieldRef<"NpsResponses", 'String'>
    readonly comment: FieldRef<"NpsResponses", 'String'>
    readonly anonymous: FieldRef<"NpsResponses", 'Boolean'>
    readonly ipAddress: FieldRef<"NpsResponses", 'String'>
    readonly userAgent: FieldRef<"NpsResponses", 'String'>
    readonly createdAt: FieldRef<"NpsResponses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NpsResponses findUnique
   */
  export type NpsResponsesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * Filter, which NpsResponses to fetch.
     */
    where: NpsResponsesWhereUniqueInput
  }

  /**
   * NpsResponses findUniqueOrThrow
   */
  export type NpsResponsesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * Filter, which NpsResponses to fetch.
     */
    where: NpsResponsesWhereUniqueInput
  }

  /**
   * NpsResponses findFirst
   */
  export type NpsResponsesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * Filter, which NpsResponses to fetch.
     */
    where?: NpsResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NpsResponses to fetch.
     */
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NpsResponses.
     */
    cursor?: NpsResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NpsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NpsResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NpsResponses.
     */
    distinct?: NpsResponsesScalarFieldEnum | NpsResponsesScalarFieldEnum[]
  }

  /**
   * NpsResponses findFirstOrThrow
   */
  export type NpsResponsesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * Filter, which NpsResponses to fetch.
     */
    where?: NpsResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NpsResponses to fetch.
     */
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NpsResponses.
     */
    cursor?: NpsResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NpsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NpsResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NpsResponses.
     */
    distinct?: NpsResponsesScalarFieldEnum | NpsResponsesScalarFieldEnum[]
  }

  /**
   * NpsResponses findMany
   */
  export type NpsResponsesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * Filter, which NpsResponses to fetch.
     */
    where?: NpsResponsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NpsResponses to fetch.
     */
    orderBy?: NpsResponsesOrderByWithRelationInput | NpsResponsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NpsResponses.
     */
    cursor?: NpsResponsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NpsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NpsResponses.
     */
    skip?: number
    distinct?: NpsResponsesScalarFieldEnum | NpsResponsesScalarFieldEnum[]
  }

  /**
   * NpsResponses create
   */
  export type NpsResponsesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * The data needed to create a NpsResponses.
     */
    data: XOR<NpsResponsesCreateInput, NpsResponsesUncheckedCreateInput>
  }

  /**
   * NpsResponses createMany
   */
  export type NpsResponsesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NpsResponses.
     */
    data: NpsResponsesCreateManyInput | NpsResponsesCreateManyInput[]
  }

  /**
   * NpsResponses createManyAndReturn
   */
  export type NpsResponsesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * The data used to create many NpsResponses.
     */
    data: NpsResponsesCreateManyInput | NpsResponsesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NpsResponses update
   */
  export type NpsResponsesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * The data needed to update a NpsResponses.
     */
    data: XOR<NpsResponsesUpdateInput, NpsResponsesUncheckedUpdateInput>
    /**
     * Choose, which NpsResponses to update.
     */
    where: NpsResponsesWhereUniqueInput
  }

  /**
   * NpsResponses updateMany
   */
  export type NpsResponsesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NpsResponses.
     */
    data: XOR<NpsResponsesUpdateManyMutationInput, NpsResponsesUncheckedUpdateManyInput>
    /**
     * Filter which NpsResponses to update
     */
    where?: NpsResponsesWhereInput
    /**
     * Limit how many NpsResponses to update.
     */
    limit?: number
  }

  /**
   * NpsResponses updateManyAndReturn
   */
  export type NpsResponsesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * The data used to update NpsResponses.
     */
    data: XOR<NpsResponsesUpdateManyMutationInput, NpsResponsesUncheckedUpdateManyInput>
    /**
     * Filter which NpsResponses to update
     */
    where?: NpsResponsesWhereInput
    /**
     * Limit how many NpsResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NpsResponses upsert
   */
  export type NpsResponsesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * The filter to search for the NpsResponses to update in case it exists.
     */
    where: NpsResponsesWhereUniqueInput
    /**
     * In case the NpsResponses found by the `where` argument doesn't exist, create a new NpsResponses with this data.
     */
    create: XOR<NpsResponsesCreateInput, NpsResponsesUncheckedCreateInput>
    /**
     * In case the NpsResponses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NpsResponsesUpdateInput, NpsResponsesUncheckedUpdateInput>
  }

  /**
   * NpsResponses delete
   */
  export type NpsResponsesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
    /**
     * Filter which NpsResponses to delete.
     */
    where: NpsResponsesWhereUniqueInput
  }

  /**
   * NpsResponses deleteMany
   */
  export type NpsResponsesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NpsResponses to delete
     */
    where?: NpsResponsesWhereInput
    /**
     * Limit how many NpsResponses to delete.
     */
    limit?: number
  }

  /**
   * NpsResponses.user
   */
  export type NpsResponses$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * NpsResponses.tenant
   */
  export type NpsResponses$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * NpsResponses without action
   */
  export type NpsResponsesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NpsResponses
     */
    select?: NpsResponsesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NpsResponses
     */
    omit?: NpsResponsesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NpsResponsesInclude<ExtArgs> | null
  }


  /**
   * Model FeedbackSubmissions
   */

  export type AggregateFeedbackSubmissions = {
    _count: FeedbackSubmissionsCountAggregateOutputType | null
    _avg: FeedbackSubmissionsAvgAggregateOutputType | null
    _sum: FeedbackSubmissionsSumAggregateOutputType | null
    _min: FeedbackSubmissionsMinAggregateOutputType | null
    _max: FeedbackSubmissionsMaxAggregateOutputType | null
  }

  export type FeedbackSubmissionsAvgAggregateOutputType = {
    id: number | null
    surveyId: number | null
  }

  export type FeedbackSubmissionsSumAggregateOutputType = {
    id: number | null
    surveyId: number | null
  }

  export type FeedbackSubmissionsMinAggregateOutputType = {
    id: number | null
    surveyId: number | null
    userId: string | null
    tenantId: string | null
    feedbackType: string | null
    title: string | null
    description: string | null
    priority: string | null
    status: string | null
    category: string | null
    attachments: string | null
    assignedTo: string | null
    resolvedAt: Date | null
    resolution: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedbackSubmissionsMaxAggregateOutputType = {
    id: number | null
    surveyId: number | null
    userId: string | null
    tenantId: string | null
    feedbackType: string | null
    title: string | null
    description: string | null
    priority: string | null
    status: string | null
    category: string | null
    attachments: string | null
    assignedTo: string | null
    resolvedAt: Date | null
    resolution: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedbackSubmissionsCountAggregateOutputType = {
    id: number
    surveyId: number
    userId: number
    tenantId: number
    feedbackType: number
    title: number
    description: number
    priority: number
    status: number
    category: number
    attachments: number
    assignedTo: number
    resolvedAt: number
    resolution: number
    ipAddress: number
    userAgent: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeedbackSubmissionsAvgAggregateInputType = {
    id?: true
    surveyId?: true
  }

  export type FeedbackSubmissionsSumAggregateInputType = {
    id?: true
    surveyId?: true
  }

  export type FeedbackSubmissionsMinAggregateInputType = {
    id?: true
    surveyId?: true
    userId?: true
    tenantId?: true
    feedbackType?: true
    title?: true
    description?: true
    priority?: true
    status?: true
    category?: true
    attachments?: true
    assignedTo?: true
    resolvedAt?: true
    resolution?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedbackSubmissionsMaxAggregateInputType = {
    id?: true
    surveyId?: true
    userId?: true
    tenantId?: true
    feedbackType?: true
    title?: true
    description?: true
    priority?: true
    status?: true
    category?: true
    attachments?: true
    assignedTo?: true
    resolvedAt?: true
    resolution?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedbackSubmissionsCountAggregateInputType = {
    id?: true
    surveyId?: true
    userId?: true
    tenantId?: true
    feedbackType?: true
    title?: true
    description?: true
    priority?: true
    status?: true
    category?: true
    attachments?: true
    assignedTo?: true
    resolvedAt?: true
    resolution?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeedbackSubmissionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackSubmissions to aggregate.
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackSubmissions to fetch.
     */
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackSubmissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedbackSubmissions
    **/
    _count?: true | FeedbackSubmissionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackSubmissionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSubmissionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackSubmissionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackSubmissionsMaxAggregateInputType
  }

  export type GetFeedbackSubmissionsAggregateType<T extends FeedbackSubmissionsAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackSubmissions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackSubmissions[P]>
      : GetScalarType<T[P], AggregateFeedbackSubmissions[P]>
  }




  export type FeedbackSubmissionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackSubmissionsWhereInput
    orderBy?: FeedbackSubmissionsOrderByWithAggregationInput | FeedbackSubmissionsOrderByWithAggregationInput[]
    by: FeedbackSubmissionsScalarFieldEnum[] | FeedbackSubmissionsScalarFieldEnum
    having?: FeedbackSubmissionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackSubmissionsCountAggregateInputType | true
    _avg?: FeedbackSubmissionsAvgAggregateInputType
    _sum?: FeedbackSubmissionsSumAggregateInputType
    _min?: FeedbackSubmissionsMinAggregateInputType
    _max?: FeedbackSubmissionsMaxAggregateInputType
  }

  export type FeedbackSubmissionsGroupByOutputType = {
    id: number
    surveyId: number | null
    userId: string | null
    tenantId: string | null
    feedbackType: string
    title: string
    description: string
    priority: string
    status: string
    category: string | null
    attachments: string | null
    assignedTo: string | null
    resolvedAt: Date | null
    resolution: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    _count: FeedbackSubmissionsCountAggregateOutputType | null
    _avg: FeedbackSubmissionsAvgAggregateOutputType | null
    _sum: FeedbackSubmissionsSumAggregateOutputType | null
    _min: FeedbackSubmissionsMinAggregateOutputType | null
    _max: FeedbackSubmissionsMaxAggregateOutputType | null
  }

  type GetFeedbackSubmissionsGroupByPayload<T extends FeedbackSubmissionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackSubmissionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackSubmissionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackSubmissionsGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackSubmissionsGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSubmissionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    feedbackType?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    category?: boolean
    attachments?: boolean
    assignedTo?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    survey?: boolean | FeedbackSubmissions$surveyArgs<ExtArgs>
    user?: boolean | FeedbackSubmissions$userArgs<ExtArgs>
    tenant?: boolean | FeedbackSubmissions$tenantArgs<ExtArgs>
    assignee?: boolean | FeedbackSubmissions$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackSubmissions"]>

  export type FeedbackSubmissionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    feedbackType?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    category?: boolean
    attachments?: boolean
    assignedTo?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    survey?: boolean | FeedbackSubmissions$surveyArgs<ExtArgs>
    user?: boolean | FeedbackSubmissions$userArgs<ExtArgs>
    tenant?: boolean | FeedbackSubmissions$tenantArgs<ExtArgs>
    assignee?: boolean | FeedbackSubmissions$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackSubmissions"]>

  export type FeedbackSubmissionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    feedbackType?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    category?: boolean
    attachments?: boolean
    assignedTo?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    survey?: boolean | FeedbackSubmissions$surveyArgs<ExtArgs>
    user?: boolean | FeedbackSubmissions$userArgs<ExtArgs>
    tenant?: boolean | FeedbackSubmissions$tenantArgs<ExtArgs>
    assignee?: boolean | FeedbackSubmissions$assigneeArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackSubmissions"]>

  export type FeedbackSubmissionsSelectScalar = {
    id?: boolean
    surveyId?: boolean
    userId?: boolean
    tenantId?: boolean
    feedbackType?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    category?: boolean
    attachments?: boolean
    assignedTo?: boolean
    resolvedAt?: boolean
    resolution?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeedbackSubmissionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "surveyId" | "userId" | "tenantId" | "feedbackType" | "title" | "description" | "priority" | "status" | "category" | "attachments" | "assignedTo" | "resolvedAt" | "resolution" | "ipAddress" | "userAgent" | "createdAt" | "updatedAt", ExtArgs["result"]["feedbackSubmissions"]>
  export type FeedbackSubmissionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | FeedbackSubmissions$surveyArgs<ExtArgs>
    user?: boolean | FeedbackSubmissions$userArgs<ExtArgs>
    tenant?: boolean | FeedbackSubmissions$tenantArgs<ExtArgs>
    assignee?: boolean | FeedbackSubmissions$assigneeArgs<ExtArgs>
  }
  export type FeedbackSubmissionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | FeedbackSubmissions$surveyArgs<ExtArgs>
    user?: boolean | FeedbackSubmissions$userArgs<ExtArgs>
    tenant?: boolean | FeedbackSubmissions$tenantArgs<ExtArgs>
    assignee?: boolean | FeedbackSubmissions$assigneeArgs<ExtArgs>
  }
  export type FeedbackSubmissionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | FeedbackSubmissions$surveyArgs<ExtArgs>
    user?: boolean | FeedbackSubmissions$userArgs<ExtArgs>
    tenant?: boolean | FeedbackSubmissions$tenantArgs<ExtArgs>
    assignee?: boolean | FeedbackSubmissions$assigneeArgs<ExtArgs>
  }

  export type $FeedbackSubmissionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedbackSubmissions"
    objects: {
      survey: Prisma.$SatisfactionSurveysPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      assignee: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      surveyId: number | null
      userId: string | null
      tenantId: string | null
      feedbackType: string
      title: string
      description: string
      priority: string
      status: string
      category: string | null
      attachments: string | null
      assignedTo: string | null
      resolvedAt: Date | null
      resolution: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feedbackSubmissions"]>
    composites: {}
  }

  type FeedbackSubmissionsGetPayload<S extends boolean | null | undefined | FeedbackSubmissionsDefaultArgs> = $Result.GetResult<Prisma.$FeedbackSubmissionsPayload, S>

  type FeedbackSubmissionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackSubmissionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackSubmissionsCountAggregateInputType | true
    }

  export interface FeedbackSubmissionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackSubmissions'], meta: { name: 'FeedbackSubmissions' } }
    /**
     * Find zero or one FeedbackSubmissions that matches the filter.
     * @param {FeedbackSubmissionsFindUniqueArgs} args - Arguments to find a FeedbackSubmissions
     * @example
     * // Get one FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackSubmissionsFindUniqueArgs>(args: SelectSubset<T, FeedbackSubmissionsFindUniqueArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedbackSubmissions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackSubmissionsFindUniqueOrThrowArgs} args - Arguments to find a FeedbackSubmissions
     * @example
     * // Get one FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackSubmissionsFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackSubmissionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedbackSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsFindFirstArgs} args - Arguments to find a FeedbackSubmissions
     * @example
     * // Get one FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackSubmissionsFindFirstArgs>(args?: SelectSubset<T, FeedbackSubmissionsFindFirstArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedbackSubmissions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsFindFirstOrThrowArgs} args - Arguments to find a FeedbackSubmissions
     * @example
     * // Get one FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackSubmissionsFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackSubmissionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedbackSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.findMany()
     * 
     * // Get first 10 FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackSubmissionsWithIdOnly = await prisma.feedbackSubmissions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackSubmissionsFindManyArgs>(args?: SelectSubset<T, FeedbackSubmissionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedbackSubmissions.
     * @param {FeedbackSubmissionsCreateArgs} args - Arguments to create a FeedbackSubmissions.
     * @example
     * // Create one FeedbackSubmissions
     * const FeedbackSubmissions = await prisma.feedbackSubmissions.create({
     *   data: {
     *     // ... data to create a FeedbackSubmissions
     *   }
     * })
     * 
     */
    create<T extends FeedbackSubmissionsCreateArgs>(args: SelectSubset<T, FeedbackSubmissionsCreateArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedbackSubmissions.
     * @param {FeedbackSubmissionsCreateManyArgs} args - Arguments to create many FeedbackSubmissions.
     * @example
     * // Create many FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackSubmissionsCreateManyArgs>(args?: SelectSubset<T, FeedbackSubmissionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedbackSubmissions and returns the data saved in the database.
     * @param {FeedbackSubmissionsCreateManyAndReturnArgs} args - Arguments to create many FeedbackSubmissions.
     * @example
     * // Create many FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedbackSubmissions and only return the `id`
     * const feedbackSubmissionsWithIdOnly = await prisma.feedbackSubmissions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackSubmissionsCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackSubmissionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedbackSubmissions.
     * @param {FeedbackSubmissionsDeleteArgs} args - Arguments to delete one FeedbackSubmissions.
     * @example
     * // Delete one FeedbackSubmissions
     * const FeedbackSubmissions = await prisma.feedbackSubmissions.delete({
     *   where: {
     *     // ... filter to delete one FeedbackSubmissions
     *   }
     * })
     * 
     */
    delete<T extends FeedbackSubmissionsDeleteArgs>(args: SelectSubset<T, FeedbackSubmissionsDeleteArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedbackSubmissions.
     * @param {FeedbackSubmissionsUpdateArgs} args - Arguments to update one FeedbackSubmissions.
     * @example
     * // Update one FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackSubmissionsUpdateArgs>(args: SelectSubset<T, FeedbackSubmissionsUpdateArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedbackSubmissions.
     * @param {FeedbackSubmissionsDeleteManyArgs} args - Arguments to filter FeedbackSubmissions to delete.
     * @example
     * // Delete a few FeedbackSubmissions
     * const { count } = await prisma.feedbackSubmissions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackSubmissionsDeleteManyArgs>(args?: SelectSubset<T, FeedbackSubmissionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackSubmissionsUpdateManyArgs>(args: SelectSubset<T, FeedbackSubmissionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackSubmissions and returns the data updated in the database.
     * @param {FeedbackSubmissionsUpdateManyAndReturnArgs} args - Arguments to update many FeedbackSubmissions.
     * @example
     * // Update many FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedbackSubmissions and only return the `id`
     * const feedbackSubmissionsWithIdOnly = await prisma.feedbackSubmissions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackSubmissionsUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackSubmissionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedbackSubmissions.
     * @param {FeedbackSubmissionsUpsertArgs} args - Arguments to update or create a FeedbackSubmissions.
     * @example
     * // Update or create a FeedbackSubmissions
     * const feedbackSubmissions = await prisma.feedbackSubmissions.upsert({
     *   create: {
     *     // ... data to create a FeedbackSubmissions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackSubmissions we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackSubmissionsUpsertArgs>(args: SelectSubset<T, FeedbackSubmissionsUpsertArgs<ExtArgs>>): Prisma__FeedbackSubmissionsClient<$Result.GetResult<Prisma.$FeedbackSubmissionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedbackSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsCountArgs} args - Arguments to filter FeedbackSubmissions to count.
     * @example
     * // Count the number of FeedbackSubmissions
     * const count = await prisma.feedbackSubmissions.count({
     *   where: {
     *     // ... the filter for the FeedbackSubmissions we want to count
     *   }
     * })
    **/
    count<T extends FeedbackSubmissionsCountArgs>(
      args?: Subset<T, FeedbackSubmissionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackSubmissionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackSubmissionsAggregateArgs>(args: Subset<T, FeedbackSubmissionsAggregateArgs>): Prisma.PrismaPromise<GetFeedbackSubmissionsAggregateType<T>>

    /**
     * Group by FeedbackSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackSubmissionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackSubmissionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackSubmissionsGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackSubmissionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackSubmissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackSubmissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackSubmissions model
   */
  readonly fields: FeedbackSubmissionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedbackSubmissions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackSubmissionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survey<T extends FeedbackSubmissions$surveyArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackSubmissions$surveyArgs<ExtArgs>>): Prisma__SatisfactionSurveysClient<$Result.GetResult<Prisma.$SatisfactionSurveysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends FeedbackSubmissions$userArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackSubmissions$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends FeedbackSubmissions$tenantArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackSubmissions$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignee<T extends FeedbackSubmissions$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackSubmissions$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedbackSubmissions model
   */
  interface FeedbackSubmissionsFieldRefs {
    readonly id: FieldRef<"FeedbackSubmissions", 'Int'>
    readonly surveyId: FieldRef<"FeedbackSubmissions", 'Int'>
    readonly userId: FieldRef<"FeedbackSubmissions", 'String'>
    readonly tenantId: FieldRef<"FeedbackSubmissions", 'String'>
    readonly feedbackType: FieldRef<"FeedbackSubmissions", 'String'>
    readonly title: FieldRef<"FeedbackSubmissions", 'String'>
    readonly description: FieldRef<"FeedbackSubmissions", 'String'>
    readonly priority: FieldRef<"FeedbackSubmissions", 'String'>
    readonly status: FieldRef<"FeedbackSubmissions", 'String'>
    readonly category: FieldRef<"FeedbackSubmissions", 'String'>
    readonly attachments: FieldRef<"FeedbackSubmissions", 'String'>
    readonly assignedTo: FieldRef<"FeedbackSubmissions", 'String'>
    readonly resolvedAt: FieldRef<"FeedbackSubmissions", 'DateTime'>
    readonly resolution: FieldRef<"FeedbackSubmissions", 'String'>
    readonly ipAddress: FieldRef<"FeedbackSubmissions", 'String'>
    readonly userAgent: FieldRef<"FeedbackSubmissions", 'String'>
    readonly createdAt: FieldRef<"FeedbackSubmissions", 'DateTime'>
    readonly updatedAt: FieldRef<"FeedbackSubmissions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeedbackSubmissions findUnique
   */
  export type FeedbackSubmissionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackSubmissions to fetch.
     */
    where: FeedbackSubmissionsWhereUniqueInput
  }

  /**
   * FeedbackSubmissions findUniqueOrThrow
   */
  export type FeedbackSubmissionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackSubmissions to fetch.
     */
    where: FeedbackSubmissionsWhereUniqueInput
  }

  /**
   * FeedbackSubmissions findFirst
   */
  export type FeedbackSubmissionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackSubmissions to fetch.
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackSubmissions to fetch.
     */
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackSubmissions.
     */
    cursor?: FeedbackSubmissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackSubmissions.
     */
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * FeedbackSubmissions findFirstOrThrow
   */
  export type FeedbackSubmissionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackSubmissions to fetch.
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackSubmissions to fetch.
     */
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackSubmissions.
     */
    cursor?: FeedbackSubmissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackSubmissions.
     */
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * FeedbackSubmissions findMany
   */
  export type FeedbackSubmissionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackSubmissions to fetch.
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackSubmissions to fetch.
     */
    orderBy?: FeedbackSubmissionsOrderByWithRelationInput | FeedbackSubmissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedbackSubmissions.
     */
    cursor?: FeedbackSubmissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackSubmissions.
     */
    skip?: number
    distinct?: FeedbackSubmissionsScalarFieldEnum | FeedbackSubmissionsScalarFieldEnum[]
  }

  /**
   * FeedbackSubmissions create
   */
  export type FeedbackSubmissionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedbackSubmissions.
     */
    data: XOR<FeedbackSubmissionsCreateInput, FeedbackSubmissionsUncheckedCreateInput>
  }

  /**
   * FeedbackSubmissions createMany
   */
  export type FeedbackSubmissionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedbackSubmissions.
     */
    data: FeedbackSubmissionsCreateManyInput | FeedbackSubmissionsCreateManyInput[]
  }

  /**
   * FeedbackSubmissions createManyAndReturn
   */
  export type FeedbackSubmissionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * The data used to create many FeedbackSubmissions.
     */
    data: FeedbackSubmissionsCreateManyInput | FeedbackSubmissionsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedbackSubmissions update
   */
  export type FeedbackSubmissionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedbackSubmissions.
     */
    data: XOR<FeedbackSubmissionsUpdateInput, FeedbackSubmissionsUncheckedUpdateInput>
    /**
     * Choose, which FeedbackSubmissions to update.
     */
    where: FeedbackSubmissionsWhereUniqueInput
  }

  /**
   * FeedbackSubmissions updateMany
   */
  export type FeedbackSubmissionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedbackSubmissions.
     */
    data: XOR<FeedbackSubmissionsUpdateManyMutationInput, FeedbackSubmissionsUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackSubmissions to update
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * Limit how many FeedbackSubmissions to update.
     */
    limit?: number
  }

  /**
   * FeedbackSubmissions updateManyAndReturn
   */
  export type FeedbackSubmissionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * The data used to update FeedbackSubmissions.
     */
    data: XOR<FeedbackSubmissionsUpdateManyMutationInput, FeedbackSubmissionsUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackSubmissions to update
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * Limit how many FeedbackSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedbackSubmissions upsert
   */
  export type FeedbackSubmissionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedbackSubmissions to update in case it exists.
     */
    where: FeedbackSubmissionsWhereUniqueInput
    /**
     * In case the FeedbackSubmissions found by the `where` argument doesn't exist, create a new FeedbackSubmissions with this data.
     */
    create: XOR<FeedbackSubmissionsCreateInput, FeedbackSubmissionsUncheckedCreateInput>
    /**
     * In case the FeedbackSubmissions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackSubmissionsUpdateInput, FeedbackSubmissionsUncheckedUpdateInput>
  }

  /**
   * FeedbackSubmissions delete
   */
  export type FeedbackSubmissionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
    /**
     * Filter which FeedbackSubmissions to delete.
     */
    where: FeedbackSubmissionsWhereUniqueInput
  }

  /**
   * FeedbackSubmissions deleteMany
   */
  export type FeedbackSubmissionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackSubmissions to delete
     */
    where?: FeedbackSubmissionsWhereInput
    /**
     * Limit how many FeedbackSubmissions to delete.
     */
    limit?: number
  }

  /**
   * FeedbackSubmissions.survey
   */
  export type FeedbackSubmissions$surveyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SatisfactionSurveys
     */
    select?: SatisfactionSurveysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SatisfactionSurveys
     */
    omit?: SatisfactionSurveysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SatisfactionSurveysInclude<ExtArgs> | null
    where?: SatisfactionSurveysWhereInput
  }

  /**
   * FeedbackSubmissions.user
   */
  export type FeedbackSubmissions$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FeedbackSubmissions.tenant
   */
  export type FeedbackSubmissions$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * FeedbackSubmissions.assignee
   */
  export type FeedbackSubmissions$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FeedbackSubmissions without action
   */
  export type FeedbackSubmissionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackSubmissions
     */
    select?: FeedbackSubmissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackSubmissions
     */
    omit?: FeedbackSubmissionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackSubmissionsInclude<ExtArgs> | null
  }


  /**
   * Model SystemLogs
   */

  export type AggregateSystemLogs = {
    _count: SystemLogsCountAggregateOutputType | null
    _avg: SystemLogsAvgAggregateOutputType | null
    _sum: SystemLogsSumAggregateOutputType | null
    _min: SystemLogsMinAggregateOutputType | null
    _max: SystemLogsMaxAggregateOutputType | null
  }

  export type SystemLogsAvgAggregateOutputType = {
    id: number | null
  }

  export type SystemLogsSumAggregateOutputType = {
    id: number | null
  }

  export type SystemLogsMinAggregateOutputType = {
    id: number | null
    logLevel: string | null
    service: string | null
    message: string | null
    details: string | null
    userId: string | null
    tenantId: string | null
    stackTrace: string | null
    requestId: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type SystemLogsMaxAggregateOutputType = {
    id: number | null
    logLevel: string | null
    service: string | null
    message: string | null
    details: string | null
    userId: string | null
    tenantId: string | null
    stackTrace: string | null
    requestId: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type SystemLogsCountAggregateOutputType = {
    id: number
    logLevel: number
    service: number
    message: number
    details: number
    userId: number
    tenantId: number
    stackTrace: number
    requestId: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type SystemLogsAvgAggregateInputType = {
    id?: true
  }

  export type SystemLogsSumAggregateInputType = {
    id?: true
  }

  export type SystemLogsMinAggregateInputType = {
    id?: true
    logLevel?: true
    service?: true
    message?: true
    details?: true
    userId?: true
    tenantId?: true
    stackTrace?: true
    requestId?: true
    ipAddress?: true
    createdAt?: true
  }

  export type SystemLogsMaxAggregateInputType = {
    id?: true
    logLevel?: true
    service?: true
    message?: true
    details?: true
    userId?: true
    tenantId?: true
    stackTrace?: true
    requestId?: true
    ipAddress?: true
    createdAt?: true
  }

  export type SystemLogsCountAggregateInputType = {
    id?: true
    logLevel?: true
    service?: true
    message?: true
    details?: true
    userId?: true
    tenantId?: true
    stackTrace?: true
    requestId?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type SystemLogsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLogs to aggregate.
     */
    where?: SystemLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogsOrderByWithRelationInput | SystemLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemLogs
    **/
    _count?: true | SystemLogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemLogsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemLogsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemLogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemLogsMaxAggregateInputType
  }

  export type GetSystemLogsAggregateType<T extends SystemLogsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemLogs[P]>
      : GetScalarType<T[P], AggregateSystemLogs[P]>
  }




  export type SystemLogsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemLogsWhereInput
    orderBy?: SystemLogsOrderByWithAggregationInput | SystemLogsOrderByWithAggregationInput[]
    by: SystemLogsScalarFieldEnum[] | SystemLogsScalarFieldEnum
    having?: SystemLogsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemLogsCountAggregateInputType | true
    _avg?: SystemLogsAvgAggregateInputType
    _sum?: SystemLogsSumAggregateInputType
    _min?: SystemLogsMinAggregateInputType
    _max?: SystemLogsMaxAggregateInputType
  }

  export type SystemLogsGroupByOutputType = {
    id: number
    logLevel: string
    service: string
    message: string
    details: string | null
    userId: string | null
    tenantId: string | null
    stackTrace: string | null
    requestId: string | null
    ipAddress: string | null
    createdAt: Date
    _count: SystemLogsCountAggregateOutputType | null
    _avg: SystemLogsAvgAggregateOutputType | null
    _sum: SystemLogsSumAggregateOutputType | null
    _min: SystemLogsMinAggregateOutputType | null
    _max: SystemLogsMaxAggregateOutputType | null
  }

  type GetSystemLogsGroupByPayload<T extends SystemLogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemLogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemLogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemLogsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemLogsGroupByOutputType[P]>
        }
      >
    >


  export type SystemLogsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logLevel?: boolean
    service?: boolean
    message?: boolean
    details?: boolean
    userId?: boolean
    tenantId?: boolean
    stackTrace?: boolean
    requestId?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["systemLogs"]>

  export type SystemLogsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logLevel?: boolean
    service?: boolean
    message?: boolean
    details?: boolean
    userId?: boolean
    tenantId?: boolean
    stackTrace?: boolean
    requestId?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["systemLogs"]>

  export type SystemLogsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    logLevel?: boolean
    service?: boolean
    message?: boolean
    details?: boolean
    userId?: boolean
    tenantId?: boolean
    stackTrace?: boolean
    requestId?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["systemLogs"]>

  export type SystemLogsSelectScalar = {
    id?: boolean
    logLevel?: boolean
    service?: boolean
    message?: boolean
    details?: boolean
    userId?: boolean
    tenantId?: boolean
    stackTrace?: boolean
    requestId?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type SystemLogsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "logLevel" | "service" | "message" | "details" | "userId" | "tenantId" | "stackTrace" | "requestId" | "ipAddress" | "createdAt", ExtArgs["result"]["systemLogs"]>

  export type $SystemLogsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemLogs"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      logLevel: string
      service: string
      message: string
      details: string | null
      userId: string | null
      tenantId: string | null
      stackTrace: string | null
      requestId: string | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["systemLogs"]>
    composites: {}
  }

  type SystemLogsGetPayload<S extends boolean | null | undefined | SystemLogsDefaultArgs> = $Result.GetResult<Prisma.$SystemLogsPayload, S>

  type SystemLogsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemLogsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemLogsCountAggregateInputType | true
    }

  export interface SystemLogsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemLogs'], meta: { name: 'SystemLogs' } }
    /**
     * Find zero or one SystemLogs that matches the filter.
     * @param {SystemLogsFindUniqueArgs} args - Arguments to find a SystemLogs
     * @example
     * // Get one SystemLogs
     * const systemLogs = await prisma.systemLogs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemLogsFindUniqueArgs>(args: SelectSubset<T, SystemLogsFindUniqueArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemLogs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemLogsFindUniqueOrThrowArgs} args - Arguments to find a SystemLogs
     * @example
     * // Get one SystemLogs
     * const systemLogs = await prisma.systemLogs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemLogsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemLogsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsFindFirstArgs} args - Arguments to find a SystemLogs
     * @example
     * // Get one SystemLogs
     * const systemLogs = await prisma.systemLogs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemLogsFindFirstArgs>(args?: SelectSubset<T, SystemLogsFindFirstArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemLogs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsFindFirstOrThrowArgs} args - Arguments to find a SystemLogs
     * @example
     * // Get one SystemLogs
     * const systemLogs = await prisma.systemLogs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemLogsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemLogsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemLogs
     * const systemLogs = await prisma.systemLogs.findMany()
     * 
     * // Get first 10 SystemLogs
     * const systemLogs = await prisma.systemLogs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemLogsWithIdOnly = await prisma.systemLogs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemLogsFindManyArgs>(args?: SelectSubset<T, SystemLogsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemLogs.
     * @param {SystemLogsCreateArgs} args - Arguments to create a SystemLogs.
     * @example
     * // Create one SystemLogs
     * const SystemLogs = await prisma.systemLogs.create({
     *   data: {
     *     // ... data to create a SystemLogs
     *   }
     * })
     * 
     */
    create<T extends SystemLogsCreateArgs>(args: SelectSubset<T, SystemLogsCreateArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemLogs.
     * @param {SystemLogsCreateManyArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLogs = await prisma.systemLogs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemLogsCreateManyArgs>(args?: SelectSubset<T, SystemLogsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemLogs and returns the data saved in the database.
     * @param {SystemLogsCreateManyAndReturnArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLogs = await prisma.systemLogs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemLogs and only return the `id`
     * const systemLogsWithIdOnly = await prisma.systemLogs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemLogsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemLogsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemLogs.
     * @param {SystemLogsDeleteArgs} args - Arguments to delete one SystemLogs.
     * @example
     * // Delete one SystemLogs
     * const SystemLogs = await prisma.systemLogs.delete({
     *   where: {
     *     // ... filter to delete one SystemLogs
     *   }
     * })
     * 
     */
    delete<T extends SystemLogsDeleteArgs>(args: SelectSubset<T, SystemLogsDeleteArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemLogs.
     * @param {SystemLogsUpdateArgs} args - Arguments to update one SystemLogs.
     * @example
     * // Update one SystemLogs
     * const systemLogs = await prisma.systemLogs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemLogsUpdateArgs>(args: SelectSubset<T, SystemLogsUpdateArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemLogs.
     * @param {SystemLogsDeleteManyArgs} args - Arguments to filter SystemLogs to delete.
     * @example
     * // Delete a few SystemLogs
     * const { count } = await prisma.systemLogs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemLogsDeleteManyArgs>(args?: SelectSubset<T, SystemLogsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemLogs
     * const systemLogs = await prisma.systemLogs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemLogsUpdateManyArgs>(args: SelectSubset<T, SystemLogsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemLogs and returns the data updated in the database.
     * @param {SystemLogsUpdateManyAndReturnArgs} args - Arguments to update many SystemLogs.
     * @example
     * // Update many SystemLogs
     * const systemLogs = await prisma.systemLogs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemLogs and only return the `id`
     * const systemLogsWithIdOnly = await prisma.systemLogs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemLogsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemLogsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemLogs.
     * @param {SystemLogsUpsertArgs} args - Arguments to update or create a SystemLogs.
     * @example
     * // Update or create a SystemLogs
     * const systemLogs = await prisma.systemLogs.upsert({
     *   create: {
     *     // ... data to create a SystemLogs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemLogs we want to update
     *   }
     * })
     */
    upsert<T extends SystemLogsUpsertArgs>(args: SelectSubset<T, SystemLogsUpsertArgs<ExtArgs>>): Prisma__SystemLogsClient<$Result.GetResult<Prisma.$SystemLogsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsCountArgs} args - Arguments to filter SystemLogs to count.
     * @example
     * // Count the number of SystemLogs
     * const count = await prisma.systemLogs.count({
     *   where: {
     *     // ... the filter for the SystemLogs we want to count
     *   }
     * })
    **/
    count<T extends SystemLogsCountArgs>(
      args?: Subset<T, SystemLogsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemLogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemLogsAggregateArgs>(args: Subset<T, SystemLogsAggregateArgs>): Prisma.PrismaPromise<GetSystemLogsAggregateType<T>>

    /**
     * Group by SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemLogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemLogsGroupByArgs['orderBy'] }
        : { orderBy?: SystemLogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemLogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemLogs model
   */
  readonly fields: SystemLogsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemLogs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemLogsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemLogs model
   */
  interface SystemLogsFieldRefs {
    readonly id: FieldRef<"SystemLogs", 'Int'>
    readonly logLevel: FieldRef<"SystemLogs", 'String'>
    readonly service: FieldRef<"SystemLogs", 'String'>
    readonly message: FieldRef<"SystemLogs", 'String'>
    readonly details: FieldRef<"SystemLogs", 'String'>
    readonly userId: FieldRef<"SystemLogs", 'String'>
    readonly tenantId: FieldRef<"SystemLogs", 'String'>
    readonly stackTrace: FieldRef<"SystemLogs", 'String'>
    readonly requestId: FieldRef<"SystemLogs", 'String'>
    readonly ipAddress: FieldRef<"SystemLogs", 'String'>
    readonly createdAt: FieldRef<"SystemLogs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemLogs findUnique
   */
  export type SystemLogsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where: SystemLogsWhereUniqueInput
  }

  /**
   * SystemLogs findUniqueOrThrow
   */
  export type SystemLogsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where: SystemLogsWhereUniqueInput
  }

  /**
   * SystemLogs findFirst
   */
  export type SystemLogsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where?: SystemLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogsOrderByWithRelationInput | SystemLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogsScalarFieldEnum | SystemLogsScalarFieldEnum[]
  }

  /**
   * SystemLogs findFirstOrThrow
   */
  export type SystemLogsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where?: SystemLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogsOrderByWithRelationInput | SystemLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogsScalarFieldEnum | SystemLogsScalarFieldEnum[]
  }

  /**
   * SystemLogs findMany
   */
  export type SystemLogsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where?: SystemLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogsOrderByWithRelationInput | SystemLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemLogs.
     */
    cursor?: SystemLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    distinct?: SystemLogsScalarFieldEnum | SystemLogsScalarFieldEnum[]
  }

  /**
   * SystemLogs create
   */
  export type SystemLogsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemLogs.
     */
    data: XOR<SystemLogsCreateInput, SystemLogsUncheckedCreateInput>
  }

  /**
   * SystemLogs createMany
   */
  export type SystemLogsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogsCreateManyInput | SystemLogsCreateManyInput[]
  }

  /**
   * SystemLogs createManyAndReturn
   */
  export type SystemLogsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogsCreateManyInput | SystemLogsCreateManyInput[]
  }

  /**
   * SystemLogs update
   */
  export type SystemLogsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemLogs.
     */
    data: XOR<SystemLogsUpdateInput, SystemLogsUncheckedUpdateInput>
    /**
     * Choose, which SystemLogs to update.
     */
    where: SystemLogsWhereUniqueInput
  }

  /**
   * SystemLogs updateMany
   */
  export type SystemLogsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemLogs.
     */
    data: XOR<SystemLogsUpdateManyMutationInput, SystemLogsUncheckedUpdateManyInput>
    /**
     * Filter which SystemLogs to update
     */
    where?: SystemLogsWhereInput
    /**
     * Limit how many SystemLogs to update.
     */
    limit?: number
  }

  /**
   * SystemLogs updateManyAndReturn
   */
  export type SystemLogsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * The data used to update SystemLogs.
     */
    data: XOR<SystemLogsUpdateManyMutationInput, SystemLogsUncheckedUpdateManyInput>
    /**
     * Filter which SystemLogs to update
     */
    where?: SystemLogsWhereInput
    /**
     * Limit how many SystemLogs to update.
     */
    limit?: number
  }

  /**
   * SystemLogs upsert
   */
  export type SystemLogsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemLogs to update in case it exists.
     */
    where: SystemLogsWhereUniqueInput
    /**
     * In case the SystemLogs found by the `where` argument doesn't exist, create a new SystemLogs with this data.
     */
    create: XOR<SystemLogsCreateInput, SystemLogsUncheckedCreateInput>
    /**
     * In case the SystemLogs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemLogsUpdateInput, SystemLogsUncheckedUpdateInput>
  }

  /**
   * SystemLogs delete
   */
  export type SystemLogsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
    /**
     * Filter which SystemLogs to delete.
     */
    where: SystemLogsWhereUniqueInput
  }

  /**
   * SystemLogs deleteMany
   */
  export type SystemLogsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLogs to delete
     */
    where?: SystemLogsWhereInput
    /**
     * Limit how many SystemLogs to delete.
     */
    limit?: number
  }

  /**
   * SystemLogs without action
   */
  export type SystemLogsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLogs
     */
    select?: SystemLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLogs
     */
    omit?: SystemLogsOmit<ExtArgs> | null
  }


  /**
   * Model ServiceStatus
   */

  export type AggregateServiceStatus = {
    _count: ServiceStatusCountAggregateOutputType | null
    _avg: ServiceStatusAvgAggregateOutputType | null
    _sum: ServiceStatusSumAggregateOutputType | null
    _min: ServiceStatusMinAggregateOutputType | null
    _max: ServiceStatusMaxAggregateOutputType | null
  }

  export type ServiceStatusAvgAggregateOutputType = {
    id: number | null
    responseTime: number | null
    uptime: number | null
  }

  export type ServiceStatusSumAggregateOutputType = {
    id: number | null
    responseTime: number | null
    uptime: number | null
  }

  export type ServiceStatusMinAggregateOutputType = {
    id: number | null
    serviceName: string | null
    status: string | null
    lastCheck: Date | null
    responseTime: number | null
    errorMessage: string | null
    uptime: number | null
    checkType: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceStatusMaxAggregateOutputType = {
    id: number | null
    serviceName: string | null
    status: string | null
    lastCheck: Date | null
    responseTime: number | null
    errorMessage: string | null
    uptime: number | null
    checkType: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceStatusCountAggregateOutputType = {
    id: number
    serviceName: number
    status: number
    lastCheck: number
    responseTime: number
    errorMessage: number
    uptime: number
    checkType: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceStatusAvgAggregateInputType = {
    id?: true
    responseTime?: true
    uptime?: true
  }

  export type ServiceStatusSumAggregateInputType = {
    id?: true
    responseTime?: true
    uptime?: true
  }

  export type ServiceStatusMinAggregateInputType = {
    id?: true
    serviceName?: true
    status?: true
    lastCheck?: true
    responseTime?: true
    errorMessage?: true
    uptime?: true
    checkType?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceStatusMaxAggregateInputType = {
    id?: true
    serviceName?: true
    status?: true
    lastCheck?: true
    responseTime?: true
    errorMessage?: true
    uptime?: true
    checkType?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceStatusCountAggregateInputType = {
    id?: true
    serviceName?: true
    status?: true
    lastCheck?: true
    responseTime?: true
    errorMessage?: true
    uptime?: true
    checkType?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceStatus to aggregate.
     */
    where?: ServiceStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStatuses to fetch.
     */
    orderBy?: ServiceStatusOrderByWithRelationInput | ServiceStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceStatuses
    **/
    _count?: true | ServiceStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceStatusMaxAggregateInputType
  }

  export type GetServiceStatusAggregateType<T extends ServiceStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceStatus[P]>
      : GetScalarType<T[P], AggregateServiceStatus[P]>
  }




  export type ServiceStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceStatusWhereInput
    orderBy?: ServiceStatusOrderByWithAggregationInput | ServiceStatusOrderByWithAggregationInput[]
    by: ServiceStatusScalarFieldEnum[] | ServiceStatusScalarFieldEnum
    having?: ServiceStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceStatusCountAggregateInputType | true
    _avg?: ServiceStatusAvgAggregateInputType
    _sum?: ServiceStatusSumAggregateInputType
    _min?: ServiceStatusMinAggregateInputType
    _max?: ServiceStatusMaxAggregateInputType
  }

  export type ServiceStatusGroupByOutputType = {
    id: number
    serviceName: string
    status: string
    lastCheck: Date
    responseTime: number | null
    errorMessage: string | null
    uptime: number | null
    checkType: string
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceStatusCountAggregateOutputType | null
    _avg: ServiceStatusAvgAggregateOutputType | null
    _sum: ServiceStatusSumAggregateOutputType | null
    _min: ServiceStatusMinAggregateOutputType | null
    _max: ServiceStatusMaxAggregateOutputType | null
  }

  type GetServiceStatusGroupByPayload<T extends ServiceStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceStatusGroupByOutputType[P]>
        }
      >
    >


  export type ServiceStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    status?: boolean
    lastCheck?: boolean
    responseTime?: boolean
    errorMessage?: boolean
    uptime?: boolean
    checkType?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceStatus"]>

  export type ServiceStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    status?: boolean
    lastCheck?: boolean
    responseTime?: boolean
    errorMessage?: boolean
    uptime?: boolean
    checkType?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceStatus"]>

  export type ServiceStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    status?: boolean
    lastCheck?: boolean
    responseTime?: boolean
    errorMessage?: boolean
    uptime?: boolean
    checkType?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceStatus"]>

  export type ServiceStatusSelectScalar = {
    id?: boolean
    serviceName?: boolean
    status?: boolean
    lastCheck?: boolean
    responseTime?: boolean
    errorMessage?: boolean
    uptime?: boolean
    checkType?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "status" | "lastCheck" | "responseTime" | "errorMessage" | "uptime" | "checkType" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceStatus"]>

  export type $ServiceStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceStatus"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceName: string
      status: string
      lastCheck: Date
      responseTime: number | null
      errorMessage: string | null
      uptime: number | null
      checkType: string
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceStatus"]>
    composites: {}
  }

  type ServiceStatusGetPayload<S extends boolean | null | undefined | ServiceStatusDefaultArgs> = $Result.GetResult<Prisma.$ServiceStatusPayload, S>

  type ServiceStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceStatusCountAggregateInputType | true
    }

  export interface ServiceStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceStatus'], meta: { name: 'ServiceStatus' } }
    /**
     * Find zero or one ServiceStatus that matches the filter.
     * @param {ServiceStatusFindUniqueArgs} args - Arguments to find a ServiceStatus
     * @example
     * // Get one ServiceStatus
     * const serviceStatus = await prisma.serviceStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceStatusFindUniqueArgs>(args: SelectSubset<T, ServiceStatusFindUniqueArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceStatusFindUniqueOrThrowArgs} args - Arguments to find a ServiceStatus
     * @example
     * // Get one ServiceStatus
     * const serviceStatus = await prisma.serviceStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusFindFirstArgs} args - Arguments to find a ServiceStatus
     * @example
     * // Get one ServiceStatus
     * const serviceStatus = await prisma.serviceStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceStatusFindFirstArgs>(args?: SelectSubset<T, ServiceStatusFindFirstArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusFindFirstOrThrowArgs} args - Arguments to find a ServiceStatus
     * @example
     * // Get one ServiceStatus
     * const serviceStatus = await prisma.serviceStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceStatuses
     * const serviceStatuses = await prisma.serviceStatus.findMany()
     * 
     * // Get first 10 ServiceStatuses
     * const serviceStatuses = await prisma.serviceStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceStatusWithIdOnly = await prisma.serviceStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceStatusFindManyArgs>(args?: SelectSubset<T, ServiceStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceStatus.
     * @param {ServiceStatusCreateArgs} args - Arguments to create a ServiceStatus.
     * @example
     * // Create one ServiceStatus
     * const ServiceStatus = await prisma.serviceStatus.create({
     *   data: {
     *     // ... data to create a ServiceStatus
     *   }
     * })
     * 
     */
    create<T extends ServiceStatusCreateArgs>(args: SelectSubset<T, ServiceStatusCreateArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceStatuses.
     * @param {ServiceStatusCreateManyArgs} args - Arguments to create many ServiceStatuses.
     * @example
     * // Create many ServiceStatuses
     * const serviceStatus = await prisma.serviceStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceStatusCreateManyArgs>(args?: SelectSubset<T, ServiceStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceStatuses and returns the data saved in the database.
     * @param {ServiceStatusCreateManyAndReturnArgs} args - Arguments to create many ServiceStatuses.
     * @example
     * // Create many ServiceStatuses
     * const serviceStatus = await prisma.serviceStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceStatuses and only return the `id`
     * const serviceStatusWithIdOnly = await prisma.serviceStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceStatus.
     * @param {ServiceStatusDeleteArgs} args - Arguments to delete one ServiceStatus.
     * @example
     * // Delete one ServiceStatus
     * const ServiceStatus = await prisma.serviceStatus.delete({
     *   where: {
     *     // ... filter to delete one ServiceStatus
     *   }
     * })
     * 
     */
    delete<T extends ServiceStatusDeleteArgs>(args: SelectSubset<T, ServiceStatusDeleteArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceStatus.
     * @param {ServiceStatusUpdateArgs} args - Arguments to update one ServiceStatus.
     * @example
     * // Update one ServiceStatus
     * const serviceStatus = await prisma.serviceStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceStatusUpdateArgs>(args: SelectSubset<T, ServiceStatusUpdateArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceStatuses.
     * @param {ServiceStatusDeleteManyArgs} args - Arguments to filter ServiceStatuses to delete.
     * @example
     * // Delete a few ServiceStatuses
     * const { count } = await prisma.serviceStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceStatusDeleteManyArgs>(args?: SelectSubset<T, ServiceStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceStatuses
     * const serviceStatus = await prisma.serviceStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceStatusUpdateManyArgs>(args: SelectSubset<T, ServiceStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceStatuses and returns the data updated in the database.
     * @param {ServiceStatusUpdateManyAndReturnArgs} args - Arguments to update many ServiceStatuses.
     * @example
     * // Update many ServiceStatuses
     * const serviceStatus = await prisma.serviceStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceStatuses and only return the `id`
     * const serviceStatusWithIdOnly = await prisma.serviceStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceStatus.
     * @param {ServiceStatusUpsertArgs} args - Arguments to update or create a ServiceStatus.
     * @example
     * // Update or create a ServiceStatus
     * const serviceStatus = await prisma.serviceStatus.upsert({
     *   create: {
     *     // ... data to create a ServiceStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceStatus we want to update
     *   }
     * })
     */
    upsert<T extends ServiceStatusUpsertArgs>(args: SelectSubset<T, ServiceStatusUpsertArgs<ExtArgs>>): Prisma__ServiceStatusClient<$Result.GetResult<Prisma.$ServiceStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusCountArgs} args - Arguments to filter ServiceStatuses to count.
     * @example
     * // Count the number of ServiceStatuses
     * const count = await prisma.serviceStatus.count({
     *   where: {
     *     // ... the filter for the ServiceStatuses we want to count
     *   }
     * })
    **/
    count<T extends ServiceStatusCountArgs>(
      args?: Subset<T, ServiceStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceStatusAggregateArgs>(args: Subset<T, ServiceStatusAggregateArgs>): Prisma.PrismaPromise<GetServiceStatusAggregateType<T>>

    /**
     * Group by ServiceStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceStatusGroupByArgs['orderBy'] }
        : { orderBy?: ServiceStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceStatus model
   */
  readonly fields: ServiceStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceStatus model
   */
  interface ServiceStatusFieldRefs {
    readonly id: FieldRef<"ServiceStatus", 'Int'>
    readonly serviceName: FieldRef<"ServiceStatus", 'String'>
    readonly status: FieldRef<"ServiceStatus", 'String'>
    readonly lastCheck: FieldRef<"ServiceStatus", 'DateTime'>
    readonly responseTime: FieldRef<"ServiceStatus", 'Float'>
    readonly errorMessage: FieldRef<"ServiceStatus", 'String'>
    readonly uptime: FieldRef<"ServiceStatus", 'Float'>
    readonly checkType: FieldRef<"ServiceStatus", 'String'>
    readonly metadata: FieldRef<"ServiceStatus", 'String'>
    readonly createdAt: FieldRef<"ServiceStatus", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceStatus findUnique
   */
  export type ServiceStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * Filter, which ServiceStatus to fetch.
     */
    where: ServiceStatusWhereUniqueInput
  }

  /**
   * ServiceStatus findUniqueOrThrow
   */
  export type ServiceStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * Filter, which ServiceStatus to fetch.
     */
    where: ServiceStatusWhereUniqueInput
  }

  /**
   * ServiceStatus findFirst
   */
  export type ServiceStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * Filter, which ServiceStatus to fetch.
     */
    where?: ServiceStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStatuses to fetch.
     */
    orderBy?: ServiceStatusOrderByWithRelationInput | ServiceStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceStatuses.
     */
    cursor?: ServiceStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceStatuses.
     */
    distinct?: ServiceStatusScalarFieldEnum | ServiceStatusScalarFieldEnum[]
  }

  /**
   * ServiceStatus findFirstOrThrow
   */
  export type ServiceStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * Filter, which ServiceStatus to fetch.
     */
    where?: ServiceStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStatuses to fetch.
     */
    orderBy?: ServiceStatusOrderByWithRelationInput | ServiceStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceStatuses.
     */
    cursor?: ServiceStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceStatuses.
     */
    distinct?: ServiceStatusScalarFieldEnum | ServiceStatusScalarFieldEnum[]
  }

  /**
   * ServiceStatus findMany
   */
  export type ServiceStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * Filter, which ServiceStatuses to fetch.
     */
    where?: ServiceStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceStatuses to fetch.
     */
    orderBy?: ServiceStatusOrderByWithRelationInput | ServiceStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceStatuses.
     */
    cursor?: ServiceStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceStatuses.
     */
    skip?: number
    distinct?: ServiceStatusScalarFieldEnum | ServiceStatusScalarFieldEnum[]
  }

  /**
   * ServiceStatus create
   */
  export type ServiceStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * The data needed to create a ServiceStatus.
     */
    data: XOR<ServiceStatusCreateInput, ServiceStatusUncheckedCreateInput>
  }

  /**
   * ServiceStatus createMany
   */
  export type ServiceStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceStatuses.
     */
    data: ServiceStatusCreateManyInput | ServiceStatusCreateManyInput[]
  }

  /**
   * ServiceStatus createManyAndReturn
   */
  export type ServiceStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceStatuses.
     */
    data: ServiceStatusCreateManyInput | ServiceStatusCreateManyInput[]
  }

  /**
   * ServiceStatus update
   */
  export type ServiceStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * The data needed to update a ServiceStatus.
     */
    data: XOR<ServiceStatusUpdateInput, ServiceStatusUncheckedUpdateInput>
    /**
     * Choose, which ServiceStatus to update.
     */
    where: ServiceStatusWhereUniqueInput
  }

  /**
   * ServiceStatus updateMany
   */
  export type ServiceStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceStatuses.
     */
    data: XOR<ServiceStatusUpdateManyMutationInput, ServiceStatusUncheckedUpdateManyInput>
    /**
     * Filter which ServiceStatuses to update
     */
    where?: ServiceStatusWhereInput
    /**
     * Limit how many ServiceStatuses to update.
     */
    limit?: number
  }

  /**
   * ServiceStatus updateManyAndReturn
   */
  export type ServiceStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * The data used to update ServiceStatuses.
     */
    data: XOR<ServiceStatusUpdateManyMutationInput, ServiceStatusUncheckedUpdateManyInput>
    /**
     * Filter which ServiceStatuses to update
     */
    where?: ServiceStatusWhereInput
    /**
     * Limit how many ServiceStatuses to update.
     */
    limit?: number
  }

  /**
   * ServiceStatus upsert
   */
  export type ServiceStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * The filter to search for the ServiceStatus to update in case it exists.
     */
    where: ServiceStatusWhereUniqueInput
    /**
     * In case the ServiceStatus found by the `where` argument doesn't exist, create a new ServiceStatus with this data.
     */
    create: XOR<ServiceStatusCreateInput, ServiceStatusUncheckedCreateInput>
    /**
     * In case the ServiceStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceStatusUpdateInput, ServiceStatusUncheckedUpdateInput>
  }

  /**
   * ServiceStatus delete
   */
  export type ServiceStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
    /**
     * Filter which ServiceStatus to delete.
     */
    where: ServiceStatusWhereUniqueInput
  }

  /**
   * ServiceStatus deleteMany
   */
  export type ServiceStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceStatuses to delete
     */
    where?: ServiceStatusWhereInput
    /**
     * Limit how many ServiceStatuses to delete.
     */
    limit?: number
  }

  /**
   * ServiceStatus without action
   */
  export type ServiceStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceStatus
     */
    select?: ServiceStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceStatus
     */
    omit?: ServiceStatusOmit<ExtArgs> | null
  }


  /**
   * Model SystemAlerts
   */

  export type AggregateSystemAlerts = {
    _count: SystemAlertsCountAggregateOutputType | null
    _avg: SystemAlertsAvgAggregateOutputType | null
    _sum: SystemAlertsSumAggregateOutputType | null
    _min: SystemAlertsMinAggregateOutputType | null
    _max: SystemAlertsMaxAggregateOutputType | null
  }

  export type SystemAlertsAvgAggregateOutputType = {
    id: number | null
    threshold: number | null
    currentValue: number | null
  }

  export type SystemAlertsSumAggregateOutputType = {
    id: number | null
    threshold: number | null
    currentValue: number | null
  }

  export type SystemAlertsMinAggregateOutputType = {
    id: number | null
    alertType: string | null
    severity: string | null
    title: string | null
    description: string | null
    service: string | null
    threshold: number | null
    currentValue: number | null
    resolved: boolean | null
    resolvedAt: Date | null
    resolvedBy: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemAlertsMaxAggregateOutputType = {
    id: number | null
    alertType: string | null
    severity: string | null
    title: string | null
    description: string | null
    service: string | null
    threshold: number | null
    currentValue: number | null
    resolved: boolean | null
    resolvedAt: Date | null
    resolvedBy: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemAlertsCountAggregateOutputType = {
    id: number
    alertType: number
    severity: number
    title: number
    description: number
    service: number
    threshold: number
    currentValue: number
    resolved: number
    resolvedAt: number
    resolvedBy: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemAlertsAvgAggregateInputType = {
    id?: true
    threshold?: true
    currentValue?: true
  }

  export type SystemAlertsSumAggregateInputType = {
    id?: true
    threshold?: true
    currentValue?: true
  }

  export type SystemAlertsMinAggregateInputType = {
    id?: true
    alertType?: true
    severity?: true
    title?: true
    description?: true
    service?: true
    threshold?: true
    currentValue?: true
    resolved?: true
    resolvedAt?: true
    resolvedBy?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemAlertsMaxAggregateInputType = {
    id?: true
    alertType?: true
    severity?: true
    title?: true
    description?: true
    service?: true
    threshold?: true
    currentValue?: true
    resolved?: true
    resolvedAt?: true
    resolvedBy?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemAlertsCountAggregateInputType = {
    id?: true
    alertType?: true
    severity?: true
    title?: true
    description?: true
    service?: true
    threshold?: true
    currentValue?: true
    resolved?: true
    resolvedAt?: true
    resolvedBy?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemAlertsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemAlerts to aggregate.
     */
    where?: SystemAlertsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemAlerts to fetch.
     */
    orderBy?: SystemAlertsOrderByWithRelationInput | SystemAlertsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemAlertsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemAlerts
    **/
    _count?: true | SystemAlertsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemAlertsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemAlertsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemAlertsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemAlertsMaxAggregateInputType
  }

  export type GetSystemAlertsAggregateType<T extends SystemAlertsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemAlerts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemAlerts[P]>
      : GetScalarType<T[P], AggregateSystemAlerts[P]>
  }




  export type SystemAlertsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemAlertsWhereInput
    orderBy?: SystemAlertsOrderByWithAggregationInput | SystemAlertsOrderByWithAggregationInput[]
    by: SystemAlertsScalarFieldEnum[] | SystemAlertsScalarFieldEnum
    having?: SystemAlertsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemAlertsCountAggregateInputType | true
    _avg?: SystemAlertsAvgAggregateInputType
    _sum?: SystemAlertsSumAggregateInputType
    _min?: SystemAlertsMinAggregateInputType
    _max?: SystemAlertsMaxAggregateInputType
  }

  export type SystemAlertsGroupByOutputType = {
    id: number
    alertType: string
    severity: string
    title: string
    description: string
    service: string | null
    threshold: number | null
    currentValue: number | null
    resolved: boolean
    resolvedAt: Date | null
    resolvedBy: string | null
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: SystemAlertsCountAggregateOutputType | null
    _avg: SystemAlertsAvgAggregateOutputType | null
    _sum: SystemAlertsSumAggregateOutputType | null
    _min: SystemAlertsMinAggregateOutputType | null
    _max: SystemAlertsMaxAggregateOutputType | null
  }

  type GetSystemAlertsGroupByPayload<T extends SystemAlertsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemAlertsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemAlertsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemAlertsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemAlertsGroupByOutputType[P]>
        }
      >
    >


  export type SystemAlertsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alertType?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    service?: boolean
    threshold?: boolean
    currentValue?: boolean
    resolved?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemAlerts"]>

  export type SystemAlertsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alertType?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    service?: boolean
    threshold?: boolean
    currentValue?: boolean
    resolved?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemAlerts"]>

  export type SystemAlertsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alertType?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    service?: boolean
    threshold?: boolean
    currentValue?: boolean
    resolved?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemAlerts"]>

  export type SystemAlertsSelectScalar = {
    id?: boolean
    alertType?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    service?: boolean
    threshold?: boolean
    currentValue?: boolean
    resolved?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemAlertsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "alertType" | "severity" | "title" | "description" | "service" | "threshold" | "currentValue" | "resolved" | "resolvedAt" | "resolvedBy" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["systemAlerts"]>

  export type $SystemAlertsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemAlerts"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      alertType: string
      severity: string
      title: string
      description: string
      service: string | null
      threshold: number | null
      currentValue: number | null
      resolved: boolean
      resolvedAt: Date | null
      resolvedBy: string | null
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemAlerts"]>
    composites: {}
  }

  type SystemAlertsGetPayload<S extends boolean | null | undefined | SystemAlertsDefaultArgs> = $Result.GetResult<Prisma.$SystemAlertsPayload, S>

  type SystemAlertsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemAlertsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemAlertsCountAggregateInputType | true
    }

  export interface SystemAlertsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemAlerts'], meta: { name: 'SystemAlerts' } }
    /**
     * Find zero or one SystemAlerts that matches the filter.
     * @param {SystemAlertsFindUniqueArgs} args - Arguments to find a SystemAlerts
     * @example
     * // Get one SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemAlertsFindUniqueArgs>(args: SelectSubset<T, SystemAlertsFindUniqueArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemAlerts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemAlertsFindUniqueOrThrowArgs} args - Arguments to find a SystemAlerts
     * @example
     * // Get one SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemAlertsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemAlertsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemAlerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsFindFirstArgs} args - Arguments to find a SystemAlerts
     * @example
     * // Get one SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemAlertsFindFirstArgs>(args?: SelectSubset<T, SystemAlertsFindFirstArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemAlerts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsFindFirstOrThrowArgs} args - Arguments to find a SystemAlerts
     * @example
     * // Get one SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemAlertsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemAlertsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemAlerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.findMany()
     * 
     * // Get first 10 SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemAlertsWithIdOnly = await prisma.systemAlerts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemAlertsFindManyArgs>(args?: SelectSubset<T, SystemAlertsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemAlerts.
     * @param {SystemAlertsCreateArgs} args - Arguments to create a SystemAlerts.
     * @example
     * // Create one SystemAlerts
     * const SystemAlerts = await prisma.systemAlerts.create({
     *   data: {
     *     // ... data to create a SystemAlerts
     *   }
     * })
     * 
     */
    create<T extends SystemAlertsCreateArgs>(args: SelectSubset<T, SystemAlertsCreateArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemAlerts.
     * @param {SystemAlertsCreateManyArgs} args - Arguments to create many SystemAlerts.
     * @example
     * // Create many SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemAlertsCreateManyArgs>(args?: SelectSubset<T, SystemAlertsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemAlerts and returns the data saved in the database.
     * @param {SystemAlertsCreateManyAndReturnArgs} args - Arguments to create many SystemAlerts.
     * @example
     * // Create many SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemAlerts and only return the `id`
     * const systemAlertsWithIdOnly = await prisma.systemAlerts.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemAlertsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemAlertsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemAlerts.
     * @param {SystemAlertsDeleteArgs} args - Arguments to delete one SystemAlerts.
     * @example
     * // Delete one SystemAlerts
     * const SystemAlerts = await prisma.systemAlerts.delete({
     *   where: {
     *     // ... filter to delete one SystemAlerts
     *   }
     * })
     * 
     */
    delete<T extends SystemAlertsDeleteArgs>(args: SelectSubset<T, SystemAlertsDeleteArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemAlerts.
     * @param {SystemAlertsUpdateArgs} args - Arguments to update one SystemAlerts.
     * @example
     * // Update one SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemAlertsUpdateArgs>(args: SelectSubset<T, SystemAlertsUpdateArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemAlerts.
     * @param {SystemAlertsDeleteManyArgs} args - Arguments to filter SystemAlerts to delete.
     * @example
     * // Delete a few SystemAlerts
     * const { count } = await prisma.systemAlerts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemAlertsDeleteManyArgs>(args?: SelectSubset<T, SystemAlertsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemAlertsUpdateManyArgs>(args: SelectSubset<T, SystemAlertsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemAlerts and returns the data updated in the database.
     * @param {SystemAlertsUpdateManyAndReturnArgs} args - Arguments to update many SystemAlerts.
     * @example
     * // Update many SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemAlerts and only return the `id`
     * const systemAlertsWithIdOnly = await prisma.systemAlerts.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemAlertsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemAlertsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemAlerts.
     * @param {SystemAlertsUpsertArgs} args - Arguments to update or create a SystemAlerts.
     * @example
     * // Update or create a SystemAlerts
     * const systemAlerts = await prisma.systemAlerts.upsert({
     *   create: {
     *     // ... data to create a SystemAlerts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemAlerts we want to update
     *   }
     * })
     */
    upsert<T extends SystemAlertsUpsertArgs>(args: SelectSubset<T, SystemAlertsUpsertArgs<ExtArgs>>): Prisma__SystemAlertsClient<$Result.GetResult<Prisma.$SystemAlertsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsCountArgs} args - Arguments to filter SystemAlerts to count.
     * @example
     * // Count the number of SystemAlerts
     * const count = await prisma.systemAlerts.count({
     *   where: {
     *     // ... the filter for the SystemAlerts we want to count
     *   }
     * })
    **/
    count<T extends SystemAlertsCountArgs>(
      args?: Subset<T, SystemAlertsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemAlertsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemAlertsAggregateArgs>(args: Subset<T, SystemAlertsAggregateArgs>): Prisma.PrismaPromise<GetSystemAlertsAggregateType<T>>

    /**
     * Group by SystemAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAlertsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemAlertsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemAlertsGroupByArgs['orderBy'] }
        : { orderBy?: SystemAlertsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemAlertsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemAlertsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemAlerts model
   */
  readonly fields: SystemAlertsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemAlerts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemAlertsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemAlerts model
   */
  interface SystemAlertsFieldRefs {
    readonly id: FieldRef<"SystemAlerts", 'Int'>
    readonly alertType: FieldRef<"SystemAlerts", 'String'>
    readonly severity: FieldRef<"SystemAlerts", 'String'>
    readonly title: FieldRef<"SystemAlerts", 'String'>
    readonly description: FieldRef<"SystemAlerts", 'String'>
    readonly service: FieldRef<"SystemAlerts", 'String'>
    readonly threshold: FieldRef<"SystemAlerts", 'Float'>
    readonly currentValue: FieldRef<"SystemAlerts", 'Float'>
    readonly resolved: FieldRef<"SystemAlerts", 'Boolean'>
    readonly resolvedAt: FieldRef<"SystemAlerts", 'DateTime'>
    readonly resolvedBy: FieldRef<"SystemAlerts", 'String'>
    readonly metadata: FieldRef<"SystemAlerts", 'String'>
    readonly createdAt: FieldRef<"SystemAlerts", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemAlerts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemAlerts findUnique
   */
  export type SystemAlertsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * Filter, which SystemAlerts to fetch.
     */
    where: SystemAlertsWhereUniqueInput
  }

  /**
   * SystemAlerts findUniqueOrThrow
   */
  export type SystemAlertsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * Filter, which SystemAlerts to fetch.
     */
    where: SystemAlertsWhereUniqueInput
  }

  /**
   * SystemAlerts findFirst
   */
  export type SystemAlertsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * Filter, which SystemAlerts to fetch.
     */
    where?: SystemAlertsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemAlerts to fetch.
     */
    orderBy?: SystemAlertsOrderByWithRelationInput | SystemAlertsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemAlerts.
     */
    cursor?: SystemAlertsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemAlerts.
     */
    distinct?: SystemAlertsScalarFieldEnum | SystemAlertsScalarFieldEnum[]
  }

  /**
   * SystemAlerts findFirstOrThrow
   */
  export type SystemAlertsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * Filter, which SystemAlerts to fetch.
     */
    where?: SystemAlertsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemAlerts to fetch.
     */
    orderBy?: SystemAlertsOrderByWithRelationInput | SystemAlertsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemAlerts.
     */
    cursor?: SystemAlertsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemAlerts.
     */
    distinct?: SystemAlertsScalarFieldEnum | SystemAlertsScalarFieldEnum[]
  }

  /**
   * SystemAlerts findMany
   */
  export type SystemAlertsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * Filter, which SystemAlerts to fetch.
     */
    where?: SystemAlertsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemAlerts to fetch.
     */
    orderBy?: SystemAlertsOrderByWithRelationInput | SystemAlertsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemAlerts.
     */
    cursor?: SystemAlertsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemAlerts.
     */
    skip?: number
    distinct?: SystemAlertsScalarFieldEnum | SystemAlertsScalarFieldEnum[]
  }

  /**
   * SystemAlerts create
   */
  export type SystemAlertsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemAlerts.
     */
    data: XOR<SystemAlertsCreateInput, SystemAlertsUncheckedCreateInput>
  }

  /**
   * SystemAlerts createMany
   */
  export type SystemAlertsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemAlerts.
     */
    data: SystemAlertsCreateManyInput | SystemAlertsCreateManyInput[]
  }

  /**
   * SystemAlerts createManyAndReturn
   */
  export type SystemAlertsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemAlerts.
     */
    data: SystemAlertsCreateManyInput | SystemAlertsCreateManyInput[]
  }

  /**
   * SystemAlerts update
   */
  export type SystemAlertsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemAlerts.
     */
    data: XOR<SystemAlertsUpdateInput, SystemAlertsUncheckedUpdateInput>
    /**
     * Choose, which SystemAlerts to update.
     */
    where: SystemAlertsWhereUniqueInput
  }

  /**
   * SystemAlerts updateMany
   */
  export type SystemAlertsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemAlerts.
     */
    data: XOR<SystemAlertsUpdateManyMutationInput, SystemAlertsUncheckedUpdateManyInput>
    /**
     * Filter which SystemAlerts to update
     */
    where?: SystemAlertsWhereInput
    /**
     * Limit how many SystemAlerts to update.
     */
    limit?: number
  }

  /**
   * SystemAlerts updateManyAndReturn
   */
  export type SystemAlertsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * The data used to update SystemAlerts.
     */
    data: XOR<SystemAlertsUpdateManyMutationInput, SystemAlertsUncheckedUpdateManyInput>
    /**
     * Filter which SystemAlerts to update
     */
    where?: SystemAlertsWhereInput
    /**
     * Limit how many SystemAlerts to update.
     */
    limit?: number
  }

  /**
   * SystemAlerts upsert
   */
  export type SystemAlertsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemAlerts to update in case it exists.
     */
    where: SystemAlertsWhereUniqueInput
    /**
     * In case the SystemAlerts found by the `where` argument doesn't exist, create a new SystemAlerts with this data.
     */
    create: XOR<SystemAlertsCreateInput, SystemAlertsUncheckedCreateInput>
    /**
     * In case the SystemAlerts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemAlertsUpdateInput, SystemAlertsUncheckedUpdateInput>
  }

  /**
   * SystemAlerts delete
   */
  export type SystemAlertsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
    /**
     * Filter which SystemAlerts to delete.
     */
    where: SystemAlertsWhereUniqueInput
  }

  /**
   * SystemAlerts deleteMany
   */
  export type SystemAlertsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemAlerts to delete
     */
    where?: SystemAlertsWhereInput
    /**
     * Limit how many SystemAlerts to delete.
     */
    limit?: number
  }

  /**
   * SystemAlerts without action
   */
  export type SystemAlertsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemAlerts
     */
    select?: SystemAlertsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemAlerts
     */
    omit?: SystemAlertsOmit<ExtArgs> | null
  }


  /**
   * Model DetailedSystemMetrics
   */

  export type AggregateDetailedSystemMetrics = {
    _count: DetailedSystemMetricsCountAggregateOutputType | null
    _avg: DetailedSystemMetricsAvgAggregateOutputType | null
    _sum: DetailedSystemMetricsSumAggregateOutputType | null
    _min: DetailedSystemMetricsMinAggregateOutputType | null
    _max: DetailedSystemMetricsMaxAggregateOutputType | null
  }

  export type DetailedSystemMetricsAvgAggregateOutputType = {
    id: number | null
    metricValue: number | null
  }

  export type DetailedSystemMetricsSumAggregateOutputType = {
    id: number | null
    metricValue: number | null
  }

  export type DetailedSystemMetricsMinAggregateOutputType = {
    id: number | null
    category: string | null
    metricName: string | null
    metricValue: number | null
    metricUnit: string | null
    instance: string | null
    tags: string | null
    aggregationType: string | null
    recordedAt: Date | null
  }

  export type DetailedSystemMetricsMaxAggregateOutputType = {
    id: number | null
    category: string | null
    metricName: string | null
    metricValue: number | null
    metricUnit: string | null
    instance: string | null
    tags: string | null
    aggregationType: string | null
    recordedAt: Date | null
  }

  export type DetailedSystemMetricsCountAggregateOutputType = {
    id: number
    category: number
    metricName: number
    metricValue: number
    metricUnit: number
    instance: number
    tags: number
    aggregationType: number
    recordedAt: number
    _all: number
  }


  export type DetailedSystemMetricsAvgAggregateInputType = {
    id?: true
    metricValue?: true
  }

  export type DetailedSystemMetricsSumAggregateInputType = {
    id?: true
    metricValue?: true
  }

  export type DetailedSystemMetricsMinAggregateInputType = {
    id?: true
    category?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    instance?: true
    tags?: true
    aggregationType?: true
    recordedAt?: true
  }

  export type DetailedSystemMetricsMaxAggregateInputType = {
    id?: true
    category?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    instance?: true
    tags?: true
    aggregationType?: true
    recordedAt?: true
  }

  export type DetailedSystemMetricsCountAggregateInputType = {
    id?: true
    category?: true
    metricName?: true
    metricValue?: true
    metricUnit?: true
    instance?: true
    tags?: true
    aggregationType?: true
    recordedAt?: true
    _all?: true
  }

  export type DetailedSystemMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetailedSystemMetrics to aggregate.
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailedSystemMetrics to fetch.
     */
    orderBy?: DetailedSystemMetricsOrderByWithRelationInput | DetailedSystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DetailedSystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailedSystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailedSystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DetailedSystemMetrics
    **/
    _count?: true | DetailedSystemMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetailedSystemMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetailedSystemMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetailedSystemMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetailedSystemMetricsMaxAggregateInputType
  }

  export type GetDetailedSystemMetricsAggregateType<T extends DetailedSystemMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateDetailedSystemMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetailedSystemMetrics[P]>
      : GetScalarType<T[P], AggregateDetailedSystemMetrics[P]>
  }




  export type DetailedSystemMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailedSystemMetricsWhereInput
    orderBy?: DetailedSystemMetricsOrderByWithAggregationInput | DetailedSystemMetricsOrderByWithAggregationInput[]
    by: DetailedSystemMetricsScalarFieldEnum[] | DetailedSystemMetricsScalarFieldEnum
    having?: DetailedSystemMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetailedSystemMetricsCountAggregateInputType | true
    _avg?: DetailedSystemMetricsAvgAggregateInputType
    _sum?: DetailedSystemMetricsSumAggregateInputType
    _min?: DetailedSystemMetricsMinAggregateInputType
    _max?: DetailedSystemMetricsMaxAggregateInputType
  }

  export type DetailedSystemMetricsGroupByOutputType = {
    id: number
    category: string
    metricName: string
    metricValue: number
    metricUnit: string | null
    instance: string | null
    tags: string | null
    aggregationType: string | null
    recordedAt: Date
    _count: DetailedSystemMetricsCountAggregateOutputType | null
    _avg: DetailedSystemMetricsAvgAggregateOutputType | null
    _sum: DetailedSystemMetricsSumAggregateOutputType | null
    _min: DetailedSystemMetricsMinAggregateOutputType | null
    _max: DetailedSystemMetricsMaxAggregateOutputType | null
  }

  type GetDetailedSystemMetricsGroupByPayload<T extends DetailedSystemMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DetailedSystemMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetailedSystemMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetailedSystemMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], DetailedSystemMetricsGroupByOutputType[P]>
        }
      >
    >


  export type DetailedSystemMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    instance?: boolean
    tags?: boolean
    aggregationType?: boolean
    recordedAt?: boolean
  }, ExtArgs["result"]["detailedSystemMetrics"]>

  export type DetailedSystemMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    instance?: boolean
    tags?: boolean
    aggregationType?: boolean
    recordedAt?: boolean
  }, ExtArgs["result"]["detailedSystemMetrics"]>

  export type DetailedSystemMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    instance?: boolean
    tags?: boolean
    aggregationType?: boolean
    recordedAt?: boolean
  }, ExtArgs["result"]["detailedSystemMetrics"]>

  export type DetailedSystemMetricsSelectScalar = {
    id?: boolean
    category?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricUnit?: boolean
    instance?: boolean
    tags?: boolean
    aggregationType?: boolean
    recordedAt?: boolean
  }

  export type DetailedSystemMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "category" | "metricName" | "metricValue" | "metricUnit" | "instance" | "tags" | "aggregationType" | "recordedAt", ExtArgs["result"]["detailedSystemMetrics"]>

  export type $DetailedSystemMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DetailedSystemMetrics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category: string
      metricName: string
      metricValue: number
      metricUnit: string | null
      instance: string | null
      tags: string | null
      aggregationType: string | null
      recordedAt: Date
    }, ExtArgs["result"]["detailedSystemMetrics"]>
    composites: {}
  }

  type DetailedSystemMetricsGetPayload<S extends boolean | null | undefined | DetailedSystemMetricsDefaultArgs> = $Result.GetResult<Prisma.$DetailedSystemMetricsPayload, S>

  type DetailedSystemMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DetailedSystemMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DetailedSystemMetricsCountAggregateInputType | true
    }

  export interface DetailedSystemMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DetailedSystemMetrics'], meta: { name: 'DetailedSystemMetrics' } }
    /**
     * Find zero or one DetailedSystemMetrics that matches the filter.
     * @param {DetailedSystemMetricsFindUniqueArgs} args - Arguments to find a DetailedSystemMetrics
     * @example
     * // Get one DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DetailedSystemMetricsFindUniqueArgs>(args: SelectSubset<T, DetailedSystemMetricsFindUniqueArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DetailedSystemMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DetailedSystemMetricsFindUniqueOrThrowArgs} args - Arguments to find a DetailedSystemMetrics
     * @example
     * // Get one DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DetailedSystemMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, DetailedSystemMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DetailedSystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsFindFirstArgs} args - Arguments to find a DetailedSystemMetrics
     * @example
     * // Get one DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DetailedSystemMetricsFindFirstArgs>(args?: SelectSubset<T, DetailedSystemMetricsFindFirstArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DetailedSystemMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsFindFirstOrThrowArgs} args - Arguments to find a DetailedSystemMetrics
     * @example
     * // Get one DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DetailedSystemMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, DetailedSystemMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DetailedSystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findMany()
     * 
     * // Get first 10 DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detailedSystemMetricsWithIdOnly = await prisma.detailedSystemMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DetailedSystemMetricsFindManyArgs>(args?: SelectSubset<T, DetailedSystemMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DetailedSystemMetrics.
     * @param {DetailedSystemMetricsCreateArgs} args - Arguments to create a DetailedSystemMetrics.
     * @example
     * // Create one DetailedSystemMetrics
     * const DetailedSystemMetrics = await prisma.detailedSystemMetrics.create({
     *   data: {
     *     // ... data to create a DetailedSystemMetrics
     *   }
     * })
     * 
     */
    create<T extends DetailedSystemMetricsCreateArgs>(args: SelectSubset<T, DetailedSystemMetricsCreateArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DetailedSystemMetrics.
     * @param {DetailedSystemMetricsCreateManyArgs} args - Arguments to create many DetailedSystemMetrics.
     * @example
     * // Create many DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DetailedSystemMetricsCreateManyArgs>(args?: SelectSubset<T, DetailedSystemMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DetailedSystemMetrics and returns the data saved in the database.
     * @param {DetailedSystemMetricsCreateManyAndReturnArgs} args - Arguments to create many DetailedSystemMetrics.
     * @example
     * // Create many DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DetailedSystemMetrics and only return the `id`
     * const detailedSystemMetricsWithIdOnly = await prisma.detailedSystemMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DetailedSystemMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, DetailedSystemMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DetailedSystemMetrics.
     * @param {DetailedSystemMetricsDeleteArgs} args - Arguments to delete one DetailedSystemMetrics.
     * @example
     * // Delete one DetailedSystemMetrics
     * const DetailedSystemMetrics = await prisma.detailedSystemMetrics.delete({
     *   where: {
     *     // ... filter to delete one DetailedSystemMetrics
     *   }
     * })
     * 
     */
    delete<T extends DetailedSystemMetricsDeleteArgs>(args: SelectSubset<T, DetailedSystemMetricsDeleteArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DetailedSystemMetrics.
     * @param {DetailedSystemMetricsUpdateArgs} args - Arguments to update one DetailedSystemMetrics.
     * @example
     * // Update one DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DetailedSystemMetricsUpdateArgs>(args: SelectSubset<T, DetailedSystemMetricsUpdateArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DetailedSystemMetrics.
     * @param {DetailedSystemMetricsDeleteManyArgs} args - Arguments to filter DetailedSystemMetrics to delete.
     * @example
     * // Delete a few DetailedSystemMetrics
     * const { count } = await prisma.detailedSystemMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DetailedSystemMetricsDeleteManyArgs>(args?: SelectSubset<T, DetailedSystemMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetailedSystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DetailedSystemMetricsUpdateManyArgs>(args: SelectSubset<T, DetailedSystemMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetailedSystemMetrics and returns the data updated in the database.
     * @param {DetailedSystemMetricsUpdateManyAndReturnArgs} args - Arguments to update many DetailedSystemMetrics.
     * @example
     * // Update many DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DetailedSystemMetrics and only return the `id`
     * const detailedSystemMetricsWithIdOnly = await prisma.detailedSystemMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DetailedSystemMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, DetailedSystemMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DetailedSystemMetrics.
     * @param {DetailedSystemMetricsUpsertArgs} args - Arguments to update or create a DetailedSystemMetrics.
     * @example
     * // Update or create a DetailedSystemMetrics
     * const detailedSystemMetrics = await prisma.detailedSystemMetrics.upsert({
     *   create: {
     *     // ... data to create a DetailedSystemMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DetailedSystemMetrics we want to update
     *   }
     * })
     */
    upsert<T extends DetailedSystemMetricsUpsertArgs>(args: SelectSubset<T, DetailedSystemMetricsUpsertArgs<ExtArgs>>): Prisma__DetailedSystemMetricsClient<$Result.GetResult<Prisma.$DetailedSystemMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DetailedSystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsCountArgs} args - Arguments to filter DetailedSystemMetrics to count.
     * @example
     * // Count the number of DetailedSystemMetrics
     * const count = await prisma.detailedSystemMetrics.count({
     *   where: {
     *     // ... the filter for the DetailedSystemMetrics we want to count
     *   }
     * })
    **/
    count<T extends DetailedSystemMetricsCountArgs>(
      args?: Subset<T, DetailedSystemMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetailedSystemMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DetailedSystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetailedSystemMetricsAggregateArgs>(args: Subset<T, DetailedSystemMetricsAggregateArgs>): Prisma.PrismaPromise<GetDetailedSystemMetricsAggregateType<T>>

    /**
     * Group by DetailedSystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailedSystemMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetailedSystemMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetailedSystemMetricsGroupByArgs['orderBy'] }
        : { orderBy?: DetailedSystemMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetailedSystemMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetailedSystemMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DetailedSystemMetrics model
   */
  readonly fields: DetailedSystemMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DetailedSystemMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DetailedSystemMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DetailedSystemMetrics model
   */
  interface DetailedSystemMetricsFieldRefs {
    readonly id: FieldRef<"DetailedSystemMetrics", 'Int'>
    readonly category: FieldRef<"DetailedSystemMetrics", 'String'>
    readonly metricName: FieldRef<"DetailedSystemMetrics", 'String'>
    readonly metricValue: FieldRef<"DetailedSystemMetrics", 'Float'>
    readonly metricUnit: FieldRef<"DetailedSystemMetrics", 'String'>
    readonly instance: FieldRef<"DetailedSystemMetrics", 'String'>
    readonly tags: FieldRef<"DetailedSystemMetrics", 'String'>
    readonly aggregationType: FieldRef<"DetailedSystemMetrics", 'String'>
    readonly recordedAt: FieldRef<"DetailedSystemMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DetailedSystemMetrics findUnique
   */
  export type DetailedSystemMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which DetailedSystemMetrics to fetch.
     */
    where: DetailedSystemMetricsWhereUniqueInput
  }

  /**
   * DetailedSystemMetrics findUniqueOrThrow
   */
  export type DetailedSystemMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which DetailedSystemMetrics to fetch.
     */
    where: DetailedSystemMetricsWhereUniqueInput
  }

  /**
   * DetailedSystemMetrics findFirst
   */
  export type DetailedSystemMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which DetailedSystemMetrics to fetch.
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailedSystemMetrics to fetch.
     */
    orderBy?: DetailedSystemMetricsOrderByWithRelationInput | DetailedSystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailedSystemMetrics.
     */
    cursor?: DetailedSystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailedSystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailedSystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailedSystemMetrics.
     */
    distinct?: DetailedSystemMetricsScalarFieldEnum | DetailedSystemMetricsScalarFieldEnum[]
  }

  /**
   * DetailedSystemMetrics findFirstOrThrow
   */
  export type DetailedSystemMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which DetailedSystemMetrics to fetch.
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailedSystemMetrics to fetch.
     */
    orderBy?: DetailedSystemMetricsOrderByWithRelationInput | DetailedSystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailedSystemMetrics.
     */
    cursor?: DetailedSystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailedSystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailedSystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailedSystemMetrics.
     */
    distinct?: DetailedSystemMetricsScalarFieldEnum | DetailedSystemMetricsScalarFieldEnum[]
  }

  /**
   * DetailedSystemMetrics findMany
   */
  export type DetailedSystemMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * Filter, which DetailedSystemMetrics to fetch.
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailedSystemMetrics to fetch.
     */
    orderBy?: DetailedSystemMetricsOrderByWithRelationInput | DetailedSystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DetailedSystemMetrics.
     */
    cursor?: DetailedSystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailedSystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailedSystemMetrics.
     */
    skip?: number
    distinct?: DetailedSystemMetricsScalarFieldEnum | DetailedSystemMetricsScalarFieldEnum[]
  }

  /**
   * DetailedSystemMetrics create
   */
  export type DetailedSystemMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * The data needed to create a DetailedSystemMetrics.
     */
    data: XOR<DetailedSystemMetricsCreateInput, DetailedSystemMetricsUncheckedCreateInput>
  }

  /**
   * DetailedSystemMetrics createMany
   */
  export type DetailedSystemMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DetailedSystemMetrics.
     */
    data: DetailedSystemMetricsCreateManyInput | DetailedSystemMetricsCreateManyInput[]
  }

  /**
   * DetailedSystemMetrics createManyAndReturn
   */
  export type DetailedSystemMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many DetailedSystemMetrics.
     */
    data: DetailedSystemMetricsCreateManyInput | DetailedSystemMetricsCreateManyInput[]
  }

  /**
   * DetailedSystemMetrics update
   */
  export type DetailedSystemMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * The data needed to update a DetailedSystemMetrics.
     */
    data: XOR<DetailedSystemMetricsUpdateInput, DetailedSystemMetricsUncheckedUpdateInput>
    /**
     * Choose, which DetailedSystemMetrics to update.
     */
    where: DetailedSystemMetricsWhereUniqueInput
  }

  /**
   * DetailedSystemMetrics updateMany
   */
  export type DetailedSystemMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DetailedSystemMetrics.
     */
    data: XOR<DetailedSystemMetricsUpdateManyMutationInput, DetailedSystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which DetailedSystemMetrics to update
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * Limit how many DetailedSystemMetrics to update.
     */
    limit?: number
  }

  /**
   * DetailedSystemMetrics updateManyAndReturn
   */
  export type DetailedSystemMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * The data used to update DetailedSystemMetrics.
     */
    data: XOR<DetailedSystemMetricsUpdateManyMutationInput, DetailedSystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which DetailedSystemMetrics to update
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * Limit how many DetailedSystemMetrics to update.
     */
    limit?: number
  }

  /**
   * DetailedSystemMetrics upsert
   */
  export type DetailedSystemMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * The filter to search for the DetailedSystemMetrics to update in case it exists.
     */
    where: DetailedSystemMetricsWhereUniqueInput
    /**
     * In case the DetailedSystemMetrics found by the `where` argument doesn't exist, create a new DetailedSystemMetrics with this data.
     */
    create: XOR<DetailedSystemMetricsCreateInput, DetailedSystemMetricsUncheckedCreateInput>
    /**
     * In case the DetailedSystemMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DetailedSystemMetricsUpdateInput, DetailedSystemMetricsUncheckedUpdateInput>
  }

  /**
   * DetailedSystemMetrics delete
   */
  export type DetailedSystemMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
    /**
     * Filter which DetailedSystemMetrics to delete.
     */
    where: DetailedSystemMetricsWhereUniqueInput
  }

  /**
   * DetailedSystemMetrics deleteMany
   */
  export type DetailedSystemMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetailedSystemMetrics to delete
     */
    where?: DetailedSystemMetricsWhereInput
    /**
     * Limit how many DetailedSystemMetrics to delete.
     */
    limit?: number
  }

  /**
   * DetailedSystemMetrics without action
   */
  export type DetailedSystemMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailedSystemMetrics
     */
    select?: DetailedSystemMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetailedSystemMetrics
     */
    omit?: DetailedSystemMetricsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    tenantCode: 'tenantCode',
    nome: 'nome',
    email: 'email',
    cidade: 'cidade',
    estado: 'estado',
    cnpj: 'cnpj',
    plano: 'plano',
    status: 'status',
    populacao: 'populacao',
    endereco: 'endereco',
    responsavelNome: 'responsavelNome',
    responsavelEmail: 'responsavelEmail',
    responsavelTelefone: 'responsavelTelefone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hasAdmin: 'hasAdmin',
    adminConfirmed: 'adminConfirmed',
    adminFirstLogin: 'adminFirstLogin',
    limiteUsuarios: 'limiteUsuarios',
    valorMensal: 'valorMensal',
    usuariosAtivos: 'usuariosAtivos',
    protocolosMes: 'protocolosMes',
    configuracoes: 'configuracoes',
    metricas: 'metricas'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    nomeCompleto: 'nomeCompleto',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    status: 'status',
    avatarUrl: 'avatarUrl',
    ultimoLogin: 'ultimoLogin',
    failedLoginAttempts: 'failedLoginAttempts',
    lockedUntil: 'lockedUntil',
    emailVerified: 'emailVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tipoUsuario: 'tipoUsuario',
    telefone: 'telefone',
    ultimaAtividade: 'ultimaAtividade',
    ativo: 'ativo'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    resource: 'resource',
    action: 'action',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissionId: 'permissionId',
    grantedBy: 'grantedBy',
    createdAt: 'createdAt'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const ActivityLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tenantId: 'tenantId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type ActivityLogScalarFieldEnum = (typeof ActivityLogScalarFieldEnum)[keyof typeof ActivityLogScalarFieldEnum]


  export const SmtpUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    isVerified: 'isVerified',
    isActive: 'isActive',
    isAdmin: 'isAdmin',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SmtpUserScalarFieldEnum = (typeof SmtpUserScalarFieldEnum)[keyof typeof SmtpUserScalarFieldEnum]


  export const EmailDomainScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    smtpUserId: 'smtpUserId',
    domainName: 'domainName',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    verifiedAt: 'verifiedAt',
    verificationMethod: 'verificationMethod',
    dkimEnabled: 'dkimEnabled',
    spfEnabled: 'spfEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailDomainScalarFieldEnum = (typeof EmailDomainScalarFieldEnum)[keyof typeof EmailDomainScalarFieldEnum]


  export const DkimKeyScalarFieldEnum: {
    id: 'id',
    domainId: 'domainId',
    selector: 'selector',
    privateKey: 'privateKey',
    publicKey: 'publicKey',
    algorithm: 'algorithm',
    canonicalization: 'canonicalization',
    keySize: 'keySize',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DkimKeyScalarFieldEnum = (typeof DkimKeyScalarFieldEnum)[keyof typeof DkimKeyScalarFieldEnum]


  export const EmailScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    domainId: 'domainId',
    fromEmail: 'fromEmail',
    toEmail: 'toEmail',
    subject: 'subject',
    htmlContent: 'htmlContent',
    textContent: 'textContent',
    status: 'status',
    direction: 'direction',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    mxServer: 'mxServer',
    errorMessage: 'errorMessage',
    attempts: 'attempts',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailScalarFieldEnum = (typeof EmailScalarFieldEnum)[keyof typeof EmailScalarFieldEnum]


  export const SmtpConnectionScalarFieldEnum: {
    id: 'id',
    remoteAddress: 'remoteAddress',
    hostname: 'hostname',
    serverType: 'serverType',
    status: 'status',
    rejectReason: 'rejectReason',
    createdAt: 'createdAt'
  };

  export type SmtpConnectionScalarFieldEnum = (typeof SmtpConnectionScalarFieldEnum)[keyof typeof SmtpConnectionScalarFieldEnum]


  export const AuthAttemptScalarFieldEnum: {
    id: 'id',
    smtpUserId: 'smtpUserId',
    username: 'username',
    remoteAddress: 'remoteAddress',
    success: 'success',
    createdAt: 'createdAt'
  };

  export type AuthAttemptScalarFieldEnum = (typeof AuthAttemptScalarFieldEnum)[keyof typeof AuthAttemptScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    tokenHash: 'tokenHash',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    lastActivity: 'lastActivity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const UserTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTokenScalarFieldEnum = (typeof UserTokenScalarFieldEnum)[keyof typeof UserTokenScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    used: 'used',
    createdAt: 'createdAt'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const EmailVerificationTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    used: 'used',
    createdAt: 'createdAt'
  };

  export type EmailVerificationTokenScalarFieldEnum = (typeof EmailVerificationTokenScalarFieldEnum)[keyof typeof EmailVerificationTokenScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    numero: 'numero',
    periodo: 'periodo',
    valor: 'valor',
    descricao: 'descricao',
    status: 'status',
    dataCriacao: 'dataCriacao',
    dataVencimento: 'dataVencimento',
    dataPagamento: 'dataPagamento',
    metodoPagamento: 'metodoPagamento',
    desconto: 'desconto',
    taxaAdicional: 'taxaAdicional',
    plano: 'plano',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const InvoiceItemScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    descricao: 'descricao',
    quantidade: 'quantidade',
    valorUnitario: 'valorUnitario',
    valorTotal: 'valorTotal',
    tipo: 'tipo',
    createdAt: 'createdAt'
  };

  export type InvoiceItemScalarFieldEnum = (typeof InvoiceItemScalarFieldEnum)[keyof typeof InvoiceItemScalarFieldEnum]


  export const BillingMetricsScalarFieldEnum: {
    id: 'id',
    periodo: 'periodo',
    mrr: 'mrr',
    arr: 'arr',
    churnRate: 'churnRate',
    arpu: 'arpu',
    ltv: 'ltv',
    cac: 'cac',
    receitaMensal: 'receitaMensal',
    faturasPendentes: 'faturasPendentes',
    valorPendente: 'valorPendente',
    faturasVencidas: 'faturasVencidas',
    valorVencido: 'valorVencido',
    taxaCobranca: 'taxaCobranca',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BillingMetricsScalarFieldEnum = (typeof BillingMetricsScalarFieldEnum)[keyof typeof BillingMetricsScalarFieldEnum]


  export const AnalyticsUserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tenantId: 'tenantId',
    startedAt: 'startedAt',
    endedAt: 'endedAt',
    durationMinutes: 'durationMinutes',
    pagesVisited: 'pagesVisited',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AnalyticsUserSessionScalarFieldEnum = (typeof AnalyticsUserSessionScalarFieldEnum)[keyof typeof AnalyticsUserSessionScalarFieldEnum]


  export const FeatureUsageScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tenantId: 'tenantId',
    featureName: 'featureName',
    featureCategory: 'featureCategory',
    usageCount: 'usageCount',
    totalTimeMinutes: 'totalTimeMinutes',
    date: 'date',
    createdAt: 'createdAt'
  };

  export type FeatureUsageScalarFieldEnum = (typeof FeatureUsageScalarFieldEnum)[keyof typeof FeatureUsageScalarFieldEnum]


  export const SystemMetricsScalarFieldEnum: {
    id: 'id',
    metricName: 'metricName',
    metricValue: 'metricValue',
    metricUnit: 'metricUnit',
    recordedAt: 'recordedAt'
  };

  export type SystemMetricsScalarFieldEnum = (typeof SystemMetricsScalarFieldEnum)[keyof typeof SystemMetricsScalarFieldEnum]


  export const PageViewsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tenantId: 'tenantId',
    pagePath: 'pagePath',
    pageTitle: 'pageTitle',
    timeSpent: 'timeSpent',
    sessionId: 'sessionId',
    referrer: 'referrer',
    userAgent: 'userAgent',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type PageViewsScalarFieldEnum = (typeof PageViewsScalarFieldEnum)[keyof typeof PageViewsScalarFieldEnum]


  export const ModuleAnalyticsScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    moduleName: 'moduleName',
    totalUsers: 'totalUsers',
    activeUsers: 'activeUsers',
    totalSessions: 'totalSessions',
    totalPageViews: 'totalPageViews',
    avgSessionTime: 'avgSessionTime',
    popularFeature: 'popularFeature',
    period: 'period',
    createdAt: 'createdAt'
  };

  export type ModuleAnalyticsScalarFieldEnum = (typeof ModuleAnalyticsScalarFieldEnum)[keyof typeof ModuleAnalyticsScalarFieldEnum]


  export const GeographicDataScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    cidade: 'cidade',
    estado: 'estado',
    regiao: 'regiao',
    populacao: 'populacao',
    totalUsuarios: 'totalUsuarios',
    usuariosAtivos: 'usuariosAtivos',
    protocolosMes: 'protocolosMes',
    satisfacaoMedia: 'satisfacaoMedia',
    period: 'period',
    createdAt: 'createdAt'
  };

  export type GeographicDataScalarFieldEnum = (typeof GeographicDataScalarFieldEnum)[keyof typeof GeographicDataScalarFieldEnum]


  export const AutomatedReportsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    reportType: 'reportType',
    frequency: 'frequency',
    isActive: 'isActive',
    config: 'config',
    template: 'template',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AutomatedReportsScalarFieldEnum = (typeof AutomatedReportsScalarFieldEnum)[keyof typeof AutomatedReportsScalarFieldEnum]


  export const ReportSchedulesScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    cronExpression: 'cronExpression',
    timezone: 'timezone',
    nextRun: 'nextRun',
    lastRun: 'lastRun',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type ReportSchedulesScalarFieldEnum = (typeof ReportSchedulesScalarFieldEnum)[keyof typeof ReportSchedulesScalarFieldEnum]


  export const ReportRecipientsScalarFieldEnum: {
    id: 'id',
    scheduleId: 'scheduleId',
    email: 'email',
    name: 'name',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type ReportRecipientsScalarFieldEnum = (typeof ReportRecipientsScalarFieldEnum)[keyof typeof ReportRecipientsScalarFieldEnum]


  export const ReportHistoryScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    generatedAt: 'generatedAt',
    status: 'status',
    filePath: 'filePath',
    fileSize: 'fileSize',
    executionTime: 'executionTime',
    errorMessage: 'errorMessage',
    sentTo: 'sentTo',
    period: 'period'
  };

  export type ReportHistoryScalarFieldEnum = (typeof ReportHistoryScalarFieldEnum)[keyof typeof ReportHistoryScalarFieldEnum]


  export const SatisfactionSurveysScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    tenantId: 'tenantId',
    surveyType: 'surveyType',
    questions: 'questions',
    isActive: 'isActive',
    startDate: 'startDate',
    endDate: 'endDate',
    targetAudience: 'targetAudience',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SatisfactionSurveysScalarFieldEnum = (typeof SatisfactionSurveysScalarFieldEnum)[keyof typeof SatisfactionSurveysScalarFieldEnum]


  export const NpsResponsesScalarFieldEnum: {
    id: 'id',
    surveyId: 'surveyId',
    userId: 'userId',
    tenantId: 'tenantId',
    score: 'score',
    category: 'category',
    comment: 'comment',
    anonymous: 'anonymous',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type NpsResponsesScalarFieldEnum = (typeof NpsResponsesScalarFieldEnum)[keyof typeof NpsResponsesScalarFieldEnum]


  export const FeedbackSubmissionsScalarFieldEnum: {
    id: 'id',
    surveyId: 'surveyId',
    userId: 'userId',
    tenantId: 'tenantId',
    feedbackType: 'feedbackType',
    title: 'title',
    description: 'description',
    priority: 'priority',
    status: 'status',
    category: 'category',
    attachments: 'attachments',
    assignedTo: 'assignedTo',
    resolvedAt: 'resolvedAt',
    resolution: 'resolution',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeedbackSubmissionsScalarFieldEnum = (typeof FeedbackSubmissionsScalarFieldEnum)[keyof typeof FeedbackSubmissionsScalarFieldEnum]


  export const SystemLogsScalarFieldEnum: {
    id: 'id',
    logLevel: 'logLevel',
    service: 'service',
    message: 'message',
    details: 'details',
    userId: 'userId',
    tenantId: 'tenantId',
    stackTrace: 'stackTrace',
    requestId: 'requestId',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type SystemLogsScalarFieldEnum = (typeof SystemLogsScalarFieldEnum)[keyof typeof SystemLogsScalarFieldEnum]


  export const ServiceStatusScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    status: 'status',
    lastCheck: 'lastCheck',
    responseTime: 'responseTime',
    errorMessage: 'errorMessage',
    uptime: 'uptime',
    checkType: 'checkType',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceStatusScalarFieldEnum = (typeof ServiceStatusScalarFieldEnum)[keyof typeof ServiceStatusScalarFieldEnum]


  export const SystemAlertsScalarFieldEnum: {
    id: 'id',
    alertType: 'alertType',
    severity: 'severity',
    title: 'title',
    description: 'description',
    service: 'service',
    threshold: 'threshold',
    currentValue: 'currentValue',
    resolved: 'resolved',
    resolvedAt: 'resolvedAt',
    resolvedBy: 'resolvedBy',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemAlertsScalarFieldEnum = (typeof SystemAlertsScalarFieldEnum)[keyof typeof SystemAlertsScalarFieldEnum]


  export const DetailedSystemMetricsScalarFieldEnum: {
    id: 'id',
    category: 'category',
    metricName: 'metricName',
    metricValue: 'metricValue',
    metricUnit: 'metricUnit',
    instance: 'instance',
    tags: 'tags',
    aggregationType: 'aggregationType',
    recordedAt: 'recordedAt'
  };

  export type DetailedSystemMetricsScalarFieldEnum = (typeof DetailedSystemMetricsScalarFieldEnum)[keyof typeof DetailedSystemMetricsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    tenantCode?: StringFilter<"Tenant"> | string
    nome?: StringFilter<"Tenant"> | string
    email?: StringFilter<"Tenant"> | string
    cidade?: StringFilter<"Tenant"> | string
    estado?: StringFilter<"Tenant"> | string
    cnpj?: StringFilter<"Tenant"> | string
    plano?: StringNullableFilter<"Tenant"> | string | null
    status?: StringNullableFilter<"Tenant"> | string | null
    populacao?: IntNullableFilter<"Tenant"> | number | null
    endereco?: StringNullableFilter<"Tenant"> | string | null
    responsavelNome?: StringNullableFilter<"Tenant"> | string | null
    responsavelEmail?: StringNullableFilter<"Tenant"> | string | null
    responsavelTelefone?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    hasAdmin?: BoolNullableFilter<"Tenant"> | boolean | null
    adminConfirmed?: BoolNullableFilter<"Tenant"> | boolean | null
    adminFirstLogin?: BoolNullableFilter<"Tenant"> | boolean | null
    limiteUsuarios?: IntNullableFilter<"Tenant"> | number | null
    valorMensal?: FloatNullableFilter<"Tenant"> | number | null
    usuariosAtivos?: IntNullableFilter<"Tenant"> | number | null
    protocolosMes?: IntNullableFilter<"Tenant"> | number | null
    configuracoes?: StringNullableFilter<"Tenant"> | string | null
    metricas?: StringNullableFilter<"Tenant"> | string | null
    users?: UserListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    emailDomains?: EmailDomainListRelationFilter
    invoices?: InvoiceListRelationFilter
    analyticsUserSessions?: AnalyticsUserSessionListRelationFilter
    featureUsage?: FeatureUsageListRelationFilter
    pageViews?: PageViewsListRelationFilter
    moduleAnalytics?: ModuleAnalyticsListRelationFilter
    geographicData?: GeographicDataListRelationFilter
    npsResponses?: NpsResponsesListRelationFilter
    feedbackSubmissions?: FeedbackSubmissionsListRelationFilter
    satisfactionSurveys?: SatisfactionSurveysListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    tenantCode?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    cnpj?: SortOrder
    plano?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    populacao?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    responsavelNome?: SortOrderInput | SortOrder
    responsavelEmail?: SortOrderInput | SortOrder
    responsavelTelefone?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    hasAdmin?: SortOrderInput | SortOrder
    adminConfirmed?: SortOrderInput | SortOrder
    adminFirstLogin?: SortOrderInput | SortOrder
    limiteUsuarios?: SortOrderInput | SortOrder
    valorMensal?: SortOrderInput | SortOrder
    usuariosAtivos?: SortOrderInput | SortOrder
    protocolosMes?: SortOrderInput | SortOrder
    configuracoes?: SortOrderInput | SortOrder
    metricas?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    emailDomains?: EmailDomainOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    analyticsUserSessions?: AnalyticsUserSessionOrderByRelationAggregateInput
    featureUsage?: FeatureUsageOrderByRelationAggregateInput
    pageViews?: PageViewsOrderByRelationAggregateInput
    moduleAnalytics?: ModuleAnalyticsOrderByRelationAggregateInput
    geographicData?: GeographicDataOrderByRelationAggregateInput
    npsResponses?: NpsResponsesOrderByRelationAggregateInput
    feedbackSubmissions?: FeedbackSubmissionsOrderByRelationAggregateInput
    satisfactionSurveys?: SatisfactionSurveysOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantCode?: string
    email?: string
    cnpj?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    nome?: StringFilter<"Tenant"> | string
    cidade?: StringFilter<"Tenant"> | string
    estado?: StringFilter<"Tenant"> | string
    plano?: StringNullableFilter<"Tenant"> | string | null
    status?: StringNullableFilter<"Tenant"> | string | null
    populacao?: IntNullableFilter<"Tenant"> | number | null
    endereco?: StringNullableFilter<"Tenant"> | string | null
    responsavelNome?: StringNullableFilter<"Tenant"> | string | null
    responsavelEmail?: StringNullableFilter<"Tenant"> | string | null
    responsavelTelefone?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    hasAdmin?: BoolNullableFilter<"Tenant"> | boolean | null
    adminConfirmed?: BoolNullableFilter<"Tenant"> | boolean | null
    adminFirstLogin?: BoolNullableFilter<"Tenant"> | boolean | null
    limiteUsuarios?: IntNullableFilter<"Tenant"> | number | null
    valorMensal?: FloatNullableFilter<"Tenant"> | number | null
    usuariosAtivos?: IntNullableFilter<"Tenant"> | number | null
    protocolosMes?: IntNullableFilter<"Tenant"> | number | null
    configuracoes?: StringNullableFilter<"Tenant"> | string | null
    metricas?: StringNullableFilter<"Tenant"> | string | null
    users?: UserListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    emailDomains?: EmailDomainListRelationFilter
    invoices?: InvoiceListRelationFilter
    analyticsUserSessions?: AnalyticsUserSessionListRelationFilter
    featureUsage?: FeatureUsageListRelationFilter
    pageViews?: PageViewsListRelationFilter
    moduleAnalytics?: ModuleAnalyticsListRelationFilter
    geographicData?: GeographicDataListRelationFilter
    npsResponses?: NpsResponsesListRelationFilter
    feedbackSubmissions?: FeedbackSubmissionsListRelationFilter
    satisfactionSurveys?: SatisfactionSurveysListRelationFilter
  }, "id" | "tenantCode" | "email" | "cnpj">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    tenantCode?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    cnpj?: SortOrder
    plano?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    populacao?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    responsavelNome?: SortOrderInput | SortOrder
    responsavelEmail?: SortOrderInput | SortOrder
    responsavelTelefone?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    hasAdmin?: SortOrderInput | SortOrder
    adminConfirmed?: SortOrderInput | SortOrder
    adminFirstLogin?: SortOrderInput | SortOrder
    limiteUsuarios?: SortOrderInput | SortOrder
    valorMensal?: SortOrderInput | SortOrder
    usuariosAtivos?: SortOrderInput | SortOrder
    protocolosMes?: SortOrderInput | SortOrder
    configuracoes?: SortOrderInput | SortOrder
    metricas?: SortOrderInput | SortOrder
    _count?: TenantCountOrderByAggregateInput
    _avg?: TenantAvgOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
    _sum?: TenantSumOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    tenantCode?: StringWithAggregatesFilter<"Tenant"> | string
    nome?: StringWithAggregatesFilter<"Tenant"> | string
    email?: StringWithAggregatesFilter<"Tenant"> | string
    cidade?: StringWithAggregatesFilter<"Tenant"> | string
    estado?: StringWithAggregatesFilter<"Tenant"> | string
    cnpj?: StringWithAggregatesFilter<"Tenant"> | string
    plano?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    status?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    populacao?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
    endereco?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    responsavelNome?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    responsavelEmail?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    responsavelTelefone?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Tenant"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Tenant"> | Date | string | null
    hasAdmin?: BoolNullableWithAggregatesFilter<"Tenant"> | boolean | null
    adminConfirmed?: BoolNullableWithAggregatesFilter<"Tenant"> | boolean | null
    adminFirstLogin?: BoolNullableWithAggregatesFilter<"Tenant"> | boolean | null
    limiteUsuarios?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
    valorMensal?: FloatNullableWithAggregatesFilter<"Tenant"> | number | null
    usuariosAtivos?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
    protocolosMes?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
    configuracoes?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    metricas?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    tenantId?: StringNullableFilter<"User"> | string | null
    nomeCompleto?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    ultimoLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntNullableFilter<"User"> | number | null
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    tipoUsuario?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    ultimaAtividade?: DateTimeNullableFilter<"User"> | Date | string | null
    ativo?: BoolNullableFilter<"User"> | boolean | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    permissions?: UserPermissionListRelationFilter
    grantedPermissions?: UserPermissionListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    smtpUsers?: SmtpUserListRelationFilter
    userSessions?: UserSessionListRelationFilter
    userTokens?: UserTokenListRelationFilter
    passwordResetTokens?: PasswordResetTokenListRelationFilter
    emailVerificationTokens?: EmailVerificationTokenListRelationFilter
    analyticsUserSessions?: AnalyticsUserSessionListRelationFilter
    featureUsage?: FeatureUsageListRelationFilter
    pageViews?: PageViewsListRelationFilter
    npsResponses?: NpsResponsesListRelationFilter
    feedbackSubmissions?: FeedbackSubmissionsListRelationFilter
    assignedFeedbacks?: FeedbackSubmissionsListRelationFilter
    createdReports?: AutomatedReportsListRelationFilter
    createdSurveys?: SatisfactionSurveysListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    ultimoLogin?: SortOrderInput | SortOrder
    failedLoginAttempts?: SortOrderInput | SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    tipoUsuario?: SortOrderInput | SortOrder
    telefone?: SortOrderInput | SortOrder
    ultimaAtividade?: SortOrderInput | SortOrder
    ativo?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
    permissions?: UserPermissionOrderByRelationAggregateInput
    grantedPermissions?: UserPermissionOrderByRelationAggregateInput
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    smtpUsers?: SmtpUserOrderByRelationAggregateInput
    userSessions?: UserSessionOrderByRelationAggregateInput
    userTokens?: UserTokenOrderByRelationAggregateInput
    passwordResetTokens?: PasswordResetTokenOrderByRelationAggregateInput
    emailVerificationTokens?: EmailVerificationTokenOrderByRelationAggregateInput
    analyticsUserSessions?: AnalyticsUserSessionOrderByRelationAggregateInput
    featureUsage?: FeatureUsageOrderByRelationAggregateInput
    pageViews?: PageViewsOrderByRelationAggregateInput
    npsResponses?: NpsResponsesOrderByRelationAggregateInput
    feedbackSubmissions?: FeedbackSubmissionsOrderByRelationAggregateInput
    assignedFeedbacks?: FeedbackSubmissionsOrderByRelationAggregateInput
    createdReports?: AutomatedReportsOrderByRelationAggregateInput
    createdSurveys?: SatisfactionSurveysOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    tenantId?: StringNullableFilter<"User"> | string | null
    nomeCompleto?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    ultimoLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntNullableFilter<"User"> | number | null
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    tipoUsuario?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    ultimaAtividade?: DateTimeNullableFilter<"User"> | Date | string | null
    ativo?: BoolNullableFilter<"User"> | boolean | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    permissions?: UserPermissionListRelationFilter
    grantedPermissions?: UserPermissionListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    smtpUsers?: SmtpUserListRelationFilter
    userSessions?: UserSessionListRelationFilter
    userTokens?: UserTokenListRelationFilter
    passwordResetTokens?: PasswordResetTokenListRelationFilter
    emailVerificationTokens?: EmailVerificationTokenListRelationFilter
    analyticsUserSessions?: AnalyticsUserSessionListRelationFilter
    featureUsage?: FeatureUsageListRelationFilter
    pageViews?: PageViewsListRelationFilter
    npsResponses?: NpsResponsesListRelationFilter
    feedbackSubmissions?: FeedbackSubmissionsListRelationFilter
    assignedFeedbacks?: FeedbackSubmissionsListRelationFilter
    createdReports?: AutomatedReportsListRelationFilter
    createdSurveys?: SatisfactionSurveysListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    ultimoLogin?: SortOrderInput | SortOrder
    failedLoginAttempts?: SortOrderInput | SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    tipoUsuario?: SortOrderInput | SortOrder
    telefone?: SortOrderInput | SortOrder
    ultimaAtividade?: SortOrderInput | SortOrder
    ativo?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    tenantId?: StringNullableWithAggregatesFilter<"User"> | string | null
    nomeCompleto?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    ultimoLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntNullableWithAggregatesFilter<"User"> | number | null
    lockedUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailVerified?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    tipoUsuario?: StringNullableWithAggregatesFilter<"User"> | string | null
    telefone?: StringNullableWithAggregatesFilter<"User"> | string | null
    ultimaAtividade?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    ativo?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: IntFilter<"Permission"> | number
    code?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeNullableFilter<"Permission"> | Date | string | null
    userPermissions?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    userPermissions?: UserPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeNullableFilter<"Permission"> | Date | string | null
    userPermissions?: UserPermissionListRelationFilter
  }, "id" | "code">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _avg?: PermissionAvgOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
    _sum?: PermissionSumOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Permission"> | number
    code?: StringWithAggregatesFilter<"Permission"> | string
    resource?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Permission"> | Date | string | null
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: IntFilter<"UserPermission"> | number
    grantedBy?: StringNullableFilter<"UserPermission"> | string | null
    createdAt?: DateTimeNullableFilter<"UserPermission"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
    grantor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
    grantor?: UserOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_permissionId?: UserPermissionUserIdPermissionIdCompoundUniqueInput
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: IntFilter<"UserPermission"> | number
    grantedBy?: StringNullableFilter<"UserPermission"> | string | null
    createdAt?: DateTimeNullableFilter<"UserPermission"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
    grantor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "userId_permissionId">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _avg?: UserPermissionAvgOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
    _sum?: UserPermissionSumOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserPermission"> | number
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permissionId?: IntWithAggregatesFilter<"UserPermission"> | number
    grantedBy?: StringNullableWithAggregatesFilter<"UserPermission"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"UserPermission"> | Date | string | null
  }

  export type ActivityLogWhereInput = {
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    id?: IntFilter<"ActivityLog"> | number
    userId?: StringNullableFilter<"ActivityLog"> | string | null
    tenantId?: StringNullableFilter<"ActivityLog"> | string | null
    action?: StringFilter<"ActivityLog"> | string
    resource?: StringNullableFilter<"ActivityLog"> | string | null
    resourceId?: StringNullableFilter<"ActivityLog"> | string | null
    details?: StringNullableFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeNullableFilter<"ActivityLog"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type ActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    action?: SortOrder
    resource?: SortOrderInput | SortOrder
    resourceId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type ActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    userId?: StringNullableFilter<"ActivityLog"> | string | null
    tenantId?: StringNullableFilter<"ActivityLog"> | string | null
    action?: StringFilter<"ActivityLog"> | string
    resource?: StringNullableFilter<"ActivityLog"> | string | null
    resourceId?: StringNullableFilter<"ActivityLog"> | string | null
    details?: StringNullableFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeNullableFilter<"ActivityLog"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id">

  export type ActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    action?: SortOrder
    resource?: SortOrderInput | SortOrder
    resourceId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: ActivityLogCountOrderByAggregateInput
    _avg?: ActivityLogAvgOrderByAggregateInput
    _max?: ActivityLogMaxOrderByAggregateInput
    _min?: ActivityLogMinOrderByAggregateInput
    _sum?: ActivityLogSumOrderByAggregateInput
  }

  export type ActivityLogScalarWhereWithAggregatesInput = {
    AND?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    OR?: ActivityLogScalarWhereWithAggregatesInput[]
    NOT?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ActivityLog"> | number
    userId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    tenantId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    action?: StringWithAggregatesFilter<"ActivityLog"> | string
    resource?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    resourceId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    details?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"ActivityLog"> | Date | string | null
  }

  export type SmtpUserWhereInput = {
    AND?: SmtpUserWhereInput | SmtpUserWhereInput[]
    OR?: SmtpUserWhereInput[]
    NOT?: SmtpUserWhereInput | SmtpUserWhereInput[]
    id?: IntFilter<"SmtpUser"> | number
    userId?: StringNullableFilter<"SmtpUser"> | string | null
    email?: StringFilter<"SmtpUser"> | string
    passwordHash?: StringFilter<"SmtpUser"> | string
    name?: StringFilter<"SmtpUser"> | string
    isVerified?: BoolFilter<"SmtpUser"> | boolean
    isActive?: BoolFilter<"SmtpUser"> | boolean
    isAdmin?: BoolFilter<"SmtpUser"> | boolean
    lastLogin?: DateTimeNullableFilter<"SmtpUser"> | Date | string | null
    createdAt?: DateTimeFilter<"SmtpUser"> | Date | string
    updatedAt?: DateTimeFilter<"SmtpUser"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    domains?: EmailDomainListRelationFilter
    authAttempts?: AuthAttemptListRelationFilter
  }

  export type SmtpUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    isAdmin?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    domains?: EmailDomainOrderByRelationAggregateInput
    authAttempts?: AuthAttemptOrderByRelationAggregateInput
  }

  export type SmtpUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: SmtpUserWhereInput | SmtpUserWhereInput[]
    OR?: SmtpUserWhereInput[]
    NOT?: SmtpUserWhereInput | SmtpUserWhereInput[]
    userId?: StringNullableFilter<"SmtpUser"> | string | null
    passwordHash?: StringFilter<"SmtpUser"> | string
    name?: StringFilter<"SmtpUser"> | string
    isVerified?: BoolFilter<"SmtpUser"> | boolean
    isActive?: BoolFilter<"SmtpUser"> | boolean
    isAdmin?: BoolFilter<"SmtpUser"> | boolean
    lastLogin?: DateTimeNullableFilter<"SmtpUser"> | Date | string | null
    createdAt?: DateTimeFilter<"SmtpUser"> | Date | string
    updatedAt?: DateTimeFilter<"SmtpUser"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    domains?: EmailDomainListRelationFilter
    authAttempts?: AuthAttemptListRelationFilter
  }, "id" | "email">

  export type SmtpUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    isAdmin?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SmtpUserCountOrderByAggregateInput
    _avg?: SmtpUserAvgOrderByAggregateInput
    _max?: SmtpUserMaxOrderByAggregateInput
    _min?: SmtpUserMinOrderByAggregateInput
    _sum?: SmtpUserSumOrderByAggregateInput
  }

  export type SmtpUserScalarWhereWithAggregatesInput = {
    AND?: SmtpUserScalarWhereWithAggregatesInput | SmtpUserScalarWhereWithAggregatesInput[]
    OR?: SmtpUserScalarWhereWithAggregatesInput[]
    NOT?: SmtpUserScalarWhereWithAggregatesInput | SmtpUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SmtpUser"> | number
    userId?: StringNullableWithAggregatesFilter<"SmtpUser"> | string | null
    email?: StringWithAggregatesFilter<"SmtpUser"> | string
    passwordHash?: StringWithAggregatesFilter<"SmtpUser"> | string
    name?: StringWithAggregatesFilter<"SmtpUser"> | string
    isVerified?: BoolWithAggregatesFilter<"SmtpUser"> | boolean
    isActive?: BoolWithAggregatesFilter<"SmtpUser"> | boolean
    isAdmin?: BoolWithAggregatesFilter<"SmtpUser"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"SmtpUser"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SmtpUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SmtpUser"> | Date | string
  }

  export type EmailDomainWhereInput = {
    AND?: EmailDomainWhereInput | EmailDomainWhereInput[]
    OR?: EmailDomainWhereInput[]
    NOT?: EmailDomainWhereInput | EmailDomainWhereInput[]
    id?: IntFilter<"EmailDomain"> | number
    tenantId?: StringNullableFilter<"EmailDomain"> | string | null
    smtpUserId?: IntFilter<"EmailDomain"> | number
    domainName?: StringFilter<"EmailDomain"> | string
    isVerified?: BoolFilter<"EmailDomain"> | boolean
    verificationToken?: StringNullableFilter<"EmailDomain"> | string | null
    verifiedAt?: DateTimeNullableFilter<"EmailDomain"> | Date | string | null
    verificationMethod?: StringNullableFilter<"EmailDomain"> | string | null
    dkimEnabled?: BoolFilter<"EmailDomain"> | boolean
    spfEnabled?: BoolFilter<"EmailDomain"> | boolean
    createdAt?: DateTimeFilter<"EmailDomain"> | Date | string
    updatedAt?: DateTimeFilter<"EmailDomain"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    smtpUser?: XOR<SmtpUserScalarRelationFilter, SmtpUserWhereInput>
    dkimKeys?: DkimKeyListRelationFilter
    emails?: EmailListRelationFilter
  }

  export type EmailDomainOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    smtpUserId?: SortOrder
    domainName?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    verificationMethod?: SortOrderInput | SortOrder
    dkimEnabled?: SortOrder
    spfEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    smtpUser?: SmtpUserOrderByWithRelationInput
    dkimKeys?: DkimKeyOrderByRelationAggregateInput
    emails?: EmailOrderByRelationAggregateInput
  }

  export type EmailDomainWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    domainName?: string
    AND?: EmailDomainWhereInput | EmailDomainWhereInput[]
    OR?: EmailDomainWhereInput[]
    NOT?: EmailDomainWhereInput | EmailDomainWhereInput[]
    tenantId?: StringNullableFilter<"EmailDomain"> | string | null
    smtpUserId?: IntFilter<"EmailDomain"> | number
    isVerified?: BoolFilter<"EmailDomain"> | boolean
    verificationToken?: StringNullableFilter<"EmailDomain"> | string | null
    verifiedAt?: DateTimeNullableFilter<"EmailDomain"> | Date | string | null
    verificationMethod?: StringNullableFilter<"EmailDomain"> | string | null
    dkimEnabled?: BoolFilter<"EmailDomain"> | boolean
    spfEnabled?: BoolFilter<"EmailDomain"> | boolean
    createdAt?: DateTimeFilter<"EmailDomain"> | Date | string
    updatedAt?: DateTimeFilter<"EmailDomain"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    smtpUser?: XOR<SmtpUserScalarRelationFilter, SmtpUserWhereInput>
    dkimKeys?: DkimKeyListRelationFilter
    emails?: EmailListRelationFilter
  }, "id" | "domainName">

  export type EmailDomainOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    smtpUserId?: SortOrder
    domainName?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    verificationMethod?: SortOrderInput | SortOrder
    dkimEnabled?: SortOrder
    spfEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailDomainCountOrderByAggregateInput
    _avg?: EmailDomainAvgOrderByAggregateInput
    _max?: EmailDomainMaxOrderByAggregateInput
    _min?: EmailDomainMinOrderByAggregateInput
    _sum?: EmailDomainSumOrderByAggregateInput
  }

  export type EmailDomainScalarWhereWithAggregatesInput = {
    AND?: EmailDomainScalarWhereWithAggregatesInput | EmailDomainScalarWhereWithAggregatesInput[]
    OR?: EmailDomainScalarWhereWithAggregatesInput[]
    NOT?: EmailDomainScalarWhereWithAggregatesInput | EmailDomainScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailDomain"> | number
    tenantId?: StringNullableWithAggregatesFilter<"EmailDomain"> | string | null
    smtpUserId?: IntWithAggregatesFilter<"EmailDomain"> | number
    domainName?: StringWithAggregatesFilter<"EmailDomain"> | string
    isVerified?: BoolWithAggregatesFilter<"EmailDomain"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"EmailDomain"> | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"EmailDomain"> | Date | string | null
    verificationMethod?: StringNullableWithAggregatesFilter<"EmailDomain"> | string | null
    dkimEnabled?: BoolWithAggregatesFilter<"EmailDomain"> | boolean
    spfEnabled?: BoolWithAggregatesFilter<"EmailDomain"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EmailDomain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailDomain"> | Date | string
  }

  export type DkimKeyWhereInput = {
    AND?: DkimKeyWhereInput | DkimKeyWhereInput[]
    OR?: DkimKeyWhereInput[]
    NOT?: DkimKeyWhereInput | DkimKeyWhereInput[]
    id?: IntFilter<"DkimKey"> | number
    domainId?: IntFilter<"DkimKey"> | number
    selector?: StringFilter<"DkimKey"> | string
    privateKey?: StringFilter<"DkimKey"> | string
    publicKey?: StringFilter<"DkimKey"> | string
    algorithm?: StringFilter<"DkimKey"> | string
    canonicalization?: StringFilter<"DkimKey"> | string
    keySize?: IntFilter<"DkimKey"> | number
    isActive?: BoolFilter<"DkimKey"> | boolean
    createdAt?: DateTimeFilter<"DkimKey"> | Date | string
    updatedAt?: DateTimeFilter<"DkimKey"> | Date | string
    domain?: XOR<EmailDomainScalarRelationFilter, EmailDomainWhereInput>
  }

  export type DkimKeyOrderByWithRelationInput = {
    id?: SortOrder
    domainId?: SortOrder
    selector?: SortOrder
    privateKey?: SortOrder
    publicKey?: SortOrder
    algorithm?: SortOrder
    canonicalization?: SortOrder
    keySize?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    domain?: EmailDomainOrderByWithRelationInput
  }

  export type DkimKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    domainId_selector?: DkimKeyDomainIdSelectorCompoundUniqueInput
    AND?: DkimKeyWhereInput | DkimKeyWhereInput[]
    OR?: DkimKeyWhereInput[]
    NOT?: DkimKeyWhereInput | DkimKeyWhereInput[]
    domainId?: IntFilter<"DkimKey"> | number
    selector?: StringFilter<"DkimKey"> | string
    privateKey?: StringFilter<"DkimKey"> | string
    publicKey?: StringFilter<"DkimKey"> | string
    algorithm?: StringFilter<"DkimKey"> | string
    canonicalization?: StringFilter<"DkimKey"> | string
    keySize?: IntFilter<"DkimKey"> | number
    isActive?: BoolFilter<"DkimKey"> | boolean
    createdAt?: DateTimeFilter<"DkimKey"> | Date | string
    updatedAt?: DateTimeFilter<"DkimKey"> | Date | string
    domain?: XOR<EmailDomainScalarRelationFilter, EmailDomainWhereInput>
  }, "id" | "domainId_selector">

  export type DkimKeyOrderByWithAggregationInput = {
    id?: SortOrder
    domainId?: SortOrder
    selector?: SortOrder
    privateKey?: SortOrder
    publicKey?: SortOrder
    algorithm?: SortOrder
    canonicalization?: SortOrder
    keySize?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DkimKeyCountOrderByAggregateInput
    _avg?: DkimKeyAvgOrderByAggregateInput
    _max?: DkimKeyMaxOrderByAggregateInput
    _min?: DkimKeyMinOrderByAggregateInput
    _sum?: DkimKeySumOrderByAggregateInput
  }

  export type DkimKeyScalarWhereWithAggregatesInput = {
    AND?: DkimKeyScalarWhereWithAggregatesInput | DkimKeyScalarWhereWithAggregatesInput[]
    OR?: DkimKeyScalarWhereWithAggregatesInput[]
    NOT?: DkimKeyScalarWhereWithAggregatesInput | DkimKeyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DkimKey"> | number
    domainId?: IntWithAggregatesFilter<"DkimKey"> | number
    selector?: StringWithAggregatesFilter<"DkimKey"> | string
    privateKey?: StringWithAggregatesFilter<"DkimKey"> | string
    publicKey?: StringWithAggregatesFilter<"DkimKey"> | string
    algorithm?: StringWithAggregatesFilter<"DkimKey"> | string
    canonicalization?: StringWithAggregatesFilter<"DkimKey"> | string
    keySize?: IntWithAggregatesFilter<"DkimKey"> | number
    isActive?: BoolWithAggregatesFilter<"DkimKey"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DkimKey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DkimKey"> | Date | string
  }

  export type EmailWhereInput = {
    AND?: EmailWhereInput | EmailWhereInput[]
    OR?: EmailWhereInput[]
    NOT?: EmailWhereInput | EmailWhereInput[]
    id?: IntFilter<"Email"> | number
    messageId?: StringFilter<"Email"> | string
    domainId?: IntNullableFilter<"Email"> | number | null
    fromEmail?: StringFilter<"Email"> | string
    toEmail?: StringFilter<"Email"> | string
    subject?: StringFilter<"Email"> | string
    htmlContent?: StringNullableFilter<"Email"> | string | null
    textContent?: StringNullableFilter<"Email"> | string | null
    status?: StringFilter<"Email"> | string
    direction?: StringFilter<"Email"> | string
    sentAt?: DateTimeNullableFilter<"Email"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"Email"> | Date | string | null
    mxServer?: StringNullableFilter<"Email"> | string | null
    errorMessage?: StringNullableFilter<"Email"> | string | null
    attempts?: IntFilter<"Email"> | number
    createdAt?: DateTimeFilter<"Email"> | Date | string
    updatedAt?: DateTimeFilter<"Email"> | Date | string
    domain?: XOR<EmailDomainNullableScalarRelationFilter, EmailDomainWhereInput> | null
  }

  export type EmailOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    domainId?: SortOrderInput | SortOrder
    fromEmail?: SortOrder
    toEmail?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrderInput | SortOrder
    textContent?: SortOrderInput | SortOrder
    status?: SortOrder
    direction?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    mxServer?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    domain?: EmailDomainOrderByWithRelationInput
  }

  export type EmailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    messageId?: string
    AND?: EmailWhereInput | EmailWhereInput[]
    OR?: EmailWhereInput[]
    NOT?: EmailWhereInput | EmailWhereInput[]
    domainId?: IntNullableFilter<"Email"> | number | null
    fromEmail?: StringFilter<"Email"> | string
    toEmail?: StringFilter<"Email"> | string
    subject?: StringFilter<"Email"> | string
    htmlContent?: StringNullableFilter<"Email"> | string | null
    textContent?: StringNullableFilter<"Email"> | string | null
    status?: StringFilter<"Email"> | string
    direction?: StringFilter<"Email"> | string
    sentAt?: DateTimeNullableFilter<"Email"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"Email"> | Date | string | null
    mxServer?: StringNullableFilter<"Email"> | string | null
    errorMessage?: StringNullableFilter<"Email"> | string | null
    attempts?: IntFilter<"Email"> | number
    createdAt?: DateTimeFilter<"Email"> | Date | string
    updatedAt?: DateTimeFilter<"Email"> | Date | string
    domain?: XOR<EmailDomainNullableScalarRelationFilter, EmailDomainWhereInput> | null
  }, "id" | "messageId">

  export type EmailOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    domainId?: SortOrderInput | SortOrder
    fromEmail?: SortOrder
    toEmail?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrderInput | SortOrder
    textContent?: SortOrderInput | SortOrder
    status?: SortOrder
    direction?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    mxServer?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailCountOrderByAggregateInput
    _avg?: EmailAvgOrderByAggregateInput
    _max?: EmailMaxOrderByAggregateInput
    _min?: EmailMinOrderByAggregateInput
    _sum?: EmailSumOrderByAggregateInput
  }

  export type EmailScalarWhereWithAggregatesInput = {
    AND?: EmailScalarWhereWithAggregatesInput | EmailScalarWhereWithAggregatesInput[]
    OR?: EmailScalarWhereWithAggregatesInput[]
    NOT?: EmailScalarWhereWithAggregatesInput | EmailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Email"> | number
    messageId?: StringWithAggregatesFilter<"Email"> | string
    domainId?: IntNullableWithAggregatesFilter<"Email"> | number | null
    fromEmail?: StringWithAggregatesFilter<"Email"> | string
    toEmail?: StringWithAggregatesFilter<"Email"> | string
    subject?: StringWithAggregatesFilter<"Email"> | string
    htmlContent?: StringNullableWithAggregatesFilter<"Email"> | string | null
    textContent?: StringNullableWithAggregatesFilter<"Email"> | string | null
    status?: StringWithAggregatesFilter<"Email"> | string
    direction?: StringWithAggregatesFilter<"Email"> | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"Email"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"Email"> | Date | string | null
    mxServer?: StringNullableWithAggregatesFilter<"Email"> | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"Email"> | string | null
    attempts?: IntWithAggregatesFilter<"Email"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Email"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Email"> | Date | string
  }

  export type SmtpConnectionWhereInput = {
    AND?: SmtpConnectionWhereInput | SmtpConnectionWhereInput[]
    OR?: SmtpConnectionWhereInput[]
    NOT?: SmtpConnectionWhereInput | SmtpConnectionWhereInput[]
    id?: IntFilter<"SmtpConnection"> | number
    remoteAddress?: StringFilter<"SmtpConnection"> | string
    hostname?: StringNullableFilter<"SmtpConnection"> | string | null
    serverType?: StringFilter<"SmtpConnection"> | string
    status?: StringFilter<"SmtpConnection"> | string
    rejectReason?: StringNullableFilter<"SmtpConnection"> | string | null
    createdAt?: DateTimeFilter<"SmtpConnection"> | Date | string
  }

  export type SmtpConnectionOrderByWithRelationInput = {
    id?: SortOrder
    remoteAddress?: SortOrder
    hostname?: SortOrderInput | SortOrder
    serverType?: SortOrder
    status?: SortOrder
    rejectReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type SmtpConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SmtpConnectionWhereInput | SmtpConnectionWhereInput[]
    OR?: SmtpConnectionWhereInput[]
    NOT?: SmtpConnectionWhereInput | SmtpConnectionWhereInput[]
    remoteAddress?: StringFilter<"SmtpConnection"> | string
    hostname?: StringNullableFilter<"SmtpConnection"> | string | null
    serverType?: StringFilter<"SmtpConnection"> | string
    status?: StringFilter<"SmtpConnection"> | string
    rejectReason?: StringNullableFilter<"SmtpConnection"> | string | null
    createdAt?: DateTimeFilter<"SmtpConnection"> | Date | string
  }, "id">

  export type SmtpConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    remoteAddress?: SortOrder
    hostname?: SortOrderInput | SortOrder
    serverType?: SortOrder
    status?: SortOrder
    rejectReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SmtpConnectionCountOrderByAggregateInput
    _avg?: SmtpConnectionAvgOrderByAggregateInput
    _max?: SmtpConnectionMaxOrderByAggregateInput
    _min?: SmtpConnectionMinOrderByAggregateInput
    _sum?: SmtpConnectionSumOrderByAggregateInput
  }

  export type SmtpConnectionScalarWhereWithAggregatesInput = {
    AND?: SmtpConnectionScalarWhereWithAggregatesInput | SmtpConnectionScalarWhereWithAggregatesInput[]
    OR?: SmtpConnectionScalarWhereWithAggregatesInput[]
    NOT?: SmtpConnectionScalarWhereWithAggregatesInput | SmtpConnectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SmtpConnection"> | number
    remoteAddress?: StringWithAggregatesFilter<"SmtpConnection"> | string
    hostname?: StringNullableWithAggregatesFilter<"SmtpConnection"> | string | null
    serverType?: StringWithAggregatesFilter<"SmtpConnection"> | string
    status?: StringWithAggregatesFilter<"SmtpConnection"> | string
    rejectReason?: StringNullableWithAggregatesFilter<"SmtpConnection"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SmtpConnection"> | Date | string
  }

  export type AuthAttemptWhereInput = {
    AND?: AuthAttemptWhereInput | AuthAttemptWhereInput[]
    OR?: AuthAttemptWhereInput[]
    NOT?: AuthAttemptWhereInput | AuthAttemptWhereInput[]
    id?: IntFilter<"AuthAttempt"> | number
    smtpUserId?: IntNullableFilter<"AuthAttempt"> | number | null
    username?: StringFilter<"AuthAttempt"> | string
    remoteAddress?: StringFilter<"AuthAttempt"> | string
    success?: BoolFilter<"AuthAttempt"> | boolean
    createdAt?: DateTimeFilter<"AuthAttempt"> | Date | string
    smtpUser?: XOR<SmtpUserNullableScalarRelationFilter, SmtpUserWhereInput> | null
  }

  export type AuthAttemptOrderByWithRelationInput = {
    id?: SortOrder
    smtpUserId?: SortOrderInput | SortOrder
    username?: SortOrder
    remoteAddress?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    smtpUser?: SmtpUserOrderByWithRelationInput
  }

  export type AuthAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuthAttemptWhereInput | AuthAttemptWhereInput[]
    OR?: AuthAttemptWhereInput[]
    NOT?: AuthAttemptWhereInput | AuthAttemptWhereInput[]
    smtpUserId?: IntNullableFilter<"AuthAttempt"> | number | null
    username?: StringFilter<"AuthAttempt"> | string
    remoteAddress?: StringFilter<"AuthAttempt"> | string
    success?: BoolFilter<"AuthAttempt"> | boolean
    createdAt?: DateTimeFilter<"AuthAttempt"> | Date | string
    smtpUser?: XOR<SmtpUserNullableScalarRelationFilter, SmtpUserWhereInput> | null
  }, "id">

  export type AuthAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    smtpUserId?: SortOrderInput | SortOrder
    username?: SortOrder
    remoteAddress?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    _count?: AuthAttemptCountOrderByAggregateInput
    _avg?: AuthAttemptAvgOrderByAggregateInput
    _max?: AuthAttemptMaxOrderByAggregateInput
    _min?: AuthAttemptMinOrderByAggregateInput
    _sum?: AuthAttemptSumOrderByAggregateInput
  }

  export type AuthAttemptScalarWhereWithAggregatesInput = {
    AND?: AuthAttemptScalarWhereWithAggregatesInput | AuthAttemptScalarWhereWithAggregatesInput[]
    OR?: AuthAttemptScalarWhereWithAggregatesInput[]
    NOT?: AuthAttemptScalarWhereWithAggregatesInput | AuthAttemptScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuthAttempt"> | number
    smtpUserId?: IntNullableWithAggregatesFilter<"AuthAttempt"> | number | null
    username?: StringWithAggregatesFilter<"AuthAttempt"> | string
    remoteAddress?: StringWithAggregatesFilter<"AuthAttempt"> | string
    success?: BoolWithAggregatesFilter<"AuthAttempt"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AuthAttempt"> | Date | string
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    tokenHash?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    lastActivity?: DateTimeNullableFilter<"UserSession"> | Date | string | null
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    tokenHash?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    tokenHash?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    lastActivity?: DateTimeNullableFilter<"UserSession"> | Date | string | null
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    tokenHash?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    token?: StringWithAggregatesFilter<"UserSession"> | string
    tokenHash?: StringWithAggregatesFilter<"UserSession"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    isActive?: BoolWithAggregatesFilter<"UserSession"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    lastActivity?: DateTimeNullableWithAggregatesFilter<"UserSession"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type UserTokenWhereInput = {
    AND?: UserTokenWhereInput | UserTokenWhereInput[]
    OR?: UserTokenWhereInput[]
    NOT?: UserTokenWhereInput | UserTokenWhereInput[]
    id?: IntFilter<"UserToken"> | number
    userId?: StringFilter<"UserToken"> | string
    type?: StringFilter<"UserToken"> | string
    token?: StringFilter<"UserToken"> | string
    expiresAt?: DateTimeNullableFilter<"UserToken"> | Date | string | null
    createdAt?: DateTimeFilter<"UserToken"> | Date | string
    updatedAt?: DateTimeFilter<"UserToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: UserTokenWhereInput | UserTokenWhereInput[]
    OR?: UserTokenWhereInput[]
    NOT?: UserTokenWhereInput | UserTokenWhereInput[]
    userId?: StringFilter<"UserToken"> | string
    type?: StringFilter<"UserToken"> | string
    expiresAt?: DateTimeNullableFilter<"UserToken"> | Date | string | null
    createdAt?: DateTimeFilter<"UserToken"> | Date | string
    updatedAt?: DateTimeFilter<"UserToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type UserTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTokenCountOrderByAggregateInput
    _avg?: UserTokenAvgOrderByAggregateInput
    _max?: UserTokenMaxOrderByAggregateInput
    _min?: UserTokenMinOrderByAggregateInput
    _sum?: UserTokenSumOrderByAggregateInput
  }

  export type UserTokenScalarWhereWithAggregatesInput = {
    AND?: UserTokenScalarWhereWithAggregatesInput | UserTokenScalarWhereWithAggregatesInput[]
    OR?: UserTokenScalarWhereWithAggregatesInput[]
    NOT?: UserTokenScalarWhereWithAggregatesInput | UserTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserToken"> | number
    userId?: StringWithAggregatesFilter<"UserToken"> | string
    type?: StringWithAggregatesFilter<"UserToken"> | string
    token?: StringWithAggregatesFilter<"UserToken"> | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserToken"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserToken"> | Date | string
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: IntFilter<"SystemConfig"> | number
    key?: StringFilter<"SystemConfig"> | string
    value?: StringFilter<"SystemConfig"> | string
    description?: StringNullableFilter<"SystemConfig"> | string | null
    isActive?: BoolFilter<"SystemConfig"> | boolean
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: StringFilter<"SystemConfig"> | string
    description?: StringNullableFilter<"SystemConfig"> | string | null
    isActive?: BoolFilter<"SystemConfig"> | boolean
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _avg?: SystemConfigAvgOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
    _sum?: SystemConfigSumOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemConfig"> | number
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: StringWithAggregatesFilter<"SystemConfig"> | string
    description?: StringNullableWithAggregatesFilter<"SystemConfig"> | string | null
    isActive?: BoolWithAggregatesFilter<"SystemConfig"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: IntFilter<"PasswordResetToken"> | number
    userId?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    userId?: StringFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _avg?: PasswordResetTokenAvgOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
    _sum?: PasswordResetTokenSumOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PasswordResetToken"> | number
    userId?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    used?: BoolWithAggregatesFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type EmailVerificationTokenWhereInput = {
    AND?: EmailVerificationTokenWhereInput | EmailVerificationTokenWhereInput[]
    OR?: EmailVerificationTokenWhereInput[]
    NOT?: EmailVerificationTokenWhereInput | EmailVerificationTokenWhereInput[]
    id?: IntFilter<"EmailVerificationToken"> | number
    userId?: StringFilter<"EmailVerificationToken"> | string
    token?: StringFilter<"EmailVerificationToken"> | string
    expiresAt?: DateTimeFilter<"EmailVerificationToken"> | Date | string
    used?: BoolFilter<"EmailVerificationToken"> | boolean
    createdAt?: DateTimeFilter<"EmailVerificationToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmailVerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EmailVerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: EmailVerificationTokenWhereInput | EmailVerificationTokenWhereInput[]
    OR?: EmailVerificationTokenWhereInput[]
    NOT?: EmailVerificationTokenWhereInput | EmailVerificationTokenWhereInput[]
    userId?: StringFilter<"EmailVerificationToken"> | string
    expiresAt?: DateTimeFilter<"EmailVerificationToken"> | Date | string
    used?: BoolFilter<"EmailVerificationToken"> | boolean
    createdAt?: DateTimeFilter<"EmailVerificationToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type EmailVerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    _count?: EmailVerificationTokenCountOrderByAggregateInput
    _avg?: EmailVerificationTokenAvgOrderByAggregateInput
    _max?: EmailVerificationTokenMaxOrderByAggregateInput
    _min?: EmailVerificationTokenMinOrderByAggregateInput
    _sum?: EmailVerificationTokenSumOrderByAggregateInput
  }

  export type EmailVerificationTokenScalarWhereWithAggregatesInput = {
    AND?: EmailVerificationTokenScalarWhereWithAggregatesInput | EmailVerificationTokenScalarWhereWithAggregatesInput[]
    OR?: EmailVerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: EmailVerificationTokenScalarWhereWithAggregatesInput | EmailVerificationTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailVerificationToken"> | number
    userId?: StringWithAggregatesFilter<"EmailVerificationToken"> | string
    token?: StringWithAggregatesFilter<"EmailVerificationToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"EmailVerificationToken"> | Date | string
    used?: BoolWithAggregatesFilter<"EmailVerificationToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EmailVerificationToken"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: StringFilter<"Invoice"> | string
    tenantId?: StringFilter<"Invoice"> | string
    numero?: StringFilter<"Invoice"> | string
    periodo?: StringFilter<"Invoice"> | string
    valor?: FloatFilter<"Invoice"> | number
    descricao?: StringNullableFilter<"Invoice"> | string | null
    status?: StringFilter<"Invoice"> | string
    dataCriacao?: DateTimeFilter<"Invoice"> | Date | string
    dataVencimento?: DateTimeFilter<"Invoice"> | Date | string
    dataPagamento?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    metodoPagamento?: StringNullableFilter<"Invoice"> | string | null
    desconto?: FloatFilter<"Invoice"> | number
    taxaAdicional?: FloatFilter<"Invoice"> | number
    plano?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    itens?: InvoiceItemListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    numero?: SortOrder
    periodo?: SortOrder
    valor?: SortOrder
    descricao?: SortOrderInput | SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    dataVencimento?: SortOrder
    dataPagamento?: SortOrderInput | SortOrder
    metodoPagamento?: SortOrderInput | SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
    plano?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    itens?: InvoiceItemOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    numero?: string
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    tenantId?: StringFilter<"Invoice"> | string
    periodo?: StringFilter<"Invoice"> | string
    valor?: FloatFilter<"Invoice"> | number
    descricao?: StringNullableFilter<"Invoice"> | string | null
    status?: StringFilter<"Invoice"> | string
    dataCriacao?: DateTimeFilter<"Invoice"> | Date | string
    dataVencimento?: DateTimeFilter<"Invoice"> | Date | string
    dataPagamento?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    metodoPagamento?: StringNullableFilter<"Invoice"> | string | null
    desconto?: FloatFilter<"Invoice"> | number
    taxaAdicional?: FloatFilter<"Invoice"> | number
    plano?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    itens?: InvoiceItemListRelationFilter
  }, "id" | "numero">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    numero?: SortOrder
    periodo?: SortOrder
    valor?: SortOrder
    descricao?: SortOrderInput | SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    dataVencimento?: SortOrder
    dataPagamento?: SortOrderInput | SortOrder
    metodoPagamento?: SortOrderInput | SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
    plano?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invoice"> | string
    tenantId?: StringWithAggregatesFilter<"Invoice"> | string
    numero?: StringWithAggregatesFilter<"Invoice"> | string
    periodo?: StringWithAggregatesFilter<"Invoice"> | string
    valor?: FloatWithAggregatesFilter<"Invoice"> | number
    descricao?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
    status?: StringWithAggregatesFilter<"Invoice"> | string
    dataCriacao?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    dataVencimento?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    dataPagamento?: DateTimeNullableWithAggregatesFilter<"Invoice"> | Date | string | null
    metodoPagamento?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
    desconto?: FloatWithAggregatesFilter<"Invoice"> | number
    taxaAdicional?: FloatWithAggregatesFilter<"Invoice"> | number
    plano?: StringWithAggregatesFilter<"Invoice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
  }

  export type InvoiceItemWhereInput = {
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    id?: IntFilter<"InvoiceItem"> | number
    invoiceId?: StringFilter<"InvoiceItem"> | string
    descricao?: StringFilter<"InvoiceItem"> | string
    quantidade?: IntFilter<"InvoiceItem"> | number
    valorUnitario?: FloatFilter<"InvoiceItem"> | number
    valorTotal?: FloatFilter<"InvoiceItem"> | number
    tipo?: StringFilter<"InvoiceItem"> | string
    createdAt?: DateTimeFilter<"InvoiceItem"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }

  export type InvoiceItemOrderByWithRelationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
    tipo?: SortOrder
    createdAt?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type InvoiceItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    OR?: InvoiceItemWhereInput[]
    NOT?: InvoiceItemWhereInput | InvoiceItemWhereInput[]
    invoiceId?: StringFilter<"InvoiceItem"> | string
    descricao?: StringFilter<"InvoiceItem"> | string
    quantidade?: IntFilter<"InvoiceItem"> | number
    valorUnitario?: FloatFilter<"InvoiceItem"> | number
    valorTotal?: FloatFilter<"InvoiceItem"> | number
    tipo?: StringFilter<"InvoiceItem"> | string
    createdAt?: DateTimeFilter<"InvoiceItem"> | Date | string
    invoice?: XOR<InvoiceScalarRelationFilter, InvoiceWhereInput>
  }, "id">

  export type InvoiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
    tipo?: SortOrder
    createdAt?: SortOrder
    _count?: InvoiceItemCountOrderByAggregateInput
    _avg?: InvoiceItemAvgOrderByAggregateInput
    _max?: InvoiceItemMaxOrderByAggregateInput
    _min?: InvoiceItemMinOrderByAggregateInput
    _sum?: InvoiceItemSumOrderByAggregateInput
  }

  export type InvoiceItemScalarWhereWithAggregatesInput = {
    AND?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    OR?: InvoiceItemScalarWhereWithAggregatesInput[]
    NOT?: InvoiceItemScalarWhereWithAggregatesInput | InvoiceItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InvoiceItem"> | number
    invoiceId?: StringWithAggregatesFilter<"InvoiceItem"> | string
    descricao?: StringWithAggregatesFilter<"InvoiceItem"> | string
    quantidade?: IntWithAggregatesFilter<"InvoiceItem"> | number
    valorUnitario?: FloatWithAggregatesFilter<"InvoiceItem"> | number
    valorTotal?: FloatWithAggregatesFilter<"InvoiceItem"> | number
    tipo?: StringWithAggregatesFilter<"InvoiceItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InvoiceItem"> | Date | string
  }

  export type BillingMetricsWhereInput = {
    AND?: BillingMetricsWhereInput | BillingMetricsWhereInput[]
    OR?: BillingMetricsWhereInput[]
    NOT?: BillingMetricsWhereInput | BillingMetricsWhereInput[]
    id?: IntFilter<"BillingMetrics"> | number
    periodo?: StringFilter<"BillingMetrics"> | string
    mrr?: FloatFilter<"BillingMetrics"> | number
    arr?: FloatFilter<"BillingMetrics"> | number
    churnRate?: FloatNullableFilter<"BillingMetrics"> | number | null
    arpu?: FloatNullableFilter<"BillingMetrics"> | number | null
    ltv?: FloatNullableFilter<"BillingMetrics"> | number | null
    cac?: FloatNullableFilter<"BillingMetrics"> | number | null
    receitaMensal?: FloatFilter<"BillingMetrics"> | number
    faturasPendentes?: IntFilter<"BillingMetrics"> | number
    valorPendente?: FloatFilter<"BillingMetrics"> | number
    faturasVencidas?: IntFilter<"BillingMetrics"> | number
    valorVencido?: FloatFilter<"BillingMetrics"> | number
    taxaCobranca?: FloatNullableFilter<"BillingMetrics"> | number | null
    createdAt?: DateTimeFilter<"BillingMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"BillingMetrics"> | Date | string
  }

  export type BillingMetricsOrderByWithRelationInput = {
    id?: SortOrder
    periodo?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrderInput | SortOrder
    arpu?: SortOrderInput | SortOrder
    ltv?: SortOrderInput | SortOrder
    cac?: SortOrderInput | SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    periodo?: string
    AND?: BillingMetricsWhereInput | BillingMetricsWhereInput[]
    OR?: BillingMetricsWhereInput[]
    NOT?: BillingMetricsWhereInput | BillingMetricsWhereInput[]
    mrr?: FloatFilter<"BillingMetrics"> | number
    arr?: FloatFilter<"BillingMetrics"> | number
    churnRate?: FloatNullableFilter<"BillingMetrics"> | number | null
    arpu?: FloatNullableFilter<"BillingMetrics"> | number | null
    ltv?: FloatNullableFilter<"BillingMetrics"> | number | null
    cac?: FloatNullableFilter<"BillingMetrics"> | number | null
    receitaMensal?: FloatFilter<"BillingMetrics"> | number
    faturasPendentes?: IntFilter<"BillingMetrics"> | number
    valorPendente?: FloatFilter<"BillingMetrics"> | number
    faturasVencidas?: IntFilter<"BillingMetrics"> | number
    valorVencido?: FloatFilter<"BillingMetrics"> | number
    taxaCobranca?: FloatNullableFilter<"BillingMetrics"> | number | null
    createdAt?: DateTimeFilter<"BillingMetrics"> | Date | string
    updatedAt?: DateTimeFilter<"BillingMetrics"> | Date | string
  }, "id" | "periodo">

  export type BillingMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    periodo?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrderInput | SortOrder
    arpu?: SortOrderInput | SortOrder
    ltv?: SortOrderInput | SortOrder
    cac?: SortOrderInput | SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BillingMetricsCountOrderByAggregateInput
    _avg?: BillingMetricsAvgOrderByAggregateInput
    _max?: BillingMetricsMaxOrderByAggregateInput
    _min?: BillingMetricsMinOrderByAggregateInput
    _sum?: BillingMetricsSumOrderByAggregateInput
  }

  export type BillingMetricsScalarWhereWithAggregatesInput = {
    AND?: BillingMetricsScalarWhereWithAggregatesInput | BillingMetricsScalarWhereWithAggregatesInput[]
    OR?: BillingMetricsScalarWhereWithAggregatesInput[]
    NOT?: BillingMetricsScalarWhereWithAggregatesInput | BillingMetricsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BillingMetrics"> | number
    periodo?: StringWithAggregatesFilter<"BillingMetrics"> | string
    mrr?: FloatWithAggregatesFilter<"BillingMetrics"> | number
    arr?: FloatWithAggregatesFilter<"BillingMetrics"> | number
    churnRate?: FloatNullableWithAggregatesFilter<"BillingMetrics"> | number | null
    arpu?: FloatNullableWithAggregatesFilter<"BillingMetrics"> | number | null
    ltv?: FloatNullableWithAggregatesFilter<"BillingMetrics"> | number | null
    cac?: FloatNullableWithAggregatesFilter<"BillingMetrics"> | number | null
    receitaMensal?: FloatWithAggregatesFilter<"BillingMetrics"> | number
    faturasPendentes?: IntWithAggregatesFilter<"BillingMetrics"> | number
    valorPendente?: FloatWithAggregatesFilter<"BillingMetrics"> | number
    faturasVencidas?: IntWithAggregatesFilter<"BillingMetrics"> | number
    valorVencido?: FloatWithAggregatesFilter<"BillingMetrics"> | number
    taxaCobranca?: FloatNullableWithAggregatesFilter<"BillingMetrics"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"BillingMetrics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BillingMetrics"> | Date | string
  }

  export type AnalyticsUserSessionWhereInput = {
    AND?: AnalyticsUserSessionWhereInput | AnalyticsUserSessionWhereInput[]
    OR?: AnalyticsUserSessionWhereInput[]
    NOT?: AnalyticsUserSessionWhereInput | AnalyticsUserSessionWhereInput[]
    id?: StringFilter<"AnalyticsUserSession"> | string
    userId?: StringFilter<"AnalyticsUserSession"> | string
    tenantId?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    startedAt?: DateTimeFilter<"AnalyticsUserSession"> | Date | string
    endedAt?: DateTimeNullableFilter<"AnalyticsUserSession"> | Date | string | null
    durationMinutes?: IntNullableFilter<"AnalyticsUserSession"> | number | null
    pagesVisited?: IntFilter<"AnalyticsUserSession"> | number
    ipAddress?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    userAgent?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    createdAt?: DateTimeFilter<"AnalyticsUserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type AnalyticsUserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    pagesVisited?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type AnalyticsUserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnalyticsUserSessionWhereInput | AnalyticsUserSessionWhereInput[]
    OR?: AnalyticsUserSessionWhereInput[]
    NOT?: AnalyticsUserSessionWhereInput | AnalyticsUserSessionWhereInput[]
    userId?: StringFilter<"AnalyticsUserSession"> | string
    tenantId?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    startedAt?: DateTimeFilter<"AnalyticsUserSession"> | Date | string
    endedAt?: DateTimeNullableFilter<"AnalyticsUserSession"> | Date | string | null
    durationMinutes?: IntNullableFilter<"AnalyticsUserSession"> | number | null
    pagesVisited?: IntFilter<"AnalyticsUserSession"> | number
    ipAddress?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    userAgent?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    createdAt?: DateTimeFilter<"AnalyticsUserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id">

  export type AnalyticsUserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    durationMinutes?: SortOrderInput | SortOrder
    pagesVisited?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AnalyticsUserSessionCountOrderByAggregateInput
    _avg?: AnalyticsUserSessionAvgOrderByAggregateInput
    _max?: AnalyticsUserSessionMaxOrderByAggregateInput
    _min?: AnalyticsUserSessionMinOrderByAggregateInput
    _sum?: AnalyticsUserSessionSumOrderByAggregateInput
  }

  export type AnalyticsUserSessionScalarWhereWithAggregatesInput = {
    AND?: AnalyticsUserSessionScalarWhereWithAggregatesInput | AnalyticsUserSessionScalarWhereWithAggregatesInput[]
    OR?: AnalyticsUserSessionScalarWhereWithAggregatesInput[]
    NOT?: AnalyticsUserSessionScalarWhereWithAggregatesInput | AnalyticsUserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnalyticsUserSession"> | string
    userId?: StringWithAggregatesFilter<"AnalyticsUserSession"> | string
    tenantId?: StringNullableWithAggregatesFilter<"AnalyticsUserSession"> | string | null
    startedAt?: DateTimeWithAggregatesFilter<"AnalyticsUserSession"> | Date | string
    endedAt?: DateTimeNullableWithAggregatesFilter<"AnalyticsUserSession"> | Date | string | null
    durationMinutes?: IntNullableWithAggregatesFilter<"AnalyticsUserSession"> | number | null
    pagesVisited?: IntWithAggregatesFilter<"AnalyticsUserSession"> | number
    ipAddress?: StringNullableWithAggregatesFilter<"AnalyticsUserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AnalyticsUserSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AnalyticsUserSession"> | Date | string
  }

  export type FeatureUsageWhereInput = {
    AND?: FeatureUsageWhereInput | FeatureUsageWhereInput[]
    OR?: FeatureUsageWhereInput[]
    NOT?: FeatureUsageWhereInput | FeatureUsageWhereInput[]
    id?: IntFilter<"FeatureUsage"> | number
    userId?: StringFilter<"FeatureUsage"> | string
    tenantId?: StringNullableFilter<"FeatureUsage"> | string | null
    featureName?: StringFilter<"FeatureUsage"> | string
    featureCategory?: StringFilter<"FeatureUsage"> | string
    usageCount?: IntFilter<"FeatureUsage"> | number
    totalTimeMinutes?: FloatNullableFilter<"FeatureUsage"> | number | null
    date?: DateTimeFilter<"FeatureUsage"> | Date | string
    createdAt?: DateTimeFilter<"FeatureUsage"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type FeatureUsageOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    featureName?: SortOrder
    featureCategory?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type FeatureUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeatureUsageWhereInput | FeatureUsageWhereInput[]
    OR?: FeatureUsageWhereInput[]
    NOT?: FeatureUsageWhereInput | FeatureUsageWhereInput[]
    userId?: StringFilter<"FeatureUsage"> | string
    tenantId?: StringNullableFilter<"FeatureUsage"> | string | null
    featureName?: StringFilter<"FeatureUsage"> | string
    featureCategory?: StringFilter<"FeatureUsage"> | string
    usageCount?: IntFilter<"FeatureUsage"> | number
    totalTimeMinutes?: FloatNullableFilter<"FeatureUsage"> | number | null
    date?: DateTimeFilter<"FeatureUsage"> | Date | string
    createdAt?: DateTimeFilter<"FeatureUsage"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id">

  export type FeatureUsageOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    featureName?: SortOrder
    featureCategory?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    _count?: FeatureUsageCountOrderByAggregateInput
    _avg?: FeatureUsageAvgOrderByAggregateInput
    _max?: FeatureUsageMaxOrderByAggregateInput
    _min?: FeatureUsageMinOrderByAggregateInput
    _sum?: FeatureUsageSumOrderByAggregateInput
  }

  export type FeatureUsageScalarWhereWithAggregatesInput = {
    AND?: FeatureUsageScalarWhereWithAggregatesInput | FeatureUsageScalarWhereWithAggregatesInput[]
    OR?: FeatureUsageScalarWhereWithAggregatesInput[]
    NOT?: FeatureUsageScalarWhereWithAggregatesInput | FeatureUsageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeatureUsage"> | number
    userId?: StringWithAggregatesFilter<"FeatureUsage"> | string
    tenantId?: StringNullableWithAggregatesFilter<"FeatureUsage"> | string | null
    featureName?: StringWithAggregatesFilter<"FeatureUsage"> | string
    featureCategory?: StringWithAggregatesFilter<"FeatureUsage"> | string
    usageCount?: IntWithAggregatesFilter<"FeatureUsage"> | number
    totalTimeMinutes?: FloatNullableWithAggregatesFilter<"FeatureUsage"> | number | null
    date?: DateTimeWithAggregatesFilter<"FeatureUsage"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"FeatureUsage"> | Date | string
  }

  export type SystemMetricsWhereInput = {
    AND?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    OR?: SystemMetricsWhereInput[]
    NOT?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    id?: IntFilter<"SystemMetrics"> | number
    metricName?: StringFilter<"SystemMetrics"> | string
    metricValue?: FloatFilter<"SystemMetrics"> | number
    metricUnit?: StringNullableFilter<"SystemMetrics"> | string | null
    recordedAt?: DateTimeFilter<"SystemMetrics"> | Date | string
  }

  export type SystemMetricsOrderByWithRelationInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
  }

  export type SystemMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    OR?: SystemMetricsWhereInput[]
    NOT?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    metricName?: StringFilter<"SystemMetrics"> | string
    metricValue?: FloatFilter<"SystemMetrics"> | number
    metricUnit?: StringNullableFilter<"SystemMetrics"> | string | null
    recordedAt?: DateTimeFilter<"SystemMetrics"> | Date | string
  }, "id">

  export type SystemMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
    _count?: SystemMetricsCountOrderByAggregateInput
    _avg?: SystemMetricsAvgOrderByAggregateInput
    _max?: SystemMetricsMaxOrderByAggregateInput
    _min?: SystemMetricsMinOrderByAggregateInput
    _sum?: SystemMetricsSumOrderByAggregateInput
  }

  export type SystemMetricsScalarWhereWithAggregatesInput = {
    AND?: SystemMetricsScalarWhereWithAggregatesInput | SystemMetricsScalarWhereWithAggregatesInput[]
    OR?: SystemMetricsScalarWhereWithAggregatesInput[]
    NOT?: SystemMetricsScalarWhereWithAggregatesInput | SystemMetricsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemMetrics"> | number
    metricName?: StringWithAggregatesFilter<"SystemMetrics"> | string
    metricValue?: FloatWithAggregatesFilter<"SystemMetrics"> | number
    metricUnit?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    recordedAt?: DateTimeWithAggregatesFilter<"SystemMetrics"> | Date | string
  }

  export type PageViewsWhereInput = {
    AND?: PageViewsWhereInput | PageViewsWhereInput[]
    OR?: PageViewsWhereInput[]
    NOT?: PageViewsWhereInput | PageViewsWhereInput[]
    id?: IntFilter<"PageViews"> | number
    userId?: StringFilter<"PageViews"> | string
    tenantId?: StringNullableFilter<"PageViews"> | string | null
    pagePath?: StringFilter<"PageViews"> | string
    pageTitle?: StringNullableFilter<"PageViews"> | string | null
    timeSpent?: IntNullableFilter<"PageViews"> | number | null
    sessionId?: StringNullableFilter<"PageViews"> | string | null
    referrer?: StringNullableFilter<"PageViews"> | string | null
    userAgent?: StringNullableFilter<"PageViews"> | string | null
    ipAddress?: StringNullableFilter<"PageViews"> | string | null
    createdAt?: DateTimeFilter<"PageViews"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type PageViewsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    pagePath?: SortOrder
    pageTitle?: SortOrderInput | SortOrder
    timeSpent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    referrer?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PageViewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PageViewsWhereInput | PageViewsWhereInput[]
    OR?: PageViewsWhereInput[]
    NOT?: PageViewsWhereInput | PageViewsWhereInput[]
    userId?: StringFilter<"PageViews"> | string
    tenantId?: StringNullableFilter<"PageViews"> | string | null
    pagePath?: StringFilter<"PageViews"> | string
    pageTitle?: StringNullableFilter<"PageViews"> | string | null
    timeSpent?: IntNullableFilter<"PageViews"> | number | null
    sessionId?: StringNullableFilter<"PageViews"> | string | null
    referrer?: StringNullableFilter<"PageViews"> | string | null
    userAgent?: StringNullableFilter<"PageViews"> | string | null
    ipAddress?: StringNullableFilter<"PageViews"> | string | null
    createdAt?: DateTimeFilter<"PageViews"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id">

  export type PageViewsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    pagePath?: SortOrder
    pageTitle?: SortOrderInput | SortOrder
    timeSpent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    referrer?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PageViewsCountOrderByAggregateInput
    _avg?: PageViewsAvgOrderByAggregateInput
    _max?: PageViewsMaxOrderByAggregateInput
    _min?: PageViewsMinOrderByAggregateInput
    _sum?: PageViewsSumOrderByAggregateInput
  }

  export type PageViewsScalarWhereWithAggregatesInput = {
    AND?: PageViewsScalarWhereWithAggregatesInput | PageViewsScalarWhereWithAggregatesInput[]
    OR?: PageViewsScalarWhereWithAggregatesInput[]
    NOT?: PageViewsScalarWhereWithAggregatesInput | PageViewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PageViews"> | number
    userId?: StringWithAggregatesFilter<"PageViews"> | string
    tenantId?: StringNullableWithAggregatesFilter<"PageViews"> | string | null
    pagePath?: StringWithAggregatesFilter<"PageViews"> | string
    pageTitle?: StringNullableWithAggregatesFilter<"PageViews"> | string | null
    timeSpent?: IntNullableWithAggregatesFilter<"PageViews"> | number | null
    sessionId?: StringNullableWithAggregatesFilter<"PageViews"> | string | null
    referrer?: StringNullableWithAggregatesFilter<"PageViews"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"PageViews"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"PageViews"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PageViews"> | Date | string
  }

  export type ModuleAnalyticsWhereInput = {
    AND?: ModuleAnalyticsWhereInput | ModuleAnalyticsWhereInput[]
    OR?: ModuleAnalyticsWhereInput[]
    NOT?: ModuleAnalyticsWhereInput | ModuleAnalyticsWhereInput[]
    id?: IntFilter<"ModuleAnalytics"> | number
    tenantId?: StringNullableFilter<"ModuleAnalytics"> | string | null
    moduleName?: StringFilter<"ModuleAnalytics"> | string
    totalUsers?: IntFilter<"ModuleAnalytics"> | number
    activeUsers?: IntFilter<"ModuleAnalytics"> | number
    totalSessions?: IntFilter<"ModuleAnalytics"> | number
    totalPageViews?: IntFilter<"ModuleAnalytics"> | number
    avgSessionTime?: FloatNullableFilter<"ModuleAnalytics"> | number | null
    popularFeature?: StringNullableFilter<"ModuleAnalytics"> | string | null
    period?: StringFilter<"ModuleAnalytics"> | string
    createdAt?: DateTimeFilter<"ModuleAnalytics"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type ModuleAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    moduleName?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrderInput | SortOrder
    popularFeature?: SortOrderInput | SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type ModuleAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tenantId_moduleName_period?: ModuleAnalyticsTenantIdModuleNamePeriodCompoundUniqueInput
    AND?: ModuleAnalyticsWhereInput | ModuleAnalyticsWhereInput[]
    OR?: ModuleAnalyticsWhereInput[]
    NOT?: ModuleAnalyticsWhereInput | ModuleAnalyticsWhereInput[]
    tenantId?: StringNullableFilter<"ModuleAnalytics"> | string | null
    moduleName?: StringFilter<"ModuleAnalytics"> | string
    totalUsers?: IntFilter<"ModuleAnalytics"> | number
    activeUsers?: IntFilter<"ModuleAnalytics"> | number
    totalSessions?: IntFilter<"ModuleAnalytics"> | number
    totalPageViews?: IntFilter<"ModuleAnalytics"> | number
    avgSessionTime?: FloatNullableFilter<"ModuleAnalytics"> | number | null
    popularFeature?: StringNullableFilter<"ModuleAnalytics"> | string | null
    period?: StringFilter<"ModuleAnalytics"> | string
    createdAt?: DateTimeFilter<"ModuleAnalytics"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id" | "tenantId_moduleName_period">

  export type ModuleAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    moduleName?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrderInput | SortOrder
    popularFeature?: SortOrderInput | SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    _count?: ModuleAnalyticsCountOrderByAggregateInput
    _avg?: ModuleAnalyticsAvgOrderByAggregateInput
    _max?: ModuleAnalyticsMaxOrderByAggregateInput
    _min?: ModuleAnalyticsMinOrderByAggregateInput
    _sum?: ModuleAnalyticsSumOrderByAggregateInput
  }

  export type ModuleAnalyticsScalarWhereWithAggregatesInput = {
    AND?: ModuleAnalyticsScalarWhereWithAggregatesInput | ModuleAnalyticsScalarWhereWithAggregatesInput[]
    OR?: ModuleAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: ModuleAnalyticsScalarWhereWithAggregatesInput | ModuleAnalyticsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ModuleAnalytics"> | number
    tenantId?: StringNullableWithAggregatesFilter<"ModuleAnalytics"> | string | null
    moduleName?: StringWithAggregatesFilter<"ModuleAnalytics"> | string
    totalUsers?: IntWithAggregatesFilter<"ModuleAnalytics"> | number
    activeUsers?: IntWithAggregatesFilter<"ModuleAnalytics"> | number
    totalSessions?: IntWithAggregatesFilter<"ModuleAnalytics"> | number
    totalPageViews?: IntWithAggregatesFilter<"ModuleAnalytics"> | number
    avgSessionTime?: FloatNullableWithAggregatesFilter<"ModuleAnalytics"> | number | null
    popularFeature?: StringNullableWithAggregatesFilter<"ModuleAnalytics"> | string | null
    period?: StringWithAggregatesFilter<"ModuleAnalytics"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ModuleAnalytics"> | Date | string
  }

  export type GeographicDataWhereInput = {
    AND?: GeographicDataWhereInput | GeographicDataWhereInput[]
    OR?: GeographicDataWhereInput[]
    NOT?: GeographicDataWhereInput | GeographicDataWhereInput[]
    id?: IntFilter<"GeographicData"> | number
    tenantId?: StringNullableFilter<"GeographicData"> | string | null
    cidade?: StringFilter<"GeographicData"> | string
    estado?: StringFilter<"GeographicData"> | string
    regiao?: StringFilter<"GeographicData"> | string
    populacao?: IntNullableFilter<"GeographicData"> | number | null
    totalUsuarios?: IntFilter<"GeographicData"> | number
    usuariosAtivos?: IntFilter<"GeographicData"> | number
    protocolosMes?: IntFilter<"GeographicData"> | number
    satisfacaoMedia?: FloatNullableFilter<"GeographicData"> | number | null
    period?: StringFilter<"GeographicData"> | string
    createdAt?: DateTimeFilter<"GeographicData"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type GeographicDataOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    regiao?: SortOrder
    populacao?: SortOrderInput | SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrderInput | SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type GeographicDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cidade_estado_period?: GeographicDataCidadeEstadoPeriodCompoundUniqueInput
    AND?: GeographicDataWhereInput | GeographicDataWhereInput[]
    OR?: GeographicDataWhereInput[]
    NOT?: GeographicDataWhereInput | GeographicDataWhereInput[]
    tenantId?: StringNullableFilter<"GeographicData"> | string | null
    cidade?: StringFilter<"GeographicData"> | string
    estado?: StringFilter<"GeographicData"> | string
    regiao?: StringFilter<"GeographicData"> | string
    populacao?: IntNullableFilter<"GeographicData"> | number | null
    totalUsuarios?: IntFilter<"GeographicData"> | number
    usuariosAtivos?: IntFilter<"GeographicData"> | number
    protocolosMes?: IntFilter<"GeographicData"> | number
    satisfacaoMedia?: FloatNullableFilter<"GeographicData"> | number | null
    period?: StringFilter<"GeographicData"> | string
    createdAt?: DateTimeFilter<"GeographicData"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id" | "cidade_estado_period">

  export type GeographicDataOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    regiao?: SortOrder
    populacao?: SortOrderInput | SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrderInput | SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    _count?: GeographicDataCountOrderByAggregateInput
    _avg?: GeographicDataAvgOrderByAggregateInput
    _max?: GeographicDataMaxOrderByAggregateInput
    _min?: GeographicDataMinOrderByAggregateInput
    _sum?: GeographicDataSumOrderByAggregateInput
  }

  export type GeographicDataScalarWhereWithAggregatesInput = {
    AND?: GeographicDataScalarWhereWithAggregatesInput | GeographicDataScalarWhereWithAggregatesInput[]
    OR?: GeographicDataScalarWhereWithAggregatesInput[]
    NOT?: GeographicDataScalarWhereWithAggregatesInput | GeographicDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GeographicData"> | number
    tenantId?: StringNullableWithAggregatesFilter<"GeographicData"> | string | null
    cidade?: StringWithAggregatesFilter<"GeographicData"> | string
    estado?: StringWithAggregatesFilter<"GeographicData"> | string
    regiao?: StringWithAggregatesFilter<"GeographicData"> | string
    populacao?: IntNullableWithAggregatesFilter<"GeographicData"> | number | null
    totalUsuarios?: IntWithAggregatesFilter<"GeographicData"> | number
    usuariosAtivos?: IntWithAggregatesFilter<"GeographicData"> | number
    protocolosMes?: IntWithAggregatesFilter<"GeographicData"> | number
    satisfacaoMedia?: FloatNullableWithAggregatesFilter<"GeographicData"> | number | null
    period?: StringWithAggregatesFilter<"GeographicData"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GeographicData"> | Date | string
  }

  export type AutomatedReportsWhereInput = {
    AND?: AutomatedReportsWhereInput | AutomatedReportsWhereInput[]
    OR?: AutomatedReportsWhereInput[]
    NOT?: AutomatedReportsWhereInput | AutomatedReportsWhereInput[]
    id?: IntFilter<"AutomatedReports"> | number
    name?: StringFilter<"AutomatedReports"> | string
    description?: StringNullableFilter<"AutomatedReports"> | string | null
    reportType?: StringFilter<"AutomatedReports"> | string
    frequency?: StringFilter<"AutomatedReports"> | string
    isActive?: BoolFilter<"AutomatedReports"> | boolean
    config?: StringFilter<"AutomatedReports"> | string
    template?: StringNullableFilter<"AutomatedReports"> | string | null
    createdBy?: StringFilter<"AutomatedReports"> | string
    createdAt?: DateTimeFilter<"AutomatedReports"> | Date | string
    updatedAt?: DateTimeFilter<"AutomatedReports"> | Date | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    schedules?: ReportSchedulesListRelationFilter
    history?: ReportHistoryListRelationFilter
  }

  export type AutomatedReportsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    config?: SortOrder
    template?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    schedules?: ReportSchedulesOrderByRelationAggregateInput
    history?: ReportHistoryOrderByRelationAggregateInput
  }

  export type AutomatedReportsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AutomatedReportsWhereInput | AutomatedReportsWhereInput[]
    OR?: AutomatedReportsWhereInput[]
    NOT?: AutomatedReportsWhereInput | AutomatedReportsWhereInput[]
    name?: StringFilter<"AutomatedReports"> | string
    description?: StringNullableFilter<"AutomatedReports"> | string | null
    reportType?: StringFilter<"AutomatedReports"> | string
    frequency?: StringFilter<"AutomatedReports"> | string
    isActive?: BoolFilter<"AutomatedReports"> | boolean
    config?: StringFilter<"AutomatedReports"> | string
    template?: StringNullableFilter<"AutomatedReports"> | string | null
    createdBy?: StringFilter<"AutomatedReports"> | string
    createdAt?: DateTimeFilter<"AutomatedReports"> | Date | string
    updatedAt?: DateTimeFilter<"AutomatedReports"> | Date | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    schedules?: ReportSchedulesListRelationFilter
    history?: ReportHistoryListRelationFilter
  }, "id">

  export type AutomatedReportsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    config?: SortOrder
    template?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AutomatedReportsCountOrderByAggregateInput
    _avg?: AutomatedReportsAvgOrderByAggregateInput
    _max?: AutomatedReportsMaxOrderByAggregateInput
    _min?: AutomatedReportsMinOrderByAggregateInput
    _sum?: AutomatedReportsSumOrderByAggregateInput
  }

  export type AutomatedReportsScalarWhereWithAggregatesInput = {
    AND?: AutomatedReportsScalarWhereWithAggregatesInput | AutomatedReportsScalarWhereWithAggregatesInput[]
    OR?: AutomatedReportsScalarWhereWithAggregatesInput[]
    NOT?: AutomatedReportsScalarWhereWithAggregatesInput | AutomatedReportsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AutomatedReports"> | number
    name?: StringWithAggregatesFilter<"AutomatedReports"> | string
    description?: StringNullableWithAggregatesFilter<"AutomatedReports"> | string | null
    reportType?: StringWithAggregatesFilter<"AutomatedReports"> | string
    frequency?: StringWithAggregatesFilter<"AutomatedReports"> | string
    isActive?: BoolWithAggregatesFilter<"AutomatedReports"> | boolean
    config?: StringWithAggregatesFilter<"AutomatedReports"> | string
    template?: StringNullableWithAggregatesFilter<"AutomatedReports"> | string | null
    createdBy?: StringWithAggregatesFilter<"AutomatedReports"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AutomatedReports"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AutomatedReports"> | Date | string
  }

  export type ReportSchedulesWhereInput = {
    AND?: ReportSchedulesWhereInput | ReportSchedulesWhereInput[]
    OR?: ReportSchedulesWhereInput[]
    NOT?: ReportSchedulesWhereInput | ReportSchedulesWhereInput[]
    id?: IntFilter<"ReportSchedules"> | number
    reportId?: IntFilter<"ReportSchedules"> | number
    cronExpression?: StringFilter<"ReportSchedules"> | string
    timezone?: StringFilter<"ReportSchedules"> | string
    nextRun?: DateTimeFilter<"ReportSchedules"> | Date | string
    lastRun?: DateTimeNullableFilter<"ReportSchedules"> | Date | string | null
    isActive?: BoolFilter<"ReportSchedules"> | boolean
    createdAt?: DateTimeFilter<"ReportSchedules"> | Date | string
    report?: XOR<AutomatedReportsScalarRelationFilter, AutomatedReportsWhereInput>
    recipients?: ReportRecipientsListRelationFilter
  }

  export type ReportSchedulesOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    report?: AutomatedReportsOrderByWithRelationInput
    recipients?: ReportRecipientsOrderByRelationAggregateInput
  }

  export type ReportSchedulesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportSchedulesWhereInput | ReportSchedulesWhereInput[]
    OR?: ReportSchedulesWhereInput[]
    NOT?: ReportSchedulesWhereInput | ReportSchedulesWhereInput[]
    reportId?: IntFilter<"ReportSchedules"> | number
    cronExpression?: StringFilter<"ReportSchedules"> | string
    timezone?: StringFilter<"ReportSchedules"> | string
    nextRun?: DateTimeFilter<"ReportSchedules"> | Date | string
    lastRun?: DateTimeNullableFilter<"ReportSchedules"> | Date | string | null
    isActive?: BoolFilter<"ReportSchedules"> | boolean
    createdAt?: DateTimeFilter<"ReportSchedules"> | Date | string
    report?: XOR<AutomatedReportsScalarRelationFilter, AutomatedReportsWhereInput>
    recipients?: ReportRecipientsListRelationFilter
  }, "id">

  export type ReportSchedulesOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: ReportSchedulesCountOrderByAggregateInput
    _avg?: ReportSchedulesAvgOrderByAggregateInput
    _max?: ReportSchedulesMaxOrderByAggregateInput
    _min?: ReportSchedulesMinOrderByAggregateInput
    _sum?: ReportSchedulesSumOrderByAggregateInput
  }

  export type ReportSchedulesScalarWhereWithAggregatesInput = {
    AND?: ReportSchedulesScalarWhereWithAggregatesInput | ReportSchedulesScalarWhereWithAggregatesInput[]
    OR?: ReportSchedulesScalarWhereWithAggregatesInput[]
    NOT?: ReportSchedulesScalarWhereWithAggregatesInput | ReportSchedulesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportSchedules"> | number
    reportId?: IntWithAggregatesFilter<"ReportSchedules"> | number
    cronExpression?: StringWithAggregatesFilter<"ReportSchedules"> | string
    timezone?: StringWithAggregatesFilter<"ReportSchedules"> | string
    nextRun?: DateTimeWithAggregatesFilter<"ReportSchedules"> | Date | string
    lastRun?: DateTimeNullableWithAggregatesFilter<"ReportSchedules"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"ReportSchedules"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ReportSchedules"> | Date | string
  }

  export type ReportRecipientsWhereInput = {
    AND?: ReportRecipientsWhereInput | ReportRecipientsWhereInput[]
    OR?: ReportRecipientsWhereInput[]
    NOT?: ReportRecipientsWhereInput | ReportRecipientsWhereInput[]
    id?: IntFilter<"ReportRecipients"> | number
    scheduleId?: IntFilter<"ReportRecipients"> | number
    email?: StringFilter<"ReportRecipients"> | string
    name?: StringNullableFilter<"ReportRecipients"> | string | null
    isActive?: BoolFilter<"ReportRecipients"> | boolean
    createdAt?: DateTimeFilter<"ReportRecipients"> | Date | string
    schedule?: XOR<ReportSchedulesScalarRelationFilter, ReportSchedulesWhereInput>
  }

  export type ReportRecipientsOrderByWithRelationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    schedule?: ReportSchedulesOrderByWithRelationInput
  }

  export type ReportRecipientsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportRecipientsWhereInput | ReportRecipientsWhereInput[]
    OR?: ReportRecipientsWhereInput[]
    NOT?: ReportRecipientsWhereInput | ReportRecipientsWhereInput[]
    scheduleId?: IntFilter<"ReportRecipients"> | number
    email?: StringFilter<"ReportRecipients"> | string
    name?: StringNullableFilter<"ReportRecipients"> | string | null
    isActive?: BoolFilter<"ReportRecipients"> | boolean
    createdAt?: DateTimeFilter<"ReportRecipients"> | Date | string
    schedule?: XOR<ReportSchedulesScalarRelationFilter, ReportSchedulesWhereInput>
  }, "id">

  export type ReportRecipientsOrderByWithAggregationInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: ReportRecipientsCountOrderByAggregateInput
    _avg?: ReportRecipientsAvgOrderByAggregateInput
    _max?: ReportRecipientsMaxOrderByAggregateInput
    _min?: ReportRecipientsMinOrderByAggregateInput
    _sum?: ReportRecipientsSumOrderByAggregateInput
  }

  export type ReportRecipientsScalarWhereWithAggregatesInput = {
    AND?: ReportRecipientsScalarWhereWithAggregatesInput | ReportRecipientsScalarWhereWithAggregatesInput[]
    OR?: ReportRecipientsScalarWhereWithAggregatesInput[]
    NOT?: ReportRecipientsScalarWhereWithAggregatesInput | ReportRecipientsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportRecipients"> | number
    scheduleId?: IntWithAggregatesFilter<"ReportRecipients"> | number
    email?: StringWithAggregatesFilter<"ReportRecipients"> | string
    name?: StringNullableWithAggregatesFilter<"ReportRecipients"> | string | null
    isActive?: BoolWithAggregatesFilter<"ReportRecipients"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ReportRecipients"> | Date | string
  }

  export type ReportHistoryWhereInput = {
    AND?: ReportHistoryWhereInput | ReportHistoryWhereInput[]
    OR?: ReportHistoryWhereInput[]
    NOT?: ReportHistoryWhereInput | ReportHistoryWhereInput[]
    id?: IntFilter<"ReportHistory"> | number
    reportId?: IntFilter<"ReportHistory"> | number
    generatedAt?: DateTimeFilter<"ReportHistory"> | Date | string
    status?: StringFilter<"ReportHistory"> | string
    filePath?: StringNullableFilter<"ReportHistory"> | string | null
    fileSize?: IntNullableFilter<"ReportHistory"> | number | null
    executionTime?: IntNullableFilter<"ReportHistory"> | number | null
    errorMessage?: StringNullableFilter<"ReportHistory"> | string | null
    sentTo?: StringNullableFilter<"ReportHistory"> | string | null
    period?: StringNullableFilter<"ReportHistory"> | string | null
    report?: XOR<AutomatedReportsScalarRelationFilter, AutomatedReportsWhereInput>
  }

  export type ReportHistoryOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    filePath?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    sentTo?: SortOrderInput | SortOrder
    period?: SortOrderInput | SortOrder
    report?: AutomatedReportsOrderByWithRelationInput
  }

  export type ReportHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportHistoryWhereInput | ReportHistoryWhereInput[]
    OR?: ReportHistoryWhereInput[]
    NOT?: ReportHistoryWhereInput | ReportHistoryWhereInput[]
    reportId?: IntFilter<"ReportHistory"> | number
    generatedAt?: DateTimeFilter<"ReportHistory"> | Date | string
    status?: StringFilter<"ReportHistory"> | string
    filePath?: StringNullableFilter<"ReportHistory"> | string | null
    fileSize?: IntNullableFilter<"ReportHistory"> | number | null
    executionTime?: IntNullableFilter<"ReportHistory"> | number | null
    errorMessage?: StringNullableFilter<"ReportHistory"> | string | null
    sentTo?: StringNullableFilter<"ReportHistory"> | string | null
    period?: StringNullableFilter<"ReportHistory"> | string | null
    report?: XOR<AutomatedReportsScalarRelationFilter, AutomatedReportsWhereInput>
  }, "id">

  export type ReportHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    filePath?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    sentTo?: SortOrderInput | SortOrder
    period?: SortOrderInput | SortOrder
    _count?: ReportHistoryCountOrderByAggregateInput
    _avg?: ReportHistoryAvgOrderByAggregateInput
    _max?: ReportHistoryMaxOrderByAggregateInput
    _min?: ReportHistoryMinOrderByAggregateInput
    _sum?: ReportHistorySumOrderByAggregateInput
  }

  export type ReportHistoryScalarWhereWithAggregatesInput = {
    AND?: ReportHistoryScalarWhereWithAggregatesInput | ReportHistoryScalarWhereWithAggregatesInput[]
    OR?: ReportHistoryScalarWhereWithAggregatesInput[]
    NOT?: ReportHistoryScalarWhereWithAggregatesInput | ReportHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportHistory"> | number
    reportId?: IntWithAggregatesFilter<"ReportHistory"> | number
    generatedAt?: DateTimeWithAggregatesFilter<"ReportHistory"> | Date | string
    status?: StringWithAggregatesFilter<"ReportHistory"> | string
    filePath?: StringNullableWithAggregatesFilter<"ReportHistory"> | string | null
    fileSize?: IntNullableWithAggregatesFilter<"ReportHistory"> | number | null
    executionTime?: IntNullableWithAggregatesFilter<"ReportHistory"> | number | null
    errorMessage?: StringNullableWithAggregatesFilter<"ReportHistory"> | string | null
    sentTo?: StringNullableWithAggregatesFilter<"ReportHistory"> | string | null
    period?: StringNullableWithAggregatesFilter<"ReportHistory"> | string | null
  }

  export type SatisfactionSurveysWhereInput = {
    AND?: SatisfactionSurveysWhereInput | SatisfactionSurveysWhereInput[]
    OR?: SatisfactionSurveysWhereInput[]
    NOT?: SatisfactionSurveysWhereInput | SatisfactionSurveysWhereInput[]
    id?: IntFilter<"SatisfactionSurveys"> | number
    title?: StringFilter<"SatisfactionSurveys"> | string
    description?: StringNullableFilter<"SatisfactionSurveys"> | string | null
    tenantId?: StringNullableFilter<"SatisfactionSurveys"> | string | null
    surveyType?: StringFilter<"SatisfactionSurveys"> | string
    questions?: StringFilter<"SatisfactionSurveys"> | string
    isActive?: BoolFilter<"SatisfactionSurveys"> | boolean
    startDate?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    endDate?: DateTimeNullableFilter<"SatisfactionSurveys"> | Date | string | null
    targetAudience?: StringFilter<"SatisfactionSurveys"> | string
    createdBy?: StringFilter<"SatisfactionSurveys"> | string
    createdAt?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    updatedAt?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    npsResponses?: NpsResponsesListRelationFilter
    feedbacks?: FeedbackSubmissionsListRelationFilter
  }

  export type SatisfactionSurveysOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    surveyType?: SortOrder
    questions?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    npsResponses?: NpsResponsesOrderByRelationAggregateInput
    feedbacks?: FeedbackSubmissionsOrderByRelationAggregateInput
  }

  export type SatisfactionSurveysWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SatisfactionSurveysWhereInput | SatisfactionSurveysWhereInput[]
    OR?: SatisfactionSurveysWhereInput[]
    NOT?: SatisfactionSurveysWhereInput | SatisfactionSurveysWhereInput[]
    title?: StringFilter<"SatisfactionSurveys"> | string
    description?: StringNullableFilter<"SatisfactionSurveys"> | string | null
    tenantId?: StringNullableFilter<"SatisfactionSurveys"> | string | null
    surveyType?: StringFilter<"SatisfactionSurveys"> | string
    questions?: StringFilter<"SatisfactionSurveys"> | string
    isActive?: BoolFilter<"SatisfactionSurveys"> | boolean
    startDate?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    endDate?: DateTimeNullableFilter<"SatisfactionSurveys"> | Date | string | null
    targetAudience?: StringFilter<"SatisfactionSurveys"> | string
    createdBy?: StringFilter<"SatisfactionSurveys"> | string
    createdAt?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    updatedAt?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    npsResponses?: NpsResponsesListRelationFilter
    feedbacks?: FeedbackSubmissionsListRelationFilter
  }, "id">

  export type SatisfactionSurveysOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    surveyType?: SortOrder
    questions?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SatisfactionSurveysCountOrderByAggregateInput
    _avg?: SatisfactionSurveysAvgOrderByAggregateInput
    _max?: SatisfactionSurveysMaxOrderByAggregateInput
    _min?: SatisfactionSurveysMinOrderByAggregateInput
    _sum?: SatisfactionSurveysSumOrderByAggregateInput
  }

  export type SatisfactionSurveysScalarWhereWithAggregatesInput = {
    AND?: SatisfactionSurveysScalarWhereWithAggregatesInput | SatisfactionSurveysScalarWhereWithAggregatesInput[]
    OR?: SatisfactionSurveysScalarWhereWithAggregatesInput[]
    NOT?: SatisfactionSurveysScalarWhereWithAggregatesInput | SatisfactionSurveysScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SatisfactionSurveys"> | number
    title?: StringWithAggregatesFilter<"SatisfactionSurveys"> | string
    description?: StringNullableWithAggregatesFilter<"SatisfactionSurveys"> | string | null
    tenantId?: StringNullableWithAggregatesFilter<"SatisfactionSurveys"> | string | null
    surveyType?: StringWithAggregatesFilter<"SatisfactionSurveys"> | string
    questions?: StringWithAggregatesFilter<"SatisfactionSurveys"> | string
    isActive?: BoolWithAggregatesFilter<"SatisfactionSurveys"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"SatisfactionSurveys"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"SatisfactionSurveys"> | Date | string | null
    targetAudience?: StringWithAggregatesFilter<"SatisfactionSurveys"> | string
    createdBy?: StringWithAggregatesFilter<"SatisfactionSurveys"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SatisfactionSurveys"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SatisfactionSurveys"> | Date | string
  }

  export type NpsResponsesWhereInput = {
    AND?: NpsResponsesWhereInput | NpsResponsesWhereInput[]
    OR?: NpsResponsesWhereInput[]
    NOT?: NpsResponsesWhereInput | NpsResponsesWhereInput[]
    id?: IntFilter<"NpsResponses"> | number
    surveyId?: IntFilter<"NpsResponses"> | number
    userId?: StringNullableFilter<"NpsResponses"> | string | null
    tenantId?: StringNullableFilter<"NpsResponses"> | string | null
    score?: IntFilter<"NpsResponses"> | number
    category?: StringFilter<"NpsResponses"> | string
    comment?: StringNullableFilter<"NpsResponses"> | string | null
    anonymous?: BoolFilter<"NpsResponses"> | boolean
    ipAddress?: StringNullableFilter<"NpsResponses"> | string | null
    userAgent?: StringNullableFilter<"NpsResponses"> | string | null
    createdAt?: DateTimeFilter<"NpsResponses"> | Date | string
    survey?: XOR<SatisfactionSurveysScalarRelationFilter, SatisfactionSurveysWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type NpsResponsesOrderByWithRelationInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    score?: SortOrder
    category?: SortOrder
    comment?: SortOrderInput | SortOrder
    anonymous?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    survey?: SatisfactionSurveysOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type NpsResponsesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NpsResponsesWhereInput | NpsResponsesWhereInput[]
    OR?: NpsResponsesWhereInput[]
    NOT?: NpsResponsesWhereInput | NpsResponsesWhereInput[]
    surveyId?: IntFilter<"NpsResponses"> | number
    userId?: StringNullableFilter<"NpsResponses"> | string | null
    tenantId?: StringNullableFilter<"NpsResponses"> | string | null
    score?: IntFilter<"NpsResponses"> | number
    category?: StringFilter<"NpsResponses"> | string
    comment?: StringNullableFilter<"NpsResponses"> | string | null
    anonymous?: BoolFilter<"NpsResponses"> | boolean
    ipAddress?: StringNullableFilter<"NpsResponses"> | string | null
    userAgent?: StringNullableFilter<"NpsResponses"> | string | null
    createdAt?: DateTimeFilter<"NpsResponses"> | Date | string
    survey?: XOR<SatisfactionSurveysScalarRelationFilter, SatisfactionSurveysWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id">

  export type NpsResponsesOrderByWithAggregationInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    score?: SortOrder
    category?: SortOrder
    comment?: SortOrderInput | SortOrder
    anonymous?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NpsResponsesCountOrderByAggregateInput
    _avg?: NpsResponsesAvgOrderByAggregateInput
    _max?: NpsResponsesMaxOrderByAggregateInput
    _min?: NpsResponsesMinOrderByAggregateInput
    _sum?: NpsResponsesSumOrderByAggregateInput
  }

  export type NpsResponsesScalarWhereWithAggregatesInput = {
    AND?: NpsResponsesScalarWhereWithAggregatesInput | NpsResponsesScalarWhereWithAggregatesInput[]
    OR?: NpsResponsesScalarWhereWithAggregatesInput[]
    NOT?: NpsResponsesScalarWhereWithAggregatesInput | NpsResponsesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NpsResponses"> | number
    surveyId?: IntWithAggregatesFilter<"NpsResponses"> | number
    userId?: StringNullableWithAggregatesFilter<"NpsResponses"> | string | null
    tenantId?: StringNullableWithAggregatesFilter<"NpsResponses"> | string | null
    score?: IntWithAggregatesFilter<"NpsResponses"> | number
    category?: StringWithAggregatesFilter<"NpsResponses"> | string
    comment?: StringNullableWithAggregatesFilter<"NpsResponses"> | string | null
    anonymous?: BoolWithAggregatesFilter<"NpsResponses"> | boolean
    ipAddress?: StringNullableWithAggregatesFilter<"NpsResponses"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"NpsResponses"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"NpsResponses"> | Date | string
  }

  export type FeedbackSubmissionsWhereInput = {
    AND?: FeedbackSubmissionsWhereInput | FeedbackSubmissionsWhereInput[]
    OR?: FeedbackSubmissionsWhereInput[]
    NOT?: FeedbackSubmissionsWhereInput | FeedbackSubmissionsWhereInput[]
    id?: IntFilter<"FeedbackSubmissions"> | number
    surveyId?: IntNullableFilter<"FeedbackSubmissions"> | number | null
    userId?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    tenantId?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    feedbackType?: StringFilter<"FeedbackSubmissions"> | string
    title?: StringFilter<"FeedbackSubmissions"> | string
    description?: StringFilter<"FeedbackSubmissions"> | string
    priority?: StringFilter<"FeedbackSubmissions"> | string
    status?: StringFilter<"FeedbackSubmissions"> | string
    category?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    attachments?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    assignedTo?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    resolvedAt?: DateTimeNullableFilter<"FeedbackSubmissions"> | Date | string | null
    resolution?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    ipAddress?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    userAgent?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    createdAt?: DateTimeFilter<"FeedbackSubmissions"> | Date | string
    updatedAt?: DateTimeFilter<"FeedbackSubmissions"> | Date | string
    survey?: XOR<SatisfactionSurveysNullableScalarRelationFilter, SatisfactionSurveysWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FeedbackSubmissionsOrderByWithRelationInput = {
    id?: SortOrder
    surveyId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    feedbackType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    category?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    assignedTo?: SortOrderInput | SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolution?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    survey?: SatisfactionSurveysOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
  }

  export type FeedbackSubmissionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackSubmissionsWhereInput | FeedbackSubmissionsWhereInput[]
    OR?: FeedbackSubmissionsWhereInput[]
    NOT?: FeedbackSubmissionsWhereInput | FeedbackSubmissionsWhereInput[]
    surveyId?: IntNullableFilter<"FeedbackSubmissions"> | number | null
    userId?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    tenantId?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    feedbackType?: StringFilter<"FeedbackSubmissions"> | string
    title?: StringFilter<"FeedbackSubmissions"> | string
    description?: StringFilter<"FeedbackSubmissions"> | string
    priority?: StringFilter<"FeedbackSubmissions"> | string
    status?: StringFilter<"FeedbackSubmissions"> | string
    category?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    attachments?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    assignedTo?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    resolvedAt?: DateTimeNullableFilter<"FeedbackSubmissions"> | Date | string | null
    resolution?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    ipAddress?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    userAgent?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    createdAt?: DateTimeFilter<"FeedbackSubmissions"> | Date | string
    updatedAt?: DateTimeFilter<"FeedbackSubmissions"> | Date | string
    survey?: XOR<SatisfactionSurveysNullableScalarRelationFilter, SatisfactionSurveysWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type FeedbackSubmissionsOrderByWithAggregationInput = {
    id?: SortOrder
    surveyId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    feedbackType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    category?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    assignedTo?: SortOrderInput | SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolution?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeedbackSubmissionsCountOrderByAggregateInput
    _avg?: FeedbackSubmissionsAvgOrderByAggregateInput
    _max?: FeedbackSubmissionsMaxOrderByAggregateInput
    _min?: FeedbackSubmissionsMinOrderByAggregateInput
    _sum?: FeedbackSubmissionsSumOrderByAggregateInput
  }

  export type FeedbackSubmissionsScalarWhereWithAggregatesInput = {
    AND?: FeedbackSubmissionsScalarWhereWithAggregatesInput | FeedbackSubmissionsScalarWhereWithAggregatesInput[]
    OR?: FeedbackSubmissionsScalarWhereWithAggregatesInput[]
    NOT?: FeedbackSubmissionsScalarWhereWithAggregatesInput | FeedbackSubmissionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeedbackSubmissions"> | number
    surveyId?: IntNullableWithAggregatesFilter<"FeedbackSubmissions"> | number | null
    userId?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    tenantId?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    feedbackType?: StringWithAggregatesFilter<"FeedbackSubmissions"> | string
    title?: StringWithAggregatesFilter<"FeedbackSubmissions"> | string
    description?: StringWithAggregatesFilter<"FeedbackSubmissions"> | string
    priority?: StringWithAggregatesFilter<"FeedbackSubmissions"> | string
    status?: StringWithAggregatesFilter<"FeedbackSubmissions"> | string
    category?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    attachments?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    assignedTo?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"FeedbackSubmissions"> | Date | string | null
    resolution?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"FeedbackSubmissions"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FeedbackSubmissions"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeedbackSubmissions"> | Date | string
  }

  export type SystemLogsWhereInput = {
    AND?: SystemLogsWhereInput | SystemLogsWhereInput[]
    OR?: SystemLogsWhereInput[]
    NOT?: SystemLogsWhereInput | SystemLogsWhereInput[]
    id?: IntFilter<"SystemLogs"> | number
    logLevel?: StringFilter<"SystemLogs"> | string
    service?: StringFilter<"SystemLogs"> | string
    message?: StringFilter<"SystemLogs"> | string
    details?: StringNullableFilter<"SystemLogs"> | string | null
    userId?: StringNullableFilter<"SystemLogs"> | string | null
    tenantId?: StringNullableFilter<"SystemLogs"> | string | null
    stackTrace?: StringNullableFilter<"SystemLogs"> | string | null
    requestId?: StringNullableFilter<"SystemLogs"> | string | null
    ipAddress?: StringNullableFilter<"SystemLogs"> | string | null
    createdAt?: DateTimeFilter<"SystemLogs"> | Date | string
  }

  export type SystemLogsOrderByWithRelationInput = {
    id?: SortOrder
    logLevel?: SortOrder
    service?: SortOrder
    message?: SortOrder
    details?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    stackTrace?: SortOrderInput | SortOrder
    requestId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type SystemLogsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemLogsWhereInput | SystemLogsWhereInput[]
    OR?: SystemLogsWhereInput[]
    NOT?: SystemLogsWhereInput | SystemLogsWhereInput[]
    logLevel?: StringFilter<"SystemLogs"> | string
    service?: StringFilter<"SystemLogs"> | string
    message?: StringFilter<"SystemLogs"> | string
    details?: StringNullableFilter<"SystemLogs"> | string | null
    userId?: StringNullableFilter<"SystemLogs"> | string | null
    tenantId?: StringNullableFilter<"SystemLogs"> | string | null
    stackTrace?: StringNullableFilter<"SystemLogs"> | string | null
    requestId?: StringNullableFilter<"SystemLogs"> | string | null
    ipAddress?: StringNullableFilter<"SystemLogs"> | string | null
    createdAt?: DateTimeFilter<"SystemLogs"> | Date | string
  }, "id">

  export type SystemLogsOrderByWithAggregationInput = {
    id?: SortOrder
    logLevel?: SortOrder
    service?: SortOrder
    message?: SortOrder
    details?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    stackTrace?: SortOrderInput | SortOrder
    requestId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SystemLogsCountOrderByAggregateInput
    _avg?: SystemLogsAvgOrderByAggregateInput
    _max?: SystemLogsMaxOrderByAggregateInput
    _min?: SystemLogsMinOrderByAggregateInput
    _sum?: SystemLogsSumOrderByAggregateInput
  }

  export type SystemLogsScalarWhereWithAggregatesInput = {
    AND?: SystemLogsScalarWhereWithAggregatesInput | SystemLogsScalarWhereWithAggregatesInput[]
    OR?: SystemLogsScalarWhereWithAggregatesInput[]
    NOT?: SystemLogsScalarWhereWithAggregatesInput | SystemLogsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemLogs"> | number
    logLevel?: StringWithAggregatesFilter<"SystemLogs"> | string
    service?: StringWithAggregatesFilter<"SystemLogs"> | string
    message?: StringWithAggregatesFilter<"SystemLogs"> | string
    details?: StringNullableWithAggregatesFilter<"SystemLogs"> | string | null
    userId?: StringNullableWithAggregatesFilter<"SystemLogs"> | string | null
    tenantId?: StringNullableWithAggregatesFilter<"SystemLogs"> | string | null
    stackTrace?: StringNullableWithAggregatesFilter<"SystemLogs"> | string | null
    requestId?: StringNullableWithAggregatesFilter<"SystemLogs"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"SystemLogs"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SystemLogs"> | Date | string
  }

  export type ServiceStatusWhereInput = {
    AND?: ServiceStatusWhereInput | ServiceStatusWhereInput[]
    OR?: ServiceStatusWhereInput[]
    NOT?: ServiceStatusWhereInput | ServiceStatusWhereInput[]
    id?: IntFilter<"ServiceStatus"> | number
    serviceName?: StringFilter<"ServiceStatus"> | string
    status?: StringFilter<"ServiceStatus"> | string
    lastCheck?: DateTimeFilter<"ServiceStatus"> | Date | string
    responseTime?: FloatNullableFilter<"ServiceStatus"> | number | null
    errorMessage?: StringNullableFilter<"ServiceStatus"> | string | null
    uptime?: FloatNullableFilter<"ServiceStatus"> | number | null
    checkType?: StringFilter<"ServiceStatus"> | string
    metadata?: StringNullableFilter<"ServiceStatus"> | string | null
    createdAt?: DateTimeFilter<"ServiceStatus"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceStatus"> | Date | string
  }

  export type ServiceStatusOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    lastCheck?: SortOrder
    responseTime?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    uptime?: SortOrderInput | SortOrder
    checkType?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceStatusWhereInput | ServiceStatusWhereInput[]
    OR?: ServiceStatusWhereInput[]
    NOT?: ServiceStatusWhereInput | ServiceStatusWhereInput[]
    serviceName?: StringFilter<"ServiceStatus"> | string
    status?: StringFilter<"ServiceStatus"> | string
    lastCheck?: DateTimeFilter<"ServiceStatus"> | Date | string
    responseTime?: FloatNullableFilter<"ServiceStatus"> | number | null
    errorMessage?: StringNullableFilter<"ServiceStatus"> | string | null
    uptime?: FloatNullableFilter<"ServiceStatus"> | number | null
    checkType?: StringFilter<"ServiceStatus"> | string
    metadata?: StringNullableFilter<"ServiceStatus"> | string | null
    createdAt?: DateTimeFilter<"ServiceStatus"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceStatus"> | Date | string
  }, "id">

  export type ServiceStatusOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    lastCheck?: SortOrder
    responseTime?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    uptime?: SortOrderInput | SortOrder
    checkType?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceStatusCountOrderByAggregateInput
    _avg?: ServiceStatusAvgOrderByAggregateInput
    _max?: ServiceStatusMaxOrderByAggregateInput
    _min?: ServiceStatusMinOrderByAggregateInput
    _sum?: ServiceStatusSumOrderByAggregateInput
  }

  export type ServiceStatusScalarWhereWithAggregatesInput = {
    AND?: ServiceStatusScalarWhereWithAggregatesInput | ServiceStatusScalarWhereWithAggregatesInput[]
    OR?: ServiceStatusScalarWhereWithAggregatesInput[]
    NOT?: ServiceStatusScalarWhereWithAggregatesInput | ServiceStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceStatus"> | number
    serviceName?: StringWithAggregatesFilter<"ServiceStatus"> | string
    status?: StringWithAggregatesFilter<"ServiceStatus"> | string
    lastCheck?: DateTimeWithAggregatesFilter<"ServiceStatus"> | Date | string
    responseTime?: FloatNullableWithAggregatesFilter<"ServiceStatus"> | number | null
    errorMessage?: StringNullableWithAggregatesFilter<"ServiceStatus"> | string | null
    uptime?: FloatNullableWithAggregatesFilter<"ServiceStatus"> | number | null
    checkType?: StringWithAggregatesFilter<"ServiceStatus"> | string
    metadata?: StringNullableWithAggregatesFilter<"ServiceStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceStatus"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceStatus"> | Date | string
  }

  export type SystemAlertsWhereInput = {
    AND?: SystemAlertsWhereInput | SystemAlertsWhereInput[]
    OR?: SystemAlertsWhereInput[]
    NOT?: SystemAlertsWhereInput | SystemAlertsWhereInput[]
    id?: IntFilter<"SystemAlerts"> | number
    alertType?: StringFilter<"SystemAlerts"> | string
    severity?: StringFilter<"SystemAlerts"> | string
    title?: StringFilter<"SystemAlerts"> | string
    description?: StringFilter<"SystemAlerts"> | string
    service?: StringNullableFilter<"SystemAlerts"> | string | null
    threshold?: FloatNullableFilter<"SystemAlerts"> | number | null
    currentValue?: FloatNullableFilter<"SystemAlerts"> | number | null
    resolved?: BoolFilter<"SystemAlerts"> | boolean
    resolvedAt?: DateTimeNullableFilter<"SystemAlerts"> | Date | string | null
    resolvedBy?: StringNullableFilter<"SystemAlerts"> | string | null
    metadata?: StringNullableFilter<"SystemAlerts"> | string | null
    createdAt?: DateTimeFilter<"SystemAlerts"> | Date | string
    updatedAt?: DateTimeFilter<"SystemAlerts"> | Date | string
  }

  export type SystemAlertsOrderByWithRelationInput = {
    id?: SortOrder
    alertType?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    service?: SortOrderInput | SortOrder
    threshold?: SortOrderInput | SortOrder
    currentValue?: SortOrderInput | SortOrder
    resolved?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolvedBy?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemAlertsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemAlertsWhereInput | SystemAlertsWhereInput[]
    OR?: SystemAlertsWhereInput[]
    NOT?: SystemAlertsWhereInput | SystemAlertsWhereInput[]
    alertType?: StringFilter<"SystemAlerts"> | string
    severity?: StringFilter<"SystemAlerts"> | string
    title?: StringFilter<"SystemAlerts"> | string
    description?: StringFilter<"SystemAlerts"> | string
    service?: StringNullableFilter<"SystemAlerts"> | string | null
    threshold?: FloatNullableFilter<"SystemAlerts"> | number | null
    currentValue?: FloatNullableFilter<"SystemAlerts"> | number | null
    resolved?: BoolFilter<"SystemAlerts"> | boolean
    resolvedAt?: DateTimeNullableFilter<"SystemAlerts"> | Date | string | null
    resolvedBy?: StringNullableFilter<"SystemAlerts"> | string | null
    metadata?: StringNullableFilter<"SystemAlerts"> | string | null
    createdAt?: DateTimeFilter<"SystemAlerts"> | Date | string
    updatedAt?: DateTimeFilter<"SystemAlerts"> | Date | string
  }, "id">

  export type SystemAlertsOrderByWithAggregationInput = {
    id?: SortOrder
    alertType?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    service?: SortOrderInput | SortOrder
    threshold?: SortOrderInput | SortOrder
    currentValue?: SortOrderInput | SortOrder
    resolved?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolvedBy?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemAlertsCountOrderByAggregateInput
    _avg?: SystemAlertsAvgOrderByAggregateInput
    _max?: SystemAlertsMaxOrderByAggregateInput
    _min?: SystemAlertsMinOrderByAggregateInput
    _sum?: SystemAlertsSumOrderByAggregateInput
  }

  export type SystemAlertsScalarWhereWithAggregatesInput = {
    AND?: SystemAlertsScalarWhereWithAggregatesInput | SystemAlertsScalarWhereWithAggregatesInput[]
    OR?: SystemAlertsScalarWhereWithAggregatesInput[]
    NOT?: SystemAlertsScalarWhereWithAggregatesInput | SystemAlertsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemAlerts"> | number
    alertType?: StringWithAggregatesFilter<"SystemAlerts"> | string
    severity?: StringWithAggregatesFilter<"SystemAlerts"> | string
    title?: StringWithAggregatesFilter<"SystemAlerts"> | string
    description?: StringWithAggregatesFilter<"SystemAlerts"> | string
    service?: StringNullableWithAggregatesFilter<"SystemAlerts"> | string | null
    threshold?: FloatNullableWithAggregatesFilter<"SystemAlerts"> | number | null
    currentValue?: FloatNullableWithAggregatesFilter<"SystemAlerts"> | number | null
    resolved?: BoolWithAggregatesFilter<"SystemAlerts"> | boolean
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"SystemAlerts"> | Date | string | null
    resolvedBy?: StringNullableWithAggregatesFilter<"SystemAlerts"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"SystemAlerts"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SystemAlerts"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemAlerts"> | Date | string
  }

  export type DetailedSystemMetricsWhereInput = {
    AND?: DetailedSystemMetricsWhereInput | DetailedSystemMetricsWhereInput[]
    OR?: DetailedSystemMetricsWhereInput[]
    NOT?: DetailedSystemMetricsWhereInput | DetailedSystemMetricsWhereInput[]
    id?: IntFilter<"DetailedSystemMetrics"> | number
    category?: StringFilter<"DetailedSystemMetrics"> | string
    metricName?: StringFilter<"DetailedSystemMetrics"> | string
    metricValue?: FloatFilter<"DetailedSystemMetrics"> | number
    metricUnit?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    instance?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    tags?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    aggregationType?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    recordedAt?: DateTimeFilter<"DetailedSystemMetrics"> | Date | string
  }

  export type DetailedSystemMetricsOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrderInput | SortOrder
    instance?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    aggregationType?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
  }

  export type DetailedSystemMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DetailedSystemMetricsWhereInput | DetailedSystemMetricsWhereInput[]
    OR?: DetailedSystemMetricsWhereInput[]
    NOT?: DetailedSystemMetricsWhereInput | DetailedSystemMetricsWhereInput[]
    category?: StringFilter<"DetailedSystemMetrics"> | string
    metricName?: StringFilter<"DetailedSystemMetrics"> | string
    metricValue?: FloatFilter<"DetailedSystemMetrics"> | number
    metricUnit?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    instance?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    tags?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    aggregationType?: StringNullableFilter<"DetailedSystemMetrics"> | string | null
    recordedAt?: DateTimeFilter<"DetailedSystemMetrics"> | Date | string
  }, "id">

  export type DetailedSystemMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrderInput | SortOrder
    instance?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    aggregationType?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
    _count?: DetailedSystemMetricsCountOrderByAggregateInput
    _avg?: DetailedSystemMetricsAvgOrderByAggregateInput
    _max?: DetailedSystemMetricsMaxOrderByAggregateInput
    _min?: DetailedSystemMetricsMinOrderByAggregateInput
    _sum?: DetailedSystemMetricsSumOrderByAggregateInput
  }

  export type DetailedSystemMetricsScalarWhereWithAggregatesInput = {
    AND?: DetailedSystemMetricsScalarWhereWithAggregatesInput | DetailedSystemMetricsScalarWhereWithAggregatesInput[]
    OR?: DetailedSystemMetricsScalarWhereWithAggregatesInput[]
    NOT?: DetailedSystemMetricsScalarWhereWithAggregatesInput | DetailedSystemMetricsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DetailedSystemMetrics"> | number
    category?: StringWithAggregatesFilter<"DetailedSystemMetrics"> | string
    metricName?: StringWithAggregatesFilter<"DetailedSystemMetrics"> | string
    metricValue?: FloatWithAggregatesFilter<"DetailedSystemMetrics"> | number
    metricUnit?: StringNullableWithAggregatesFilter<"DetailedSystemMetrics"> | string | null
    instance?: StringNullableWithAggregatesFilter<"DetailedSystemMetrics"> | string | null
    tags?: StringNullableWithAggregatesFilter<"DetailedSystemMetrics"> | string | null
    aggregationType?: StringNullableWithAggregatesFilter<"DetailedSystemMetrics"> | string | null
    recordedAt?: DateTimeWithAggregatesFilter<"DetailedSystemMetrics"> | Date | string
  }

  export type TenantCreateInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PermissionCreateInput = {
    code: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string | null
    userPermissions?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: number
    code: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string | null
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userPermissions?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: number
    code: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string | null
  }

  export type PermissionUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionCreateInput = {
    createdAt?: Date | string | null
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
    grantor?: UserCreateNestedOneWithoutGrantedPermissionsInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: number
    userId: string
    permissionId: number
    grantedBy?: string | null
    createdAt?: Date | string | null
  }

  export type UserPermissionUpdateInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
    grantor?: UserUpdateOneWithoutGrantedPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionCreateManyInput = {
    id?: number
    userId: string
    permissionId: number
    grantedBy?: string | null
    createdAt?: Date | string | null
  }

  export type UserPermissionUpdateManyMutationInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityLogCreateInput = {
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
    user?: UserCreateNestedOneWithoutActivityLogsInput
    tenant?: TenantCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateInput = {
    id?: number
    userId?: string | null
    tenantId?: string | null
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
  }

  export type ActivityLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutActivityLogsNestedInput
    tenant?: TenantUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityLogCreateManyInput = {
    id?: number
    userId?: string | null
    tenantId?: string | null
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
  }

  export type ActivityLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SmtpUserCreateInput = {
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutSmtpUsersInput
    domains?: EmailDomainCreateNestedManyWithoutSmtpUserInput
    authAttempts?: AuthAttemptCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserUncheckedCreateInput = {
    id?: number
    userId?: string | null
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    domains?: EmailDomainUncheckedCreateNestedManyWithoutSmtpUserInput
    authAttempts?: AuthAttemptUncheckedCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSmtpUsersNestedInput
    domains?: EmailDomainUpdateManyWithoutSmtpUserNestedInput
    authAttempts?: AuthAttemptUpdateManyWithoutSmtpUserNestedInput
  }

  export type SmtpUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domains?: EmailDomainUncheckedUpdateManyWithoutSmtpUserNestedInput
    authAttempts?: AuthAttemptUncheckedUpdateManyWithoutSmtpUserNestedInput
  }

  export type SmtpUserCreateManyInput = {
    id?: number
    userId?: string | null
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SmtpUserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmtpUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailDomainCreateInput = {
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutEmailDomainsInput
    smtpUser: SmtpUserCreateNestedOneWithoutDomainsInput
    dkimKeys?: DkimKeyCreateNestedManyWithoutDomainInput
    emails?: EmailCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainUncheckedCreateInput = {
    id?: number
    tenantId?: string | null
    smtpUserId: number
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dkimKeys?: DkimKeyUncheckedCreateNestedManyWithoutDomainInput
    emails?: EmailUncheckedCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainUpdateInput = {
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutEmailDomainsNestedInput
    smtpUser?: SmtpUserUpdateOneRequiredWithoutDomainsNestedInput
    dkimKeys?: DkimKeyUpdateManyWithoutDomainNestedInput
    emails?: EmailUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    smtpUserId?: IntFieldUpdateOperationsInput | number
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dkimKeys?: DkimKeyUncheckedUpdateManyWithoutDomainNestedInput
    emails?: EmailUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainCreateManyInput = {
    id?: number
    tenantId?: string | null
    smtpUserId: number
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailDomainUpdateManyMutationInput = {
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailDomainUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    smtpUserId?: IntFieldUpdateOperationsInput | number
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DkimKeyCreateInput = {
    selector: string
    privateKey: string
    publicKey: string
    algorithm?: string
    canonicalization?: string
    keySize?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    domain: EmailDomainCreateNestedOneWithoutDkimKeysInput
  }

  export type DkimKeyUncheckedCreateInput = {
    id?: number
    domainId: number
    selector: string
    privateKey: string
    publicKey: string
    algorithm?: string
    canonicalization?: string
    keySize?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DkimKeyUpdateInput = {
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: EmailDomainUpdateOneRequiredWithoutDkimKeysNestedInput
  }

  export type DkimKeyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    domainId?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DkimKeyCreateManyInput = {
    id?: number
    domainId: number
    selector: string
    privateKey: string
    publicKey: string
    algorithm?: string
    canonicalization?: string
    keySize?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DkimKeyUpdateManyMutationInput = {
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DkimKeyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    domainId?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCreateInput = {
    messageId: string
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent?: string | null
    textContent?: string | null
    status?: string
    direction: string
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    mxServer?: string | null
    errorMessage?: string | null
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    domain?: EmailDomainCreateNestedOneWithoutEmailsInput
  }

  export type EmailUncheckedCreateInput = {
    id?: number
    messageId: string
    domainId?: number | null
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent?: string | null
    textContent?: string | null
    status?: string
    direction: string
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    mxServer?: string | null
    errorMessage?: string | null
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailUpdateInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: EmailDomainUpdateOneWithoutEmailsNestedInput
  }

  export type EmailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCreateManyInput = {
    id?: number
    messageId: string
    domainId?: number | null
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent?: string | null
    textContent?: string | null
    status?: string
    direction: string
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    mxServer?: string | null
    errorMessage?: string | null
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailUpdateManyMutationInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableIntFieldUpdateOperationsInput | number | null
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmtpConnectionCreateInput = {
    remoteAddress: string
    hostname?: string | null
    serverType: string
    status: string
    rejectReason?: string | null
    createdAt?: Date | string
  }

  export type SmtpConnectionUncheckedCreateInput = {
    id?: number
    remoteAddress: string
    hostname?: string | null
    serverType: string
    status: string
    rejectReason?: string | null
    createdAt?: Date | string
  }

  export type SmtpConnectionUpdateInput = {
    remoteAddress?: StringFieldUpdateOperationsInput | string
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    serverType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    rejectReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmtpConnectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    remoteAddress?: StringFieldUpdateOperationsInput | string
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    serverType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    rejectReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmtpConnectionCreateManyInput = {
    id?: number
    remoteAddress: string
    hostname?: string | null
    serverType: string
    status: string
    rejectReason?: string | null
    createdAt?: Date | string
  }

  export type SmtpConnectionUpdateManyMutationInput = {
    remoteAddress?: StringFieldUpdateOperationsInput | string
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    serverType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    rejectReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmtpConnectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    remoteAddress?: StringFieldUpdateOperationsInput | string
    hostname?: NullableStringFieldUpdateOperationsInput | string | null
    serverType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    rejectReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAttemptCreateInput = {
    username: string
    remoteAddress: string
    success: boolean
    createdAt?: Date | string
    smtpUser?: SmtpUserCreateNestedOneWithoutAuthAttemptsInput
  }

  export type AuthAttemptUncheckedCreateInput = {
    id?: number
    smtpUserId?: number | null
    username: string
    remoteAddress: string
    success: boolean
    createdAt?: Date | string
  }

  export type AuthAttemptUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    smtpUser?: SmtpUserUpdateOneWithoutAuthAttemptsNestedInput
  }

  export type AuthAttemptUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    smtpUserId?: NullableIntFieldUpdateOperationsInput | number | null
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAttemptCreateManyInput = {
    id?: number
    smtpUserId?: number | null
    username: string
    remoteAddress: string
    success: boolean
    createdAt?: Date | string
  }

  export type AuthAttemptUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAttemptUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    smtpUserId?: NullableIntFieldUpdateOperationsInput | number | null
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateInput = {
    id: string
    token: string
    tokenHash: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    lastActivity?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id: string
    userId: string
    token: string
    tokenHash: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    lastActivity?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id: string
    userId: string
    token: string
    tokenHash: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    lastActivity?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokenCreateInput = {
    type: string
    token: string
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserTokensInput
  }

  export type UserTokenUncheckedCreateInput = {
    id?: number
    userId: string
    type: string
    token: string
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokenUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserTokensNestedInput
  }

  export type UserTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokenCreateManyInput = {
    id?: number
    userId: string
    type: string
    token: string
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokenUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateInput = {
    key: string
    value: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: number
    key: string
    value: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateManyInput = {
    id?: number
    key: string
    value: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPasswordResetTokensInput
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: number
    userId: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPasswordResetTokensNestedInput
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: number
    userId: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenCreateInput = {
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEmailVerificationTokensInput
  }

  export type EmailVerificationTokenUncheckedCreateInput = {
    id?: number
    userId: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type EmailVerificationTokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmailVerificationTokensNestedInput
  }

  export type EmailVerificationTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenCreateManyInput = {
    id?: number
    userId: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type EmailVerificationTokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id?: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutInvoicesInput
    itens?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: string
    tenantId: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
    itens?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutInvoicesNestedInput
    itens?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: string
    tenantId: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateInput = {
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt?: Date | string
    invoice: InvoiceCreateNestedOneWithoutItensInput
  }

  export type InvoiceItemUncheckedCreateInput = {
    id?: number
    invoiceId: string
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt?: Date | string
  }

  export type InvoiceItemUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoice?: InvoiceUpdateOneRequiredWithoutItensNestedInput
  }

  export type InvoiceItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateManyInput = {
    id?: number
    invoiceId: string
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt?: Date | string
  }

  export type InvoiceItemUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingMetricsCreateInput = {
    periodo: string
    mrr: number
    arr: number
    churnRate?: number | null
    arpu?: number | null
    ltv?: number | null
    cac?: number | null
    receitaMensal: number
    faturasPendentes: number
    valorPendente: number
    faturasVencidas: number
    valorVencido: number
    taxaCobranca?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingMetricsUncheckedCreateInput = {
    id?: number
    periodo: string
    mrr: number
    arr: number
    churnRate?: number | null
    arpu?: number | null
    ltv?: number | null
    cac?: number | null
    receitaMensal: number
    faturasPendentes: number
    valorPendente: number
    faturasVencidas: number
    valorVencido: number
    taxaCobranca?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingMetricsUpdateInput = {
    periodo?: StringFieldUpdateOperationsInput | string
    mrr?: FloatFieldUpdateOperationsInput | number
    arr?: FloatFieldUpdateOperationsInput | number
    churnRate?: NullableFloatFieldUpdateOperationsInput | number | null
    arpu?: NullableFloatFieldUpdateOperationsInput | number | null
    ltv?: NullableFloatFieldUpdateOperationsInput | number | null
    cac?: NullableFloatFieldUpdateOperationsInput | number | null
    receitaMensal?: FloatFieldUpdateOperationsInput | number
    faturasPendentes?: IntFieldUpdateOperationsInput | number
    valorPendente?: FloatFieldUpdateOperationsInput | number
    faturasVencidas?: IntFieldUpdateOperationsInput | number
    valorVencido?: FloatFieldUpdateOperationsInput | number
    taxaCobranca?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingMetricsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    mrr?: FloatFieldUpdateOperationsInput | number
    arr?: FloatFieldUpdateOperationsInput | number
    churnRate?: NullableFloatFieldUpdateOperationsInput | number | null
    arpu?: NullableFloatFieldUpdateOperationsInput | number | null
    ltv?: NullableFloatFieldUpdateOperationsInput | number | null
    cac?: NullableFloatFieldUpdateOperationsInput | number | null
    receitaMensal?: FloatFieldUpdateOperationsInput | number
    faturasPendentes?: IntFieldUpdateOperationsInput | number
    valorPendente?: FloatFieldUpdateOperationsInput | number
    faturasVencidas?: IntFieldUpdateOperationsInput | number
    valorVencido?: FloatFieldUpdateOperationsInput | number
    taxaCobranca?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingMetricsCreateManyInput = {
    id?: number
    periodo: string
    mrr: number
    arr: number
    churnRate?: number | null
    arpu?: number | null
    ltv?: number | null
    cac?: number | null
    receitaMensal: number
    faturasPendentes: number
    valorPendente: number
    faturasVencidas: number
    valorVencido: number
    taxaCobranca?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingMetricsUpdateManyMutationInput = {
    periodo?: StringFieldUpdateOperationsInput | string
    mrr?: FloatFieldUpdateOperationsInput | number
    arr?: FloatFieldUpdateOperationsInput | number
    churnRate?: NullableFloatFieldUpdateOperationsInput | number | null
    arpu?: NullableFloatFieldUpdateOperationsInput | number | null
    ltv?: NullableFloatFieldUpdateOperationsInput | number | null
    cac?: NullableFloatFieldUpdateOperationsInput | number | null
    receitaMensal?: FloatFieldUpdateOperationsInput | number
    faturasPendentes?: IntFieldUpdateOperationsInput | number
    valorPendente?: FloatFieldUpdateOperationsInput | number
    faturasVencidas?: IntFieldUpdateOperationsInput | number
    valorVencido?: FloatFieldUpdateOperationsInput | number
    taxaCobranca?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingMetricsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    mrr?: FloatFieldUpdateOperationsInput | number
    arr?: FloatFieldUpdateOperationsInput | number
    churnRate?: NullableFloatFieldUpdateOperationsInput | number | null
    arpu?: NullableFloatFieldUpdateOperationsInput | number | null
    ltv?: NullableFloatFieldUpdateOperationsInput | number | null
    cac?: NullableFloatFieldUpdateOperationsInput | number | null
    receitaMensal?: FloatFieldUpdateOperationsInput | number
    faturasPendentes?: IntFieldUpdateOperationsInput | number
    valorPendente?: FloatFieldUpdateOperationsInput | number
    faturasVencidas?: IntFieldUpdateOperationsInput | number
    valorVencido?: FloatFieldUpdateOperationsInput | number
    taxaCobranca?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionCreateInput = {
    id?: string
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAnalyticsUserSessionsInput
    tenant?: TenantCreateNestedOneWithoutAnalyticsUserSessionsInput
  }

  export type AnalyticsUserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    tenantId?: string | null
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AnalyticsUserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnalyticsUserSessionsNestedInput
    tenant?: TenantUpdateOneWithoutAnalyticsUserSessionsNestedInput
  }

  export type AnalyticsUserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionCreateManyInput = {
    id?: string
    userId: string
    tenantId?: string | null
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AnalyticsUserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageCreateInput = {
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeatureUsageInput
    tenant?: TenantCreateNestedOneWithoutFeatureUsageInput
  }

  export type FeatureUsageUncheckedCreateInput = {
    id?: number
    userId: string
    tenantId?: string | null
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
  }

  export type FeatureUsageUpdateInput = {
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureUsageNestedInput
    tenant?: TenantUpdateOneWithoutFeatureUsageNestedInput
  }

  export type FeatureUsageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageCreateManyInput = {
    id?: number
    userId: string
    tenantId?: string | null
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
  }

  export type FeatureUsageUpdateManyMutationInput = {
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsCreateInput = {
    metricName: string
    metricValue: number
    metricUnit?: string | null
    recordedAt?: Date | string
  }

  export type SystemMetricsUncheckedCreateInput = {
    id?: number
    metricName: string
    metricValue: number
    metricUnit?: string | null
    recordedAt?: Date | string
  }

  export type SystemMetricsUpdateInput = {
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsCreateManyInput = {
    id?: number
    metricName: string
    metricValue: number
    metricUnit?: string | null
    recordedAt?: Date | string
  }

  export type SystemMetricsUpdateManyMutationInput = {
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsCreateInput = {
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPageViewsInput
    tenant?: TenantCreateNestedOneWithoutPageViewsInput
  }

  export type PageViewsUncheckedCreateInput = {
    id?: number
    userId: string
    tenantId?: string | null
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type PageViewsUpdateInput = {
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPageViewsNestedInput
    tenant?: TenantUpdateOneWithoutPageViewsNestedInput
  }

  export type PageViewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsCreateManyInput = {
    id?: number
    userId: string
    tenantId?: string | null
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type PageViewsUpdateManyMutationInput = {
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleAnalyticsCreateInput = {
    moduleName: string
    totalUsers?: number
    activeUsers?: number
    totalSessions?: number
    totalPageViews?: number
    avgSessionTime?: number | null
    popularFeature?: string | null
    period: string
    createdAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutModuleAnalyticsInput
  }

  export type ModuleAnalyticsUncheckedCreateInput = {
    id?: number
    tenantId?: string | null
    moduleName: string
    totalUsers?: number
    activeUsers?: number
    totalSessions?: number
    totalPageViews?: number
    avgSessionTime?: number | null
    popularFeature?: string | null
    period: string
    createdAt?: Date | string
  }

  export type ModuleAnalyticsUpdateInput = {
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutModuleAnalyticsNestedInput
  }

  export type ModuleAnalyticsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleAnalyticsCreateManyInput = {
    id?: number
    tenantId?: string | null
    moduleName: string
    totalUsers?: number
    activeUsers?: number
    totalSessions?: number
    totalPageViews?: number
    avgSessionTime?: number | null
    popularFeature?: string | null
    period: string
    createdAt?: Date | string
  }

  export type ModuleAnalyticsUpdateManyMutationInput = {
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleAnalyticsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeographicDataCreateInput = {
    cidade: string
    estado: string
    regiao: string
    populacao?: number | null
    totalUsuarios?: number
    usuariosAtivos?: number
    protocolosMes?: number
    satisfacaoMedia?: number | null
    period: string
    createdAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutGeographicDataInput
  }

  export type GeographicDataUncheckedCreateInput = {
    id?: number
    tenantId?: string | null
    cidade: string
    estado: string
    regiao: string
    populacao?: number | null
    totalUsuarios?: number
    usuariosAtivos?: number
    protocolosMes?: number
    satisfacaoMedia?: number | null
    period: string
    createdAt?: Date | string
  }

  export type GeographicDataUpdateInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutGeographicDataNestedInput
  }

  export type GeographicDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeographicDataCreateManyInput = {
    id?: number
    tenantId?: string | null
    cidade: string
    estado: string
    regiao: string
    populacao?: number | null
    totalUsuarios?: number
    usuariosAtivos?: number
    protocolosMes?: number
    satisfacaoMedia?: number | null
    period: string
    createdAt?: Date | string
  }

  export type GeographicDataUpdateManyMutationInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeographicDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutomatedReportsCreateInput = {
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedReportsInput
    schedules?: ReportSchedulesCreateNestedManyWithoutReportInput
    history?: ReportHistoryCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: ReportSchedulesUncheckedCreateNestedManyWithoutReportInput
    history?: ReportHistoryUncheckedCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedReportsNestedInput
    schedules?: ReportSchedulesUpdateManyWithoutReportNestedInput
    history?: ReportHistoryUpdateManyWithoutReportNestedInput
  }

  export type AutomatedReportsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ReportSchedulesUncheckedUpdateManyWithoutReportNestedInput
    history?: ReportHistoryUncheckedUpdateManyWithoutReportNestedInput
  }

  export type AutomatedReportsCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AutomatedReportsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutomatedReportsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSchedulesCreateInput = {
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    report: AutomatedReportsCreateNestedOneWithoutSchedulesInput
    recipients?: ReportRecipientsCreateNestedManyWithoutScheduleInput
  }

  export type ReportSchedulesUncheckedCreateInput = {
    id?: number
    reportId: number
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    recipients?: ReportRecipientsUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ReportSchedulesUpdateInput = {
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: AutomatedReportsUpdateOneRequiredWithoutSchedulesNestedInput
    recipients?: ReportRecipientsUpdateManyWithoutScheduleNestedInput
  }

  export type ReportSchedulesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipients?: ReportRecipientsUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ReportSchedulesCreateManyInput = {
    id?: number
    reportId: number
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportSchedulesUpdateManyMutationInput = {
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSchedulesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportRecipientsCreateInput = {
    email: string
    name?: string | null
    isActive?: boolean
    createdAt?: Date | string
    schedule: ReportSchedulesCreateNestedOneWithoutRecipientsInput
  }

  export type ReportRecipientsUncheckedCreateInput = {
    id?: number
    scheduleId: number
    email: string
    name?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportRecipientsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedule?: ReportSchedulesUpdateOneRequiredWithoutRecipientsNestedInput
  }

  export type ReportRecipientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportRecipientsCreateManyInput = {
    id?: number
    scheduleId: number
    email: string
    name?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportRecipientsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportRecipientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportHistoryCreateInput = {
    generatedAt?: Date | string
    status: string
    filePath?: string | null
    fileSize?: number | null
    executionTime?: number | null
    errorMessage?: string | null
    sentTo?: string | null
    period?: string | null
    report: AutomatedReportsCreateNestedOneWithoutHistoryInput
  }

  export type ReportHistoryUncheckedCreateInput = {
    id?: number
    reportId: number
    generatedAt?: Date | string
    status: string
    filePath?: string | null
    fileSize?: number | null
    executionTime?: number | null
    errorMessage?: string | null
    sentTo?: string | null
    period?: string | null
  }

  export type ReportHistoryUpdateInput = {
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
    report?: AutomatedReportsUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type ReportHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportHistoryCreateManyInput = {
    id?: number
    reportId: number
    generatedAt?: Date | string
    status: string
    filePath?: string | null
    fileSize?: number | null
    executionTime?: number | null
    errorMessage?: string | null
    sentTo?: string | null
    period?: string | null
  }

  export type ReportHistoryUpdateManyMutationInput = {
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SatisfactionSurveysCreateInput = {
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutSatisfactionSurveysInput
    creator: UserCreateNestedOneWithoutCreatedSurveysInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutSurveyInput
    feedbacks?: FeedbackSubmissionsCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    tenantId?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutSurveyInput
    feedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutSatisfactionSurveysNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedSurveysNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutSurveyNestedInput
    feedbacks?: FeedbackSubmissionsUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutSurveyNestedInput
    feedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    tenantId?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SatisfactionSurveysUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SatisfactionSurveysUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesCreateInput = {
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    survey: SatisfactionSurveysCreateNestedOneWithoutNpsResponsesInput
    user?: UserCreateNestedOneWithoutNpsResponsesInput
    tenant?: TenantCreateNestedOneWithoutNpsResponsesInput
  }

  export type NpsResponsesUncheckedCreateInput = {
    id?: number
    surveyId: number
    userId?: string | null
    tenantId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type NpsResponsesUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneRequiredWithoutNpsResponsesNestedInput
    user?: UserUpdateOneWithoutNpsResponsesNestedInput
    tenant?: TenantUpdateOneWithoutNpsResponsesNestedInput
  }

  export type NpsResponsesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesCreateManyInput = {
    id?: number
    surveyId: number
    userId?: string | null
    tenantId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type NpsResponsesUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsCreateInput = {
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    survey?: SatisfactionSurveysCreateNestedOneWithoutFeedbacksInput
    user?: UserCreateNestedOneWithoutFeedbackSubmissionsInput
    tenant?: TenantCreateNestedOneWithoutFeedbackSubmissionsInput
    assignee?: UserCreateNestedOneWithoutAssignedFeedbacksInput
  }

  export type FeedbackSubmissionsUncheckedCreateInput = {
    id?: number
    surveyId?: number | null
    userId?: string | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsUpdateInput = {
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneWithoutFeedbacksNestedInput
    user?: UserUpdateOneWithoutFeedbackSubmissionsNestedInput
    tenant?: TenantUpdateOneWithoutFeedbackSubmissionsNestedInput
    assignee?: UserUpdateOneWithoutAssignedFeedbacksNestedInput
  }

  export type FeedbackSubmissionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsCreateManyInput = {
    id?: number
    surveyId?: number | null
    userId?: string | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsUpdateManyMutationInput = {
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogsCreateInput = {
    logLevel: string
    service: string
    message: string
    details?: string | null
    userId?: string | null
    tenantId?: string | null
    stackTrace?: string | null
    requestId?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type SystemLogsUncheckedCreateInput = {
    id?: number
    logLevel: string
    service: string
    message: string
    details?: string | null
    userId?: string | null
    tenantId?: string | null
    stackTrace?: string | null
    requestId?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type SystemLogsUpdateInput = {
    logLevel?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    stackTrace?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    logLevel?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    stackTrace?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogsCreateManyInput = {
    id?: number
    logLevel: string
    service: string
    message: string
    details?: string | null
    userId?: string | null
    tenantId?: string | null
    stackTrace?: string | null
    requestId?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type SystemLogsUpdateManyMutationInput = {
    logLevel?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    stackTrace?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    logLevel?: StringFieldUpdateOperationsInput | string
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    stackTrace?: NullableStringFieldUpdateOperationsInput | string | null
    requestId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceStatusCreateInput = {
    serviceName: string
    status: string
    lastCheck: Date | string
    responseTime?: number | null
    errorMessage?: string | null
    uptime?: number | null
    checkType: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceStatusUncheckedCreateInput = {
    id?: number
    serviceName: string
    status: string
    lastCheck: Date | string
    responseTime?: number | null
    errorMessage?: string | null
    uptime?: number | null
    checkType: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceStatusUpdateInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    responseTime?: NullableFloatFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    uptime?: NullableFloatFieldUpdateOperationsInput | number | null
    checkType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    responseTime?: NullableFloatFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    uptime?: NullableFloatFieldUpdateOperationsInput | number | null
    checkType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceStatusCreateManyInput = {
    id?: number
    serviceName: string
    status: string
    lastCheck: Date | string
    responseTime?: number | null
    errorMessage?: string | null
    uptime?: number | null
    checkType: string
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceStatusUpdateManyMutationInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    responseTime?: NullableFloatFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    uptime?: NullableFloatFieldUpdateOperationsInput | number | null
    checkType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastCheck?: DateTimeFieldUpdateOperationsInput | Date | string
    responseTime?: NullableFloatFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    uptime?: NullableFloatFieldUpdateOperationsInput | number | null
    checkType?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemAlertsCreateInput = {
    alertType: string
    severity: string
    title: string
    description: string
    service?: string | null
    threshold?: number | null
    currentValue?: number | null
    resolved?: boolean
    resolvedAt?: Date | string | null
    resolvedBy?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemAlertsUncheckedCreateInput = {
    id?: number
    alertType: string
    severity: string
    title: string
    description: string
    service?: string | null
    threshold?: number | null
    currentValue?: number | null
    resolved?: boolean
    resolvedAt?: Date | string | null
    resolvedBy?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemAlertsUpdateInput = {
    alertType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    service?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemAlertsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    alertType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    service?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemAlertsCreateManyInput = {
    id?: number
    alertType: string
    severity: string
    title: string
    description: string
    service?: string | null
    threshold?: number | null
    currentValue?: number | null
    resolved?: boolean
    resolvedAt?: Date | string | null
    resolvedBy?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemAlertsUpdateManyMutationInput = {
    alertType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    service?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemAlertsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    alertType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    service?: NullableStringFieldUpdateOperationsInput | string | null
    threshold?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailedSystemMetricsCreateInput = {
    category: string
    metricName: string
    metricValue: number
    metricUnit?: string | null
    instance?: string | null
    tags?: string | null
    aggregationType?: string | null
    recordedAt?: Date | string
  }

  export type DetailedSystemMetricsUncheckedCreateInput = {
    id?: number
    category: string
    metricName: string
    metricValue: number
    metricUnit?: string | null
    instance?: string | null
    tags?: string | null
    aggregationType?: string | null
    recordedAt?: Date | string
  }

  export type DetailedSystemMetricsUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    instance?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aggregationType?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailedSystemMetricsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    instance?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aggregationType?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailedSystemMetricsCreateManyInput = {
    id?: number
    category: string
    metricName: string
    metricValue: number
    metricUnit?: string | null
    instance?: string | null
    tags?: string | null
    aggregationType?: string | null
    recordedAt?: Date | string
  }

  export type DetailedSystemMetricsUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    instance?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aggregationType?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetailedSystemMetricsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: FloatFieldUpdateOperationsInput | number
    metricUnit?: NullableStringFieldUpdateOperationsInput | string | null
    instance?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    aggregationType?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ActivityLogListRelationFilter = {
    every?: ActivityLogWhereInput
    some?: ActivityLogWhereInput
    none?: ActivityLogWhereInput
  }

  export type EmailDomainListRelationFilter = {
    every?: EmailDomainWhereInput
    some?: EmailDomainWhereInput
    none?: EmailDomainWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type AnalyticsUserSessionListRelationFilter = {
    every?: AnalyticsUserSessionWhereInput
    some?: AnalyticsUserSessionWhereInput
    none?: AnalyticsUserSessionWhereInput
  }

  export type FeatureUsageListRelationFilter = {
    every?: FeatureUsageWhereInput
    some?: FeatureUsageWhereInput
    none?: FeatureUsageWhereInput
  }

  export type PageViewsListRelationFilter = {
    every?: PageViewsWhereInput
    some?: PageViewsWhereInput
    none?: PageViewsWhereInput
  }

  export type ModuleAnalyticsListRelationFilter = {
    every?: ModuleAnalyticsWhereInput
    some?: ModuleAnalyticsWhereInput
    none?: ModuleAnalyticsWhereInput
  }

  export type GeographicDataListRelationFilter = {
    every?: GeographicDataWhereInput
    some?: GeographicDataWhereInput
    none?: GeographicDataWhereInput
  }

  export type NpsResponsesListRelationFilter = {
    every?: NpsResponsesWhereInput
    some?: NpsResponsesWhereInput
    none?: NpsResponsesWhereInput
  }

  export type FeedbackSubmissionsListRelationFilter = {
    every?: FeedbackSubmissionsWhereInput
    some?: FeedbackSubmissionsWhereInput
    none?: FeedbackSubmissionsWhereInput
  }

  export type SatisfactionSurveysListRelationFilter = {
    every?: SatisfactionSurveysWhereInput
    some?: SatisfactionSurveysWhereInput
    none?: SatisfactionSurveysWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailDomainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnalyticsUserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeatureUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PageViewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModuleAnalyticsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeographicDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NpsResponsesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackSubmissionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SatisfactionSurveysOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    tenantCode?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    cnpj?: SortOrder
    plano?: SortOrder
    status?: SortOrder
    populacao?: SortOrder
    endereco?: SortOrder
    responsavelNome?: SortOrder
    responsavelEmail?: SortOrder
    responsavelTelefone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hasAdmin?: SortOrder
    adminConfirmed?: SortOrder
    adminFirstLogin?: SortOrder
    limiteUsuarios?: SortOrder
    valorMensal?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    configuracoes?: SortOrder
    metricas?: SortOrder
  }

  export type TenantAvgOrderByAggregateInput = {
    populacao?: SortOrder
    limiteUsuarios?: SortOrder
    valorMensal?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantCode?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    cnpj?: SortOrder
    plano?: SortOrder
    status?: SortOrder
    populacao?: SortOrder
    endereco?: SortOrder
    responsavelNome?: SortOrder
    responsavelEmail?: SortOrder
    responsavelTelefone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hasAdmin?: SortOrder
    adminConfirmed?: SortOrder
    adminFirstLogin?: SortOrder
    limiteUsuarios?: SortOrder
    valorMensal?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    configuracoes?: SortOrder
    metricas?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    tenantCode?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    cnpj?: SortOrder
    plano?: SortOrder
    status?: SortOrder
    populacao?: SortOrder
    endereco?: SortOrder
    responsavelNome?: SortOrder
    responsavelEmail?: SortOrder
    responsavelTelefone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hasAdmin?: SortOrder
    adminConfirmed?: SortOrder
    adminFirstLogin?: SortOrder
    limiteUsuarios?: SortOrder
    valorMensal?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    configuracoes?: SortOrder
    metricas?: SortOrder
  }

  export type TenantSumOrderByAggregateInput = {
    populacao?: SortOrder
    limiteUsuarios?: SortOrder
    valorMensal?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type TenantNullableScalarRelationFilter = {
    is?: TenantWhereInput | null
    isNot?: TenantWhereInput | null
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type SmtpUserListRelationFilter = {
    every?: SmtpUserWhereInput
    some?: SmtpUserWhereInput
    none?: SmtpUserWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type UserTokenListRelationFilter = {
    every?: UserTokenWhereInput
    some?: UserTokenWhereInput
    none?: UserTokenWhereInput
  }

  export type PasswordResetTokenListRelationFilter = {
    every?: PasswordResetTokenWhereInput
    some?: PasswordResetTokenWhereInput
    none?: PasswordResetTokenWhereInput
  }

  export type EmailVerificationTokenListRelationFilter = {
    every?: EmailVerificationTokenWhereInput
    some?: EmailVerificationTokenWhereInput
    none?: EmailVerificationTokenWhereInput
  }

  export type AutomatedReportsListRelationFilter = {
    every?: AutomatedReportsWhereInput
    some?: AutomatedReportsWhereInput
    none?: AutomatedReportsWhereInput
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SmtpUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordResetTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailVerificationTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AutomatedReportsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatarUrl?: SortOrder
    ultimoLogin?: SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tipoUsuario?: SortOrder
    telefone?: SortOrder
    ultimaAtividade?: SortOrder
    ativo?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    failedLoginAttempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatarUrl?: SortOrder
    ultimoLogin?: SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tipoUsuario?: SortOrder
    telefone?: SortOrder
    ultimaAtividade?: SortOrder
    ativo?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    nomeCompleto?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    status?: SortOrder
    avatarUrl?: SortOrder
    ultimoLogin?: SortOrder
    failedLoginAttempts?: SortOrder
    lockedUntil?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tipoUsuario?: SortOrder
    telefone?: SortOrder
    ultimaAtividade?: SortOrder
    ativo?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    failedLoginAttempts?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserPermissionUserIdPermissionIdCompoundUniqueInput = {
    userId: string
    permissionId: number
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPermissionSumOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
  }

  export type ActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AuthAttemptListRelationFilter = {
    every?: AuthAttemptWhereInput
    some?: AuthAttemptWhereInput
    none?: AuthAttemptWhereInput
  }

  export type AuthAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SmtpUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    isAdmin?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SmtpUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SmtpUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    isAdmin?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SmtpUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    isAdmin?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SmtpUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SmtpUserScalarRelationFilter = {
    is?: SmtpUserWhereInput
    isNot?: SmtpUserWhereInput
  }

  export type DkimKeyListRelationFilter = {
    every?: DkimKeyWhereInput
    some?: DkimKeyWhereInput
    none?: DkimKeyWhereInput
  }

  export type EmailListRelationFilter = {
    every?: EmailWhereInput
    some?: EmailWhereInput
    none?: EmailWhereInput
  }

  export type DkimKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailDomainCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    smtpUserId?: SortOrder
    domainName?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verifiedAt?: SortOrder
    verificationMethod?: SortOrder
    dkimEnabled?: SortOrder
    spfEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailDomainAvgOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
  }

  export type EmailDomainMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    smtpUserId?: SortOrder
    domainName?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verifiedAt?: SortOrder
    verificationMethod?: SortOrder
    dkimEnabled?: SortOrder
    spfEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailDomainMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    smtpUserId?: SortOrder
    domainName?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    verifiedAt?: SortOrder
    verificationMethod?: SortOrder
    dkimEnabled?: SortOrder
    spfEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailDomainSumOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
  }

  export type EmailDomainScalarRelationFilter = {
    is?: EmailDomainWhereInput
    isNot?: EmailDomainWhereInput
  }

  export type DkimKeyDomainIdSelectorCompoundUniqueInput = {
    domainId: number
    selector: string
  }

  export type DkimKeyCountOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    selector?: SortOrder
    privateKey?: SortOrder
    publicKey?: SortOrder
    algorithm?: SortOrder
    canonicalization?: SortOrder
    keySize?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DkimKeyAvgOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    keySize?: SortOrder
  }

  export type DkimKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    selector?: SortOrder
    privateKey?: SortOrder
    publicKey?: SortOrder
    algorithm?: SortOrder
    canonicalization?: SortOrder
    keySize?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DkimKeyMinOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    selector?: SortOrder
    privateKey?: SortOrder
    publicKey?: SortOrder
    algorithm?: SortOrder
    canonicalization?: SortOrder
    keySize?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DkimKeySumOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    keySize?: SortOrder
  }

  export type EmailDomainNullableScalarRelationFilter = {
    is?: EmailDomainWhereInput | null
    isNot?: EmailDomainWhereInput | null
  }

  export type EmailCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    domainId?: SortOrder
    fromEmail?: SortOrder
    toEmail?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    mxServer?: SortOrder
    errorMessage?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailAvgOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    attempts?: SortOrder
  }

  export type EmailMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    domainId?: SortOrder
    fromEmail?: SortOrder
    toEmail?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    mxServer?: SortOrder
    errorMessage?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    domainId?: SortOrder
    fromEmail?: SortOrder
    toEmail?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    status?: SortOrder
    direction?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    mxServer?: SortOrder
    errorMessage?: SortOrder
    attempts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailSumOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    attempts?: SortOrder
  }

  export type SmtpConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    remoteAddress?: SortOrder
    hostname?: SortOrder
    serverType?: SortOrder
    status?: SortOrder
    rejectReason?: SortOrder
    createdAt?: SortOrder
  }

  export type SmtpConnectionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SmtpConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    remoteAddress?: SortOrder
    hostname?: SortOrder
    serverType?: SortOrder
    status?: SortOrder
    rejectReason?: SortOrder
    createdAt?: SortOrder
  }

  export type SmtpConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    remoteAddress?: SortOrder
    hostname?: SortOrder
    serverType?: SortOrder
    status?: SortOrder
    rejectReason?: SortOrder
    createdAt?: SortOrder
  }

  export type SmtpConnectionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SmtpUserNullableScalarRelationFilter = {
    is?: SmtpUserWhereInput | null
    isNot?: SmtpUserWhereInput | null
  }

  export type AuthAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
    username?: SortOrder
    remoteAddress?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
  }

  export type AuthAttemptAvgOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
  }

  export type AuthAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
    username?: SortOrder
    remoteAddress?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
  }

  export type AuthAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
    username?: SortOrder
    remoteAddress?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
  }

  export type AuthAttemptSumOrderByAggregateInput = {
    id?: SortOrder
    smtpUserId?: SortOrder
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    tokenHash?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    tokenHash?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    tokenHash?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmailVerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailVerificationTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmailVerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailVerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailVerificationTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TenantScalarRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type InvoiceItemListRelationFilter = {
    every?: InvoiceItemWhereInput
    some?: InvoiceItemWhereInput
    none?: InvoiceItemWhereInput
  }

  export type InvoiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    numero?: SortOrder
    periodo?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    dataVencimento?: SortOrder
    dataPagamento?: SortOrder
    metodoPagamento?: SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
    plano?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    valor?: SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    numero?: SortOrder
    periodo?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    dataVencimento?: SortOrder
    dataPagamento?: SortOrder
    metodoPagamento?: SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
    plano?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    numero?: SortOrder
    periodo?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    dataVencimento?: SortOrder
    dataPagamento?: SortOrder
    metodoPagamento?: SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
    plano?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    valor?: SortOrder
    desconto?: SortOrder
    taxaAdicional?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InvoiceScalarRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type InvoiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
    tipo?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceItemAvgOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
  }

  export type InvoiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
    tipo?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
    tipo?: SortOrder
    createdAt?: SortOrder
  }

  export type InvoiceItemSumOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    valorUnitario?: SortOrder
    valorTotal?: SortOrder
  }

  export type BillingMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    periodo?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrder
    arpu?: SortOrder
    ltv?: SortOrder
    cac?: SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingMetricsAvgOrderByAggregateInput = {
    id?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrder
    arpu?: SortOrder
    ltv?: SortOrder
    cac?: SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrder
  }

  export type BillingMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    periodo?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrder
    arpu?: SortOrder
    ltv?: SortOrder
    cac?: SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    periodo?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrder
    arpu?: SortOrder
    ltv?: SortOrder
    cac?: SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingMetricsSumOrderByAggregateInput = {
    id?: SortOrder
    mrr?: SortOrder
    arr?: SortOrder
    churnRate?: SortOrder
    arpu?: SortOrder
    ltv?: SortOrder
    cac?: SortOrder
    receitaMensal?: SortOrder
    faturasPendentes?: SortOrder
    valorPendente?: SortOrder
    faturasVencidas?: SortOrder
    valorVencido?: SortOrder
    taxaCobranca?: SortOrder
  }

  export type AnalyticsUserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    durationMinutes?: SortOrder
    pagesVisited?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AnalyticsUserSessionAvgOrderByAggregateInput = {
    durationMinutes?: SortOrder
    pagesVisited?: SortOrder
  }

  export type AnalyticsUserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    durationMinutes?: SortOrder
    pagesVisited?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AnalyticsUserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    durationMinutes?: SortOrder
    pagesVisited?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AnalyticsUserSessionSumOrderByAggregateInput = {
    durationMinutes?: SortOrder
    pagesVisited?: SortOrder
  }

  export type FeatureUsageCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    featureName?: SortOrder
    featureCategory?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type FeatureUsageAvgOrderByAggregateInput = {
    id?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrder
  }

  export type FeatureUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    featureName?: SortOrder
    featureCategory?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type FeatureUsageMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    featureName?: SortOrder
    featureCategory?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
  }

  export type FeatureUsageSumOrderByAggregateInput = {
    id?: SortOrder
    usageCount?: SortOrder
    totalTimeMinutes?: SortOrder
  }

  export type SystemMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    recordedAt?: SortOrder
  }

  export type SystemMetricsAvgOrderByAggregateInput = {
    id?: SortOrder
    metricValue?: SortOrder
  }

  export type SystemMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    recordedAt?: SortOrder
  }

  export type SystemMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    recordedAt?: SortOrder
  }

  export type SystemMetricsSumOrderByAggregateInput = {
    id?: SortOrder
    metricValue?: SortOrder
  }

  export type PageViewsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    pagePath?: SortOrder
    pageTitle?: SortOrder
    timeSpent?: SortOrder
    sessionId?: SortOrder
    referrer?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type PageViewsAvgOrderByAggregateInput = {
    id?: SortOrder
    timeSpent?: SortOrder
  }

  export type PageViewsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    pagePath?: SortOrder
    pageTitle?: SortOrder
    timeSpent?: SortOrder
    sessionId?: SortOrder
    referrer?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type PageViewsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    pagePath?: SortOrder
    pageTitle?: SortOrder
    timeSpent?: SortOrder
    sessionId?: SortOrder
    referrer?: SortOrder
    userAgent?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type PageViewsSumOrderByAggregateInput = {
    id?: SortOrder
    timeSpent?: SortOrder
  }

  export type ModuleAnalyticsTenantIdModuleNamePeriodCompoundUniqueInput = {
    tenantId: string
    moduleName: string
    period: string
  }

  export type ModuleAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    moduleName?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrder
    popularFeature?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
  }

  export type ModuleAnalyticsAvgOrderByAggregateInput = {
    id?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrder
  }

  export type ModuleAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    moduleName?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrder
    popularFeature?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
  }

  export type ModuleAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    moduleName?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrder
    popularFeature?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
  }

  export type ModuleAnalyticsSumOrderByAggregateInput = {
    id?: SortOrder
    totalUsers?: SortOrder
    activeUsers?: SortOrder
    totalSessions?: SortOrder
    totalPageViews?: SortOrder
    avgSessionTime?: SortOrder
  }

  export type GeographicDataCidadeEstadoPeriodCompoundUniqueInput = {
    cidade: string
    estado: string
    period: string
  }

  export type GeographicDataCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    regiao?: SortOrder
    populacao?: SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
  }

  export type GeographicDataAvgOrderByAggregateInput = {
    id?: SortOrder
    populacao?: SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrder
  }

  export type GeographicDataMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    regiao?: SortOrder
    populacao?: SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
  }

  export type GeographicDataMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    regiao?: SortOrder
    populacao?: SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
  }

  export type GeographicDataSumOrderByAggregateInput = {
    id?: SortOrder
    populacao?: SortOrder
    totalUsuarios?: SortOrder
    usuariosAtivos?: SortOrder
    protocolosMes?: SortOrder
    satisfacaoMedia?: SortOrder
  }

  export type ReportSchedulesListRelationFilter = {
    every?: ReportSchedulesWhereInput
    some?: ReportSchedulesWhereInput
    none?: ReportSchedulesWhereInput
  }

  export type ReportHistoryListRelationFilter = {
    every?: ReportHistoryWhereInput
    some?: ReportHistoryWhereInput
    none?: ReportHistoryWhereInput
  }

  export type ReportSchedulesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AutomatedReportsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    config?: SortOrder
    template?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AutomatedReportsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AutomatedReportsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    config?: SortOrder
    template?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AutomatedReportsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    reportType?: SortOrder
    frequency?: SortOrder
    isActive?: SortOrder
    config?: SortOrder
    template?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AutomatedReportsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AutomatedReportsScalarRelationFilter = {
    is?: AutomatedReportsWhereInput
    isNot?: AutomatedReportsWhereInput
  }

  export type ReportRecipientsListRelationFilter = {
    every?: ReportRecipientsWhereInput
    some?: ReportRecipientsWhereInput
    none?: ReportRecipientsWhereInput
  }

  export type ReportRecipientsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportSchedulesCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportSchedulesAvgOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
  }

  export type ReportSchedulesMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportSchedulesMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    cronExpression?: SortOrder
    timezone?: SortOrder
    nextRun?: SortOrder
    lastRun?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportSchedulesSumOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
  }

  export type ReportSchedulesScalarRelationFilter = {
    is?: ReportSchedulesWhereInput
    isNot?: ReportSchedulesWhereInput
  }

  export type ReportRecipientsCountOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportRecipientsAvgOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
  }

  export type ReportRecipientsMaxOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportRecipientsMinOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportRecipientsSumOrderByAggregateInput = {
    id?: SortOrder
    scheduleId?: SortOrder
  }

  export type ReportHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    executionTime?: SortOrder
    errorMessage?: SortOrder
    sentTo?: SortOrder
    period?: SortOrder
  }

  export type ReportHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileSize?: SortOrder
    executionTime?: SortOrder
  }

  export type ReportHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    executionTime?: SortOrder
    errorMessage?: SortOrder
    sentTo?: SortOrder
    period?: SortOrder
  }

  export type ReportHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    executionTime?: SortOrder
    errorMessage?: SortOrder
    sentTo?: SortOrder
    period?: SortOrder
  }

  export type ReportHistorySumOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    fileSize?: SortOrder
    executionTime?: SortOrder
  }

  export type SatisfactionSurveysCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tenantId?: SortOrder
    surveyType?: SortOrder
    questions?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetAudience?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SatisfactionSurveysAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SatisfactionSurveysMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tenantId?: SortOrder
    surveyType?: SortOrder
    questions?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetAudience?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SatisfactionSurveysMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    tenantId?: SortOrder
    surveyType?: SortOrder
    questions?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetAudience?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SatisfactionSurveysSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SatisfactionSurveysScalarRelationFilter = {
    is?: SatisfactionSurveysWhereInput
    isNot?: SatisfactionSurveysWhereInput
  }

  export type NpsResponsesCountOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    score?: SortOrder
    category?: SortOrder
    comment?: SortOrder
    anonymous?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type NpsResponsesAvgOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    score?: SortOrder
  }

  export type NpsResponsesMaxOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    score?: SortOrder
    category?: SortOrder
    comment?: SortOrder
    anonymous?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type NpsResponsesMinOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    score?: SortOrder
    category?: SortOrder
    comment?: SortOrder
    anonymous?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type NpsResponsesSumOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    score?: SortOrder
  }

  export type SatisfactionSurveysNullableScalarRelationFilter = {
    is?: SatisfactionSurveysWhereInput | null
    isNot?: SatisfactionSurveysWhereInput | null
  }

  export type FeedbackSubmissionsCountOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    feedbackType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    category?: SortOrder
    attachments?: SortOrder
    assignedTo?: SortOrder
    resolvedAt?: SortOrder
    resolution?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedbackSubmissionsAvgOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
  }

  export type FeedbackSubmissionsMaxOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    feedbackType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    category?: SortOrder
    attachments?: SortOrder
    assignedTo?: SortOrder
    resolvedAt?: SortOrder
    resolution?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedbackSubmissionsMinOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    feedbackType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    category?: SortOrder
    attachments?: SortOrder
    assignedTo?: SortOrder
    resolvedAt?: SortOrder
    resolution?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedbackSubmissionsSumOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
  }

  export type SystemLogsCountOrderByAggregateInput = {
    id?: SortOrder
    logLevel?: SortOrder
    service?: SortOrder
    message?: SortOrder
    details?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    stackTrace?: SortOrder
    requestId?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemLogsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SystemLogsMaxOrderByAggregateInput = {
    id?: SortOrder
    logLevel?: SortOrder
    service?: SortOrder
    message?: SortOrder
    details?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    stackTrace?: SortOrder
    requestId?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemLogsMinOrderByAggregateInput = {
    id?: SortOrder
    logLevel?: SortOrder
    service?: SortOrder
    message?: SortOrder
    details?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    stackTrace?: SortOrder
    requestId?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemLogsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServiceStatusCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    lastCheck?: SortOrder
    responseTime?: SortOrder
    errorMessage?: SortOrder
    uptime?: SortOrder
    checkType?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    responseTime?: SortOrder
    uptime?: SortOrder
  }

  export type ServiceStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    lastCheck?: SortOrder
    responseTime?: SortOrder
    errorMessage?: SortOrder
    uptime?: SortOrder
    checkType?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceStatusMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    status?: SortOrder
    lastCheck?: SortOrder
    responseTime?: SortOrder
    errorMessage?: SortOrder
    uptime?: SortOrder
    checkType?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceStatusSumOrderByAggregateInput = {
    id?: SortOrder
    responseTime?: SortOrder
    uptime?: SortOrder
  }

  export type SystemAlertsCountOrderByAggregateInput = {
    id?: SortOrder
    alertType?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    service?: SortOrder
    threshold?: SortOrder
    currentValue?: SortOrder
    resolved?: SortOrder
    resolvedAt?: SortOrder
    resolvedBy?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemAlertsAvgOrderByAggregateInput = {
    id?: SortOrder
    threshold?: SortOrder
    currentValue?: SortOrder
  }

  export type SystemAlertsMaxOrderByAggregateInput = {
    id?: SortOrder
    alertType?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    service?: SortOrder
    threshold?: SortOrder
    currentValue?: SortOrder
    resolved?: SortOrder
    resolvedAt?: SortOrder
    resolvedBy?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemAlertsMinOrderByAggregateInput = {
    id?: SortOrder
    alertType?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    service?: SortOrder
    threshold?: SortOrder
    currentValue?: SortOrder
    resolved?: SortOrder
    resolvedAt?: SortOrder
    resolvedBy?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemAlertsSumOrderByAggregateInput = {
    id?: SortOrder
    threshold?: SortOrder
    currentValue?: SortOrder
  }

  export type DetailedSystemMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    instance?: SortOrder
    tags?: SortOrder
    aggregationType?: SortOrder
    recordedAt?: SortOrder
  }

  export type DetailedSystemMetricsAvgOrderByAggregateInput = {
    id?: SortOrder
    metricValue?: SortOrder
  }

  export type DetailedSystemMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    instance?: SortOrder
    tags?: SortOrder
    aggregationType?: SortOrder
    recordedAt?: SortOrder
  }

  export type DetailedSystemMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricUnit?: SortOrder
    instance?: SortOrder
    tags?: SortOrder
    aggregationType?: SortOrder
    recordedAt?: SortOrder
  }

  export type DetailedSystemMetricsSumOrderByAggregateInput = {
    id?: SortOrder
    metricValue?: SortOrder
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ActivityLogCreateNestedManyWithoutTenantInput = {
    create?: XOR<ActivityLogCreateWithoutTenantInput, ActivityLogUncheckedCreateWithoutTenantInput> | ActivityLogCreateWithoutTenantInput[] | ActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutTenantInput | ActivityLogCreateOrConnectWithoutTenantInput[]
    createMany?: ActivityLogCreateManyTenantInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type EmailDomainCreateNestedManyWithoutTenantInput = {
    create?: XOR<EmailDomainCreateWithoutTenantInput, EmailDomainUncheckedCreateWithoutTenantInput> | EmailDomainCreateWithoutTenantInput[] | EmailDomainUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutTenantInput | EmailDomainCreateOrConnectWithoutTenantInput[]
    createMany?: EmailDomainCreateManyTenantInputEnvelope
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutTenantInput = {
    create?: XOR<InvoiceCreateWithoutTenantInput, InvoiceUncheckedCreateWithoutTenantInput> | InvoiceCreateWithoutTenantInput[] | InvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutTenantInput | InvoiceCreateOrConnectWithoutTenantInput[]
    createMany?: InvoiceCreateManyTenantInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type AnalyticsUserSessionCreateNestedManyWithoutTenantInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutTenantInput, AnalyticsUserSessionUncheckedCreateWithoutTenantInput> | AnalyticsUserSessionCreateWithoutTenantInput[] | AnalyticsUserSessionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutTenantInput | AnalyticsUserSessionCreateOrConnectWithoutTenantInput[]
    createMany?: AnalyticsUserSessionCreateManyTenantInputEnvelope
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
  }

  export type FeatureUsageCreateNestedManyWithoutTenantInput = {
    create?: XOR<FeatureUsageCreateWithoutTenantInput, FeatureUsageUncheckedCreateWithoutTenantInput> | FeatureUsageCreateWithoutTenantInput[] | FeatureUsageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutTenantInput | FeatureUsageCreateOrConnectWithoutTenantInput[]
    createMany?: FeatureUsageCreateManyTenantInputEnvelope
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
  }

  export type PageViewsCreateNestedManyWithoutTenantInput = {
    create?: XOR<PageViewsCreateWithoutTenantInput, PageViewsUncheckedCreateWithoutTenantInput> | PageViewsCreateWithoutTenantInput[] | PageViewsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutTenantInput | PageViewsCreateOrConnectWithoutTenantInput[]
    createMany?: PageViewsCreateManyTenantInputEnvelope
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
  }

  export type ModuleAnalyticsCreateNestedManyWithoutTenantInput = {
    create?: XOR<ModuleAnalyticsCreateWithoutTenantInput, ModuleAnalyticsUncheckedCreateWithoutTenantInput> | ModuleAnalyticsCreateWithoutTenantInput[] | ModuleAnalyticsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ModuleAnalyticsCreateOrConnectWithoutTenantInput | ModuleAnalyticsCreateOrConnectWithoutTenantInput[]
    createMany?: ModuleAnalyticsCreateManyTenantInputEnvelope
    connect?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
  }

  export type GeographicDataCreateNestedManyWithoutTenantInput = {
    create?: XOR<GeographicDataCreateWithoutTenantInput, GeographicDataUncheckedCreateWithoutTenantInput> | GeographicDataCreateWithoutTenantInput[] | GeographicDataUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: GeographicDataCreateOrConnectWithoutTenantInput | GeographicDataCreateOrConnectWithoutTenantInput[]
    createMany?: GeographicDataCreateManyTenantInputEnvelope
    connect?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
  }

  export type NpsResponsesCreateNestedManyWithoutTenantInput = {
    create?: XOR<NpsResponsesCreateWithoutTenantInput, NpsResponsesUncheckedCreateWithoutTenantInput> | NpsResponsesCreateWithoutTenantInput[] | NpsResponsesUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutTenantInput | NpsResponsesCreateOrConnectWithoutTenantInput[]
    createMany?: NpsResponsesCreateManyTenantInputEnvelope
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
  }

  export type FeedbackSubmissionsCreateNestedManyWithoutTenantInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutTenantInput, FeedbackSubmissionsUncheckedCreateWithoutTenantInput> | FeedbackSubmissionsCreateWithoutTenantInput[] | FeedbackSubmissionsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutTenantInput | FeedbackSubmissionsCreateOrConnectWithoutTenantInput[]
    createMany?: FeedbackSubmissionsCreateManyTenantInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type SatisfactionSurveysCreateNestedManyWithoutTenantInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutTenantInput, SatisfactionSurveysUncheckedCreateWithoutTenantInput> | SatisfactionSurveysCreateWithoutTenantInput[] | SatisfactionSurveysUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutTenantInput | SatisfactionSurveysCreateOrConnectWithoutTenantInput[]
    createMany?: SatisfactionSurveysCreateManyTenantInputEnvelope
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ActivityLogCreateWithoutTenantInput, ActivityLogUncheckedCreateWithoutTenantInput> | ActivityLogCreateWithoutTenantInput[] | ActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutTenantInput | ActivityLogCreateOrConnectWithoutTenantInput[]
    createMany?: ActivityLogCreateManyTenantInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type EmailDomainUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<EmailDomainCreateWithoutTenantInput, EmailDomainUncheckedCreateWithoutTenantInput> | EmailDomainCreateWithoutTenantInput[] | EmailDomainUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutTenantInput | EmailDomainCreateOrConnectWithoutTenantInput[]
    createMany?: EmailDomainCreateManyTenantInputEnvelope
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<InvoiceCreateWithoutTenantInput, InvoiceUncheckedCreateWithoutTenantInput> | InvoiceCreateWithoutTenantInput[] | InvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutTenantInput | InvoiceCreateOrConnectWithoutTenantInput[]
    createMany?: InvoiceCreateManyTenantInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutTenantInput, AnalyticsUserSessionUncheckedCreateWithoutTenantInput> | AnalyticsUserSessionCreateWithoutTenantInput[] | AnalyticsUserSessionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutTenantInput | AnalyticsUserSessionCreateOrConnectWithoutTenantInput[]
    createMany?: AnalyticsUserSessionCreateManyTenantInputEnvelope
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
  }

  export type FeatureUsageUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<FeatureUsageCreateWithoutTenantInput, FeatureUsageUncheckedCreateWithoutTenantInput> | FeatureUsageCreateWithoutTenantInput[] | FeatureUsageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutTenantInput | FeatureUsageCreateOrConnectWithoutTenantInput[]
    createMany?: FeatureUsageCreateManyTenantInputEnvelope
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
  }

  export type PageViewsUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PageViewsCreateWithoutTenantInput, PageViewsUncheckedCreateWithoutTenantInput> | PageViewsCreateWithoutTenantInput[] | PageViewsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutTenantInput | PageViewsCreateOrConnectWithoutTenantInput[]
    createMany?: PageViewsCreateManyTenantInputEnvelope
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
  }

  export type ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ModuleAnalyticsCreateWithoutTenantInput, ModuleAnalyticsUncheckedCreateWithoutTenantInput> | ModuleAnalyticsCreateWithoutTenantInput[] | ModuleAnalyticsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ModuleAnalyticsCreateOrConnectWithoutTenantInput | ModuleAnalyticsCreateOrConnectWithoutTenantInput[]
    createMany?: ModuleAnalyticsCreateManyTenantInputEnvelope
    connect?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
  }

  export type GeographicDataUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<GeographicDataCreateWithoutTenantInput, GeographicDataUncheckedCreateWithoutTenantInput> | GeographicDataCreateWithoutTenantInput[] | GeographicDataUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: GeographicDataCreateOrConnectWithoutTenantInput | GeographicDataCreateOrConnectWithoutTenantInput[]
    createMany?: GeographicDataCreateManyTenantInputEnvelope
    connect?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
  }

  export type NpsResponsesUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<NpsResponsesCreateWithoutTenantInput, NpsResponsesUncheckedCreateWithoutTenantInput> | NpsResponsesCreateWithoutTenantInput[] | NpsResponsesUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutTenantInput | NpsResponsesCreateOrConnectWithoutTenantInput[]
    createMany?: NpsResponsesCreateManyTenantInputEnvelope
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
  }

  export type FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutTenantInput, FeedbackSubmissionsUncheckedCreateWithoutTenantInput> | FeedbackSubmissionsCreateWithoutTenantInput[] | FeedbackSubmissionsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutTenantInput | FeedbackSubmissionsCreateOrConnectWithoutTenantInput[]
    createMany?: FeedbackSubmissionsCreateManyTenantInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutTenantInput, SatisfactionSurveysUncheckedCreateWithoutTenantInput> | SatisfactionSurveysCreateWithoutTenantInput[] | SatisfactionSurveysUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutTenantInput | SatisfactionSurveysCreateOrConnectWithoutTenantInput[]
    createMany?: SatisfactionSurveysCreateManyTenantInputEnvelope
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ActivityLogUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ActivityLogCreateWithoutTenantInput, ActivityLogUncheckedCreateWithoutTenantInput> | ActivityLogCreateWithoutTenantInput[] | ActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutTenantInput | ActivityLogCreateOrConnectWithoutTenantInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutTenantInput | ActivityLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ActivityLogCreateManyTenantInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutTenantInput | ActivityLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutTenantInput | ActivityLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type EmailDomainUpdateManyWithoutTenantNestedInput = {
    create?: XOR<EmailDomainCreateWithoutTenantInput, EmailDomainUncheckedCreateWithoutTenantInput> | EmailDomainCreateWithoutTenantInput[] | EmailDomainUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutTenantInput | EmailDomainCreateOrConnectWithoutTenantInput[]
    upsert?: EmailDomainUpsertWithWhereUniqueWithoutTenantInput | EmailDomainUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: EmailDomainCreateManyTenantInputEnvelope
    set?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    disconnect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    delete?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    update?: EmailDomainUpdateWithWhereUniqueWithoutTenantInput | EmailDomainUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: EmailDomainUpdateManyWithWhereWithoutTenantInput | EmailDomainUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: EmailDomainScalarWhereInput | EmailDomainScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutTenantNestedInput = {
    create?: XOR<InvoiceCreateWithoutTenantInput, InvoiceUncheckedCreateWithoutTenantInput> | InvoiceCreateWithoutTenantInput[] | InvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutTenantInput | InvoiceCreateOrConnectWithoutTenantInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutTenantInput | InvoiceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: InvoiceCreateManyTenantInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutTenantInput | InvoiceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutTenantInput | InvoiceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type AnalyticsUserSessionUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutTenantInput, AnalyticsUserSessionUncheckedCreateWithoutTenantInput> | AnalyticsUserSessionCreateWithoutTenantInput[] | AnalyticsUserSessionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutTenantInput | AnalyticsUserSessionCreateOrConnectWithoutTenantInput[]
    upsert?: AnalyticsUserSessionUpsertWithWhereUniqueWithoutTenantInput | AnalyticsUserSessionUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AnalyticsUserSessionCreateManyTenantInputEnvelope
    set?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    disconnect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    delete?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    update?: AnalyticsUserSessionUpdateWithWhereUniqueWithoutTenantInput | AnalyticsUserSessionUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AnalyticsUserSessionUpdateManyWithWhereWithoutTenantInput | AnalyticsUserSessionUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AnalyticsUserSessionScalarWhereInput | AnalyticsUserSessionScalarWhereInput[]
  }

  export type FeatureUsageUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FeatureUsageCreateWithoutTenantInput, FeatureUsageUncheckedCreateWithoutTenantInput> | FeatureUsageCreateWithoutTenantInput[] | FeatureUsageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutTenantInput | FeatureUsageCreateOrConnectWithoutTenantInput[]
    upsert?: FeatureUsageUpsertWithWhereUniqueWithoutTenantInput | FeatureUsageUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FeatureUsageCreateManyTenantInputEnvelope
    set?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    disconnect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    delete?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    update?: FeatureUsageUpdateWithWhereUniqueWithoutTenantInput | FeatureUsageUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FeatureUsageUpdateManyWithWhereWithoutTenantInput | FeatureUsageUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FeatureUsageScalarWhereInput | FeatureUsageScalarWhereInput[]
  }

  export type PageViewsUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PageViewsCreateWithoutTenantInput, PageViewsUncheckedCreateWithoutTenantInput> | PageViewsCreateWithoutTenantInput[] | PageViewsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutTenantInput | PageViewsCreateOrConnectWithoutTenantInput[]
    upsert?: PageViewsUpsertWithWhereUniqueWithoutTenantInput | PageViewsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PageViewsCreateManyTenantInputEnvelope
    set?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    disconnect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    delete?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    update?: PageViewsUpdateWithWhereUniqueWithoutTenantInput | PageViewsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PageViewsUpdateManyWithWhereWithoutTenantInput | PageViewsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PageViewsScalarWhereInput | PageViewsScalarWhereInput[]
  }

  export type ModuleAnalyticsUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ModuleAnalyticsCreateWithoutTenantInput, ModuleAnalyticsUncheckedCreateWithoutTenantInput> | ModuleAnalyticsCreateWithoutTenantInput[] | ModuleAnalyticsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ModuleAnalyticsCreateOrConnectWithoutTenantInput | ModuleAnalyticsCreateOrConnectWithoutTenantInput[]
    upsert?: ModuleAnalyticsUpsertWithWhereUniqueWithoutTenantInput | ModuleAnalyticsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ModuleAnalyticsCreateManyTenantInputEnvelope
    set?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    disconnect?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    delete?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    connect?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    update?: ModuleAnalyticsUpdateWithWhereUniqueWithoutTenantInput | ModuleAnalyticsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ModuleAnalyticsUpdateManyWithWhereWithoutTenantInput | ModuleAnalyticsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ModuleAnalyticsScalarWhereInput | ModuleAnalyticsScalarWhereInput[]
  }

  export type GeographicDataUpdateManyWithoutTenantNestedInput = {
    create?: XOR<GeographicDataCreateWithoutTenantInput, GeographicDataUncheckedCreateWithoutTenantInput> | GeographicDataCreateWithoutTenantInput[] | GeographicDataUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: GeographicDataCreateOrConnectWithoutTenantInput | GeographicDataCreateOrConnectWithoutTenantInput[]
    upsert?: GeographicDataUpsertWithWhereUniqueWithoutTenantInput | GeographicDataUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: GeographicDataCreateManyTenantInputEnvelope
    set?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    disconnect?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    delete?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    connect?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    update?: GeographicDataUpdateWithWhereUniqueWithoutTenantInput | GeographicDataUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: GeographicDataUpdateManyWithWhereWithoutTenantInput | GeographicDataUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: GeographicDataScalarWhereInput | GeographicDataScalarWhereInput[]
  }

  export type NpsResponsesUpdateManyWithoutTenantNestedInput = {
    create?: XOR<NpsResponsesCreateWithoutTenantInput, NpsResponsesUncheckedCreateWithoutTenantInput> | NpsResponsesCreateWithoutTenantInput[] | NpsResponsesUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutTenantInput | NpsResponsesCreateOrConnectWithoutTenantInput[]
    upsert?: NpsResponsesUpsertWithWhereUniqueWithoutTenantInput | NpsResponsesUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: NpsResponsesCreateManyTenantInputEnvelope
    set?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    disconnect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    delete?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    update?: NpsResponsesUpdateWithWhereUniqueWithoutTenantInput | NpsResponsesUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: NpsResponsesUpdateManyWithWhereWithoutTenantInput | NpsResponsesUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
  }

  export type FeedbackSubmissionsUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutTenantInput, FeedbackSubmissionsUncheckedCreateWithoutTenantInput> | FeedbackSubmissionsCreateWithoutTenantInput[] | FeedbackSubmissionsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutTenantInput | FeedbackSubmissionsCreateOrConnectWithoutTenantInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutTenantInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FeedbackSubmissionsCreateManyTenantInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutTenantInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutTenantInput | FeedbackSubmissionsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type SatisfactionSurveysUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutTenantInput, SatisfactionSurveysUncheckedCreateWithoutTenantInput> | SatisfactionSurveysCreateWithoutTenantInput[] | SatisfactionSurveysUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutTenantInput | SatisfactionSurveysCreateOrConnectWithoutTenantInput[]
    upsert?: SatisfactionSurveysUpsertWithWhereUniqueWithoutTenantInput | SatisfactionSurveysUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SatisfactionSurveysCreateManyTenantInputEnvelope
    set?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    disconnect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    delete?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    update?: SatisfactionSurveysUpdateWithWhereUniqueWithoutTenantInput | SatisfactionSurveysUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SatisfactionSurveysUpdateManyWithWhereWithoutTenantInput | SatisfactionSurveysUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SatisfactionSurveysScalarWhereInput | SatisfactionSurveysScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ActivityLogCreateWithoutTenantInput, ActivityLogUncheckedCreateWithoutTenantInput> | ActivityLogCreateWithoutTenantInput[] | ActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutTenantInput | ActivityLogCreateOrConnectWithoutTenantInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutTenantInput | ActivityLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ActivityLogCreateManyTenantInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutTenantInput | ActivityLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutTenantInput | ActivityLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type EmailDomainUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<EmailDomainCreateWithoutTenantInput, EmailDomainUncheckedCreateWithoutTenantInput> | EmailDomainCreateWithoutTenantInput[] | EmailDomainUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutTenantInput | EmailDomainCreateOrConnectWithoutTenantInput[]
    upsert?: EmailDomainUpsertWithWhereUniqueWithoutTenantInput | EmailDomainUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: EmailDomainCreateManyTenantInputEnvelope
    set?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    disconnect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    delete?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    update?: EmailDomainUpdateWithWhereUniqueWithoutTenantInput | EmailDomainUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: EmailDomainUpdateManyWithWhereWithoutTenantInput | EmailDomainUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: EmailDomainScalarWhereInput | EmailDomainScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<InvoiceCreateWithoutTenantInput, InvoiceUncheckedCreateWithoutTenantInput> | InvoiceCreateWithoutTenantInput[] | InvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutTenantInput | InvoiceCreateOrConnectWithoutTenantInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutTenantInput | InvoiceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: InvoiceCreateManyTenantInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutTenantInput | InvoiceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutTenantInput | InvoiceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutTenantInput, AnalyticsUserSessionUncheckedCreateWithoutTenantInput> | AnalyticsUserSessionCreateWithoutTenantInput[] | AnalyticsUserSessionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutTenantInput | AnalyticsUserSessionCreateOrConnectWithoutTenantInput[]
    upsert?: AnalyticsUserSessionUpsertWithWhereUniqueWithoutTenantInput | AnalyticsUserSessionUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AnalyticsUserSessionCreateManyTenantInputEnvelope
    set?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    disconnect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    delete?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    update?: AnalyticsUserSessionUpdateWithWhereUniqueWithoutTenantInput | AnalyticsUserSessionUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AnalyticsUserSessionUpdateManyWithWhereWithoutTenantInput | AnalyticsUserSessionUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AnalyticsUserSessionScalarWhereInput | AnalyticsUserSessionScalarWhereInput[]
  }

  export type FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FeatureUsageCreateWithoutTenantInput, FeatureUsageUncheckedCreateWithoutTenantInput> | FeatureUsageCreateWithoutTenantInput[] | FeatureUsageUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutTenantInput | FeatureUsageCreateOrConnectWithoutTenantInput[]
    upsert?: FeatureUsageUpsertWithWhereUniqueWithoutTenantInput | FeatureUsageUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FeatureUsageCreateManyTenantInputEnvelope
    set?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    disconnect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    delete?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    update?: FeatureUsageUpdateWithWhereUniqueWithoutTenantInput | FeatureUsageUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FeatureUsageUpdateManyWithWhereWithoutTenantInput | FeatureUsageUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FeatureUsageScalarWhereInput | FeatureUsageScalarWhereInput[]
  }

  export type PageViewsUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PageViewsCreateWithoutTenantInput, PageViewsUncheckedCreateWithoutTenantInput> | PageViewsCreateWithoutTenantInput[] | PageViewsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutTenantInput | PageViewsCreateOrConnectWithoutTenantInput[]
    upsert?: PageViewsUpsertWithWhereUniqueWithoutTenantInput | PageViewsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PageViewsCreateManyTenantInputEnvelope
    set?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    disconnect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    delete?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    update?: PageViewsUpdateWithWhereUniqueWithoutTenantInput | PageViewsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PageViewsUpdateManyWithWhereWithoutTenantInput | PageViewsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PageViewsScalarWhereInput | PageViewsScalarWhereInput[]
  }

  export type ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ModuleAnalyticsCreateWithoutTenantInput, ModuleAnalyticsUncheckedCreateWithoutTenantInput> | ModuleAnalyticsCreateWithoutTenantInput[] | ModuleAnalyticsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ModuleAnalyticsCreateOrConnectWithoutTenantInput | ModuleAnalyticsCreateOrConnectWithoutTenantInput[]
    upsert?: ModuleAnalyticsUpsertWithWhereUniqueWithoutTenantInput | ModuleAnalyticsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ModuleAnalyticsCreateManyTenantInputEnvelope
    set?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    disconnect?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    delete?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    connect?: ModuleAnalyticsWhereUniqueInput | ModuleAnalyticsWhereUniqueInput[]
    update?: ModuleAnalyticsUpdateWithWhereUniqueWithoutTenantInput | ModuleAnalyticsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ModuleAnalyticsUpdateManyWithWhereWithoutTenantInput | ModuleAnalyticsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ModuleAnalyticsScalarWhereInput | ModuleAnalyticsScalarWhereInput[]
  }

  export type GeographicDataUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<GeographicDataCreateWithoutTenantInput, GeographicDataUncheckedCreateWithoutTenantInput> | GeographicDataCreateWithoutTenantInput[] | GeographicDataUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: GeographicDataCreateOrConnectWithoutTenantInput | GeographicDataCreateOrConnectWithoutTenantInput[]
    upsert?: GeographicDataUpsertWithWhereUniqueWithoutTenantInput | GeographicDataUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: GeographicDataCreateManyTenantInputEnvelope
    set?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    disconnect?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    delete?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    connect?: GeographicDataWhereUniqueInput | GeographicDataWhereUniqueInput[]
    update?: GeographicDataUpdateWithWhereUniqueWithoutTenantInput | GeographicDataUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: GeographicDataUpdateManyWithWhereWithoutTenantInput | GeographicDataUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: GeographicDataScalarWhereInput | GeographicDataScalarWhereInput[]
  }

  export type NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<NpsResponsesCreateWithoutTenantInput, NpsResponsesUncheckedCreateWithoutTenantInput> | NpsResponsesCreateWithoutTenantInput[] | NpsResponsesUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutTenantInput | NpsResponsesCreateOrConnectWithoutTenantInput[]
    upsert?: NpsResponsesUpsertWithWhereUniqueWithoutTenantInput | NpsResponsesUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: NpsResponsesCreateManyTenantInputEnvelope
    set?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    disconnect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    delete?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    update?: NpsResponsesUpdateWithWhereUniqueWithoutTenantInput | NpsResponsesUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: NpsResponsesUpdateManyWithWhereWithoutTenantInput | NpsResponsesUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutTenantInput, FeedbackSubmissionsUncheckedCreateWithoutTenantInput> | FeedbackSubmissionsCreateWithoutTenantInput[] | FeedbackSubmissionsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutTenantInput | FeedbackSubmissionsCreateOrConnectWithoutTenantInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutTenantInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FeedbackSubmissionsCreateManyTenantInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutTenantInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutTenantInput | FeedbackSubmissionsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutTenantInput, SatisfactionSurveysUncheckedCreateWithoutTenantInput> | SatisfactionSurveysCreateWithoutTenantInput[] | SatisfactionSurveysUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutTenantInput | SatisfactionSurveysCreateOrConnectWithoutTenantInput[]
    upsert?: SatisfactionSurveysUpsertWithWhereUniqueWithoutTenantInput | SatisfactionSurveysUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SatisfactionSurveysCreateManyTenantInputEnvelope
    set?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    disconnect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    delete?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    update?: SatisfactionSurveysUpdateWithWhereUniqueWithoutTenantInput | SatisfactionSurveysUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SatisfactionSurveysUpdateManyWithWhereWithoutTenantInput | SatisfactionSurveysUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SatisfactionSurveysScalarWhereInput | SatisfactionSurveysScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutGrantorInput = {
    create?: XOR<UserPermissionCreateWithoutGrantorInput, UserPermissionUncheckedCreateWithoutGrantorInput> | UserPermissionCreateWithoutGrantorInput[] | UserPermissionUncheckedCreateWithoutGrantorInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutGrantorInput | UserPermissionCreateOrConnectWithoutGrantorInput[]
    createMany?: UserPermissionCreateManyGrantorInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type ActivityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type SmtpUserCreateNestedManyWithoutUserInput = {
    create?: XOR<SmtpUserCreateWithoutUserInput, SmtpUserUncheckedCreateWithoutUserInput> | SmtpUserCreateWithoutUserInput[] | SmtpUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SmtpUserCreateOrConnectWithoutUserInput | SmtpUserCreateOrConnectWithoutUserInput[]
    createMany?: SmtpUserCreateManyUserInputEnvelope
    connect?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type UserTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTokenCreateWithoutUserInput, UserTokenUncheckedCreateWithoutUserInput> | UserTokenCreateWithoutUserInput[] | UserTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTokenCreateOrConnectWithoutUserInput | UserTokenCreateOrConnectWithoutUserInput[]
    createMany?: UserTokenCreateManyUserInputEnvelope
    connect?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
  }

  export type PasswordResetTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type EmailVerificationTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailVerificationTokenCreateWithoutUserInput, EmailVerificationTokenUncheckedCreateWithoutUserInput> | EmailVerificationTokenCreateWithoutUserInput[] | EmailVerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationTokenCreateOrConnectWithoutUserInput | EmailVerificationTokenCreateOrConnectWithoutUserInput[]
    createMany?: EmailVerificationTokenCreateManyUserInputEnvelope
    connect?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
  }

  export type AnalyticsUserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutUserInput, AnalyticsUserSessionUncheckedCreateWithoutUserInput> | AnalyticsUserSessionCreateWithoutUserInput[] | AnalyticsUserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutUserInput | AnalyticsUserSessionCreateOrConnectWithoutUserInput[]
    createMany?: AnalyticsUserSessionCreateManyUserInputEnvelope
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
  }

  export type FeatureUsageCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureUsageCreateWithoutUserInput, FeatureUsageUncheckedCreateWithoutUserInput> | FeatureUsageCreateWithoutUserInput[] | FeatureUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutUserInput | FeatureUsageCreateOrConnectWithoutUserInput[]
    createMany?: FeatureUsageCreateManyUserInputEnvelope
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
  }

  export type PageViewsCreateNestedManyWithoutUserInput = {
    create?: XOR<PageViewsCreateWithoutUserInput, PageViewsUncheckedCreateWithoutUserInput> | PageViewsCreateWithoutUserInput[] | PageViewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutUserInput | PageViewsCreateOrConnectWithoutUserInput[]
    createMany?: PageViewsCreateManyUserInputEnvelope
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
  }

  export type NpsResponsesCreateNestedManyWithoutUserInput = {
    create?: XOR<NpsResponsesCreateWithoutUserInput, NpsResponsesUncheckedCreateWithoutUserInput> | NpsResponsesCreateWithoutUserInput[] | NpsResponsesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutUserInput | NpsResponsesCreateOrConnectWithoutUserInput[]
    createMany?: NpsResponsesCreateManyUserInputEnvelope
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
  }

  export type FeedbackSubmissionsCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutUserInput, FeedbackSubmissionsUncheckedCreateWithoutUserInput> | FeedbackSubmissionsCreateWithoutUserInput[] | FeedbackSubmissionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutUserInput | FeedbackSubmissionsCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackSubmissionsCreateManyUserInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutAssigneeInput, FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput> | FeedbackSubmissionsCreateWithoutAssigneeInput[] | FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput | FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput[]
    createMany?: FeedbackSubmissionsCreateManyAssigneeInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type AutomatedReportsCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AutomatedReportsCreateWithoutCreatorInput, AutomatedReportsUncheckedCreateWithoutCreatorInput> | AutomatedReportsCreateWithoutCreatorInput[] | AutomatedReportsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutCreatorInput | AutomatedReportsCreateOrConnectWithoutCreatorInput[]
    createMany?: AutomatedReportsCreateManyCreatorInputEnvelope
    connect?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
  }

  export type SatisfactionSurveysCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutCreatorInput, SatisfactionSurveysUncheckedCreateWithoutCreatorInput> | SatisfactionSurveysCreateWithoutCreatorInput[] | SatisfactionSurveysUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutCreatorInput | SatisfactionSurveysCreateOrConnectWithoutCreatorInput[]
    createMany?: SatisfactionSurveysCreateManyCreatorInputEnvelope
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutGrantorInput = {
    create?: XOR<UserPermissionCreateWithoutGrantorInput, UserPermissionUncheckedCreateWithoutGrantorInput> | UserPermissionCreateWithoutGrantorInput[] | UserPermissionUncheckedCreateWithoutGrantorInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutGrantorInput | UserPermissionCreateOrConnectWithoutGrantorInput[]
    createMany?: UserPermissionCreateManyGrantorInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type SmtpUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SmtpUserCreateWithoutUserInput, SmtpUserUncheckedCreateWithoutUserInput> | SmtpUserCreateWithoutUserInput[] | SmtpUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SmtpUserCreateOrConnectWithoutUserInput | SmtpUserCreateOrConnectWithoutUserInput[]
    createMany?: SmtpUserCreateManyUserInputEnvelope
    connect?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type UserTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTokenCreateWithoutUserInput, UserTokenUncheckedCreateWithoutUserInput> | UserTokenCreateWithoutUserInput[] | UserTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTokenCreateOrConnectWithoutUserInput | UserTokenCreateOrConnectWithoutUserInput[]
    createMany?: UserTokenCreateManyUserInputEnvelope
    connect?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
  }

  export type PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailVerificationTokenCreateWithoutUserInput, EmailVerificationTokenUncheckedCreateWithoutUserInput> | EmailVerificationTokenCreateWithoutUserInput[] | EmailVerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationTokenCreateOrConnectWithoutUserInput | EmailVerificationTokenCreateOrConnectWithoutUserInput[]
    createMany?: EmailVerificationTokenCreateManyUserInputEnvelope
    connect?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
  }

  export type AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutUserInput, AnalyticsUserSessionUncheckedCreateWithoutUserInput> | AnalyticsUserSessionCreateWithoutUserInput[] | AnalyticsUserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutUserInput | AnalyticsUserSessionCreateOrConnectWithoutUserInput[]
    createMany?: AnalyticsUserSessionCreateManyUserInputEnvelope
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
  }

  export type FeatureUsageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureUsageCreateWithoutUserInput, FeatureUsageUncheckedCreateWithoutUserInput> | FeatureUsageCreateWithoutUserInput[] | FeatureUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutUserInput | FeatureUsageCreateOrConnectWithoutUserInput[]
    createMany?: FeatureUsageCreateManyUserInputEnvelope
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
  }

  export type PageViewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PageViewsCreateWithoutUserInput, PageViewsUncheckedCreateWithoutUserInput> | PageViewsCreateWithoutUserInput[] | PageViewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutUserInput | PageViewsCreateOrConnectWithoutUserInput[]
    createMany?: PageViewsCreateManyUserInputEnvelope
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
  }

  export type NpsResponsesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NpsResponsesCreateWithoutUserInput, NpsResponsesUncheckedCreateWithoutUserInput> | NpsResponsesCreateWithoutUserInput[] | NpsResponsesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutUserInput | NpsResponsesCreateOrConnectWithoutUserInput[]
    createMany?: NpsResponsesCreateManyUserInputEnvelope
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
  }

  export type FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutUserInput, FeedbackSubmissionsUncheckedCreateWithoutUserInput> | FeedbackSubmissionsCreateWithoutUserInput[] | FeedbackSubmissionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutUserInput | FeedbackSubmissionsCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackSubmissionsCreateManyUserInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutAssigneeInput, FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput> | FeedbackSubmissionsCreateWithoutAssigneeInput[] | FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput | FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput[]
    createMany?: FeedbackSubmissionsCreateManyAssigneeInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AutomatedReportsCreateWithoutCreatorInput, AutomatedReportsUncheckedCreateWithoutCreatorInput> | AutomatedReportsCreateWithoutCreatorInput[] | AutomatedReportsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutCreatorInput | AutomatedReportsCreateOrConnectWithoutCreatorInput[]
    createMany?: AutomatedReportsCreateManyCreatorInputEnvelope
    connect?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
  }

  export type SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutCreatorInput, SatisfactionSurveysUncheckedCreateWithoutCreatorInput> | SatisfactionSurveysCreateWithoutCreatorInput[] | SatisfactionSurveysUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutCreatorInput | SatisfactionSurveysCreateOrConnectWithoutCreatorInput[]
    createMany?: SatisfactionSurveysCreateManyCreatorInputEnvelope
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
  }

  export type TenantUpdateOneWithoutUsersNestedInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    upsert?: TenantUpsertWithoutUsersInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsersInput, TenantUpdateWithoutUsersInput>, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutGrantorNestedInput = {
    create?: XOR<UserPermissionCreateWithoutGrantorInput, UserPermissionUncheckedCreateWithoutGrantorInput> | UserPermissionCreateWithoutGrantorInput[] | UserPermissionUncheckedCreateWithoutGrantorInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutGrantorInput | UserPermissionCreateOrConnectWithoutGrantorInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutGrantorInput | UserPermissionUpsertWithWhereUniqueWithoutGrantorInput[]
    createMany?: UserPermissionCreateManyGrantorInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutGrantorInput | UserPermissionUpdateWithWhereUniqueWithoutGrantorInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutGrantorInput | UserPermissionUpdateManyWithWhereWithoutGrantorInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type ActivityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type SmtpUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<SmtpUserCreateWithoutUserInput, SmtpUserUncheckedCreateWithoutUserInput> | SmtpUserCreateWithoutUserInput[] | SmtpUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SmtpUserCreateOrConnectWithoutUserInput | SmtpUserCreateOrConnectWithoutUserInput[]
    upsert?: SmtpUserUpsertWithWhereUniqueWithoutUserInput | SmtpUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SmtpUserCreateManyUserInputEnvelope
    set?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    disconnect?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    delete?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    connect?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    update?: SmtpUserUpdateWithWhereUniqueWithoutUserInput | SmtpUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SmtpUserUpdateManyWithWhereWithoutUserInput | SmtpUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SmtpUserScalarWhereInput | SmtpUserScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type UserTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTokenCreateWithoutUserInput, UserTokenUncheckedCreateWithoutUserInput> | UserTokenCreateWithoutUserInput[] | UserTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTokenCreateOrConnectWithoutUserInput | UserTokenCreateOrConnectWithoutUserInput[]
    upsert?: UserTokenUpsertWithWhereUniqueWithoutUserInput | UserTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTokenCreateManyUserInputEnvelope
    set?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    disconnect?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    delete?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    connect?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    update?: UserTokenUpdateWithWhereUniqueWithoutUserInput | UserTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTokenUpdateManyWithWhereWithoutUserInput | UserTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTokenScalarWhereInput | UserTokenScalarWhereInput[]
  }

  export type PasswordResetTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput | PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput | PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutUserInput | PasswordResetTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type EmailVerificationTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailVerificationTokenCreateWithoutUserInput, EmailVerificationTokenUncheckedCreateWithoutUserInput> | EmailVerificationTokenCreateWithoutUserInput[] | EmailVerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationTokenCreateOrConnectWithoutUserInput | EmailVerificationTokenCreateOrConnectWithoutUserInput[]
    upsert?: EmailVerificationTokenUpsertWithWhereUniqueWithoutUserInput | EmailVerificationTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailVerificationTokenCreateManyUserInputEnvelope
    set?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    disconnect?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    delete?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    connect?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    update?: EmailVerificationTokenUpdateWithWhereUniqueWithoutUserInput | EmailVerificationTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailVerificationTokenUpdateManyWithWhereWithoutUserInput | EmailVerificationTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailVerificationTokenScalarWhereInput | EmailVerificationTokenScalarWhereInput[]
  }

  export type AnalyticsUserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutUserInput, AnalyticsUserSessionUncheckedCreateWithoutUserInput> | AnalyticsUserSessionCreateWithoutUserInput[] | AnalyticsUserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutUserInput | AnalyticsUserSessionCreateOrConnectWithoutUserInput[]
    upsert?: AnalyticsUserSessionUpsertWithWhereUniqueWithoutUserInput | AnalyticsUserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnalyticsUserSessionCreateManyUserInputEnvelope
    set?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    disconnect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    delete?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    update?: AnalyticsUserSessionUpdateWithWhereUniqueWithoutUserInput | AnalyticsUserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnalyticsUserSessionUpdateManyWithWhereWithoutUserInput | AnalyticsUserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnalyticsUserSessionScalarWhereInput | AnalyticsUserSessionScalarWhereInput[]
  }

  export type FeatureUsageUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureUsageCreateWithoutUserInput, FeatureUsageUncheckedCreateWithoutUserInput> | FeatureUsageCreateWithoutUserInput[] | FeatureUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutUserInput | FeatureUsageCreateOrConnectWithoutUserInput[]
    upsert?: FeatureUsageUpsertWithWhereUniqueWithoutUserInput | FeatureUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureUsageCreateManyUserInputEnvelope
    set?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    disconnect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    delete?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    update?: FeatureUsageUpdateWithWhereUniqueWithoutUserInput | FeatureUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureUsageUpdateManyWithWhereWithoutUserInput | FeatureUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureUsageScalarWhereInput | FeatureUsageScalarWhereInput[]
  }

  export type PageViewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<PageViewsCreateWithoutUserInput, PageViewsUncheckedCreateWithoutUserInput> | PageViewsCreateWithoutUserInput[] | PageViewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutUserInput | PageViewsCreateOrConnectWithoutUserInput[]
    upsert?: PageViewsUpsertWithWhereUniqueWithoutUserInput | PageViewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PageViewsCreateManyUserInputEnvelope
    set?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    disconnect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    delete?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    update?: PageViewsUpdateWithWhereUniqueWithoutUserInput | PageViewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PageViewsUpdateManyWithWhereWithoutUserInput | PageViewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PageViewsScalarWhereInput | PageViewsScalarWhereInput[]
  }

  export type NpsResponsesUpdateManyWithoutUserNestedInput = {
    create?: XOR<NpsResponsesCreateWithoutUserInput, NpsResponsesUncheckedCreateWithoutUserInput> | NpsResponsesCreateWithoutUserInput[] | NpsResponsesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutUserInput | NpsResponsesCreateOrConnectWithoutUserInput[]
    upsert?: NpsResponsesUpsertWithWhereUniqueWithoutUserInput | NpsResponsesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NpsResponsesCreateManyUserInputEnvelope
    set?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    disconnect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    delete?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    update?: NpsResponsesUpdateWithWhereUniqueWithoutUserInput | NpsResponsesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NpsResponsesUpdateManyWithWhereWithoutUserInput | NpsResponsesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
  }

  export type FeedbackSubmissionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutUserInput, FeedbackSubmissionsUncheckedCreateWithoutUserInput> | FeedbackSubmissionsCreateWithoutUserInput[] | FeedbackSubmissionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutUserInput | FeedbackSubmissionsCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutUserInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackSubmissionsCreateManyUserInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutUserInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutUserInput | FeedbackSubmissionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutAssigneeInput, FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput> | FeedbackSubmissionsCreateWithoutAssigneeInput[] | FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput | FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutAssigneeInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: FeedbackSubmissionsCreateManyAssigneeInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutAssigneeInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutAssigneeInput | FeedbackSubmissionsUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type AutomatedReportsUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AutomatedReportsCreateWithoutCreatorInput, AutomatedReportsUncheckedCreateWithoutCreatorInput> | AutomatedReportsCreateWithoutCreatorInput[] | AutomatedReportsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutCreatorInput | AutomatedReportsCreateOrConnectWithoutCreatorInput[]
    upsert?: AutomatedReportsUpsertWithWhereUniqueWithoutCreatorInput | AutomatedReportsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AutomatedReportsCreateManyCreatorInputEnvelope
    set?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    disconnect?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    delete?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    connect?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    update?: AutomatedReportsUpdateWithWhereUniqueWithoutCreatorInput | AutomatedReportsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AutomatedReportsUpdateManyWithWhereWithoutCreatorInput | AutomatedReportsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AutomatedReportsScalarWhereInput | AutomatedReportsScalarWhereInput[]
  }

  export type SatisfactionSurveysUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutCreatorInput, SatisfactionSurveysUncheckedCreateWithoutCreatorInput> | SatisfactionSurveysCreateWithoutCreatorInput[] | SatisfactionSurveysUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutCreatorInput | SatisfactionSurveysCreateOrConnectWithoutCreatorInput[]
    upsert?: SatisfactionSurveysUpsertWithWhereUniqueWithoutCreatorInput | SatisfactionSurveysUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SatisfactionSurveysCreateManyCreatorInputEnvelope
    set?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    disconnect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    delete?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    update?: SatisfactionSurveysUpdateWithWhereUniqueWithoutCreatorInput | SatisfactionSurveysUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SatisfactionSurveysUpdateManyWithWhereWithoutCreatorInput | SatisfactionSurveysUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SatisfactionSurveysScalarWhereInput | SatisfactionSurveysScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput = {
    create?: XOR<UserPermissionCreateWithoutGrantorInput, UserPermissionUncheckedCreateWithoutGrantorInput> | UserPermissionCreateWithoutGrantorInput[] | UserPermissionUncheckedCreateWithoutGrantorInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutGrantorInput | UserPermissionCreateOrConnectWithoutGrantorInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutGrantorInput | UserPermissionUpsertWithWhereUniqueWithoutGrantorInput[]
    createMany?: UserPermissionCreateManyGrantorInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutGrantorInput | UserPermissionUpdateWithWhereUniqueWithoutGrantorInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutGrantorInput | UserPermissionUpdateManyWithWhereWithoutGrantorInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type SmtpUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SmtpUserCreateWithoutUserInput, SmtpUserUncheckedCreateWithoutUserInput> | SmtpUserCreateWithoutUserInput[] | SmtpUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SmtpUserCreateOrConnectWithoutUserInput | SmtpUserCreateOrConnectWithoutUserInput[]
    upsert?: SmtpUserUpsertWithWhereUniqueWithoutUserInput | SmtpUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SmtpUserCreateManyUserInputEnvelope
    set?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    disconnect?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    delete?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    connect?: SmtpUserWhereUniqueInput | SmtpUserWhereUniqueInput[]
    update?: SmtpUserUpdateWithWhereUniqueWithoutUserInput | SmtpUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SmtpUserUpdateManyWithWhereWithoutUserInput | SmtpUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SmtpUserScalarWhereInput | SmtpUserScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type UserTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTokenCreateWithoutUserInput, UserTokenUncheckedCreateWithoutUserInput> | UserTokenCreateWithoutUserInput[] | UserTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTokenCreateOrConnectWithoutUserInput | UserTokenCreateOrConnectWithoutUserInput[]
    upsert?: UserTokenUpsertWithWhereUniqueWithoutUserInput | UserTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTokenCreateManyUserInputEnvelope
    set?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    disconnect?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    delete?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    connect?: UserTokenWhereUniqueInput | UserTokenWhereUniqueInput[]
    update?: UserTokenUpdateWithWhereUniqueWithoutUserInput | UserTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTokenUpdateManyWithWhereWithoutUserInput | UserTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTokenScalarWhereInput | UserTokenScalarWhereInput[]
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput | PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput | PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutUserInput | PasswordResetTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailVerificationTokenCreateWithoutUserInput, EmailVerificationTokenUncheckedCreateWithoutUserInput> | EmailVerificationTokenCreateWithoutUserInput[] | EmailVerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationTokenCreateOrConnectWithoutUserInput | EmailVerificationTokenCreateOrConnectWithoutUserInput[]
    upsert?: EmailVerificationTokenUpsertWithWhereUniqueWithoutUserInput | EmailVerificationTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailVerificationTokenCreateManyUserInputEnvelope
    set?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    disconnect?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    delete?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    connect?: EmailVerificationTokenWhereUniqueInput | EmailVerificationTokenWhereUniqueInput[]
    update?: EmailVerificationTokenUpdateWithWhereUniqueWithoutUserInput | EmailVerificationTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailVerificationTokenUpdateManyWithWhereWithoutUserInput | EmailVerificationTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailVerificationTokenScalarWhereInput | EmailVerificationTokenScalarWhereInput[]
  }

  export type AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnalyticsUserSessionCreateWithoutUserInput, AnalyticsUserSessionUncheckedCreateWithoutUserInput> | AnalyticsUserSessionCreateWithoutUserInput[] | AnalyticsUserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsUserSessionCreateOrConnectWithoutUserInput | AnalyticsUserSessionCreateOrConnectWithoutUserInput[]
    upsert?: AnalyticsUserSessionUpsertWithWhereUniqueWithoutUserInput | AnalyticsUserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnalyticsUserSessionCreateManyUserInputEnvelope
    set?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    disconnect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    delete?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    connect?: AnalyticsUserSessionWhereUniqueInput | AnalyticsUserSessionWhereUniqueInput[]
    update?: AnalyticsUserSessionUpdateWithWhereUniqueWithoutUserInput | AnalyticsUserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnalyticsUserSessionUpdateManyWithWhereWithoutUserInput | AnalyticsUserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnalyticsUserSessionScalarWhereInput | AnalyticsUserSessionScalarWhereInput[]
  }

  export type FeatureUsageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureUsageCreateWithoutUserInput, FeatureUsageUncheckedCreateWithoutUserInput> | FeatureUsageCreateWithoutUserInput[] | FeatureUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureUsageCreateOrConnectWithoutUserInput | FeatureUsageCreateOrConnectWithoutUserInput[]
    upsert?: FeatureUsageUpsertWithWhereUniqueWithoutUserInput | FeatureUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureUsageCreateManyUserInputEnvelope
    set?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    disconnect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    delete?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    connect?: FeatureUsageWhereUniqueInput | FeatureUsageWhereUniqueInput[]
    update?: FeatureUsageUpdateWithWhereUniqueWithoutUserInput | FeatureUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureUsageUpdateManyWithWhereWithoutUserInput | FeatureUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureUsageScalarWhereInput | FeatureUsageScalarWhereInput[]
  }

  export type PageViewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PageViewsCreateWithoutUserInput, PageViewsUncheckedCreateWithoutUserInput> | PageViewsCreateWithoutUserInput[] | PageViewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PageViewsCreateOrConnectWithoutUserInput | PageViewsCreateOrConnectWithoutUserInput[]
    upsert?: PageViewsUpsertWithWhereUniqueWithoutUserInput | PageViewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PageViewsCreateManyUserInputEnvelope
    set?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    disconnect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    delete?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    connect?: PageViewsWhereUniqueInput | PageViewsWhereUniqueInput[]
    update?: PageViewsUpdateWithWhereUniqueWithoutUserInput | PageViewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PageViewsUpdateManyWithWhereWithoutUserInput | PageViewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PageViewsScalarWhereInput | PageViewsScalarWhereInput[]
  }

  export type NpsResponsesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NpsResponsesCreateWithoutUserInput, NpsResponsesUncheckedCreateWithoutUserInput> | NpsResponsesCreateWithoutUserInput[] | NpsResponsesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutUserInput | NpsResponsesCreateOrConnectWithoutUserInput[]
    upsert?: NpsResponsesUpsertWithWhereUniqueWithoutUserInput | NpsResponsesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NpsResponsesCreateManyUserInputEnvelope
    set?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    disconnect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    delete?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    update?: NpsResponsesUpdateWithWhereUniqueWithoutUserInput | NpsResponsesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NpsResponsesUpdateManyWithWhereWithoutUserInput | NpsResponsesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutUserInput, FeedbackSubmissionsUncheckedCreateWithoutUserInput> | FeedbackSubmissionsCreateWithoutUserInput[] | FeedbackSubmissionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutUserInput | FeedbackSubmissionsCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutUserInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackSubmissionsCreateManyUserInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutUserInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutUserInput | FeedbackSubmissionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutAssigneeInput, FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput> | FeedbackSubmissionsCreateWithoutAssigneeInput[] | FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput | FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutAssigneeInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: FeedbackSubmissionsCreateManyAssigneeInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutAssigneeInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutAssigneeInput | FeedbackSubmissionsUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AutomatedReportsCreateWithoutCreatorInput, AutomatedReportsUncheckedCreateWithoutCreatorInput> | AutomatedReportsCreateWithoutCreatorInput[] | AutomatedReportsUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutCreatorInput | AutomatedReportsCreateOrConnectWithoutCreatorInput[]
    upsert?: AutomatedReportsUpsertWithWhereUniqueWithoutCreatorInput | AutomatedReportsUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AutomatedReportsCreateManyCreatorInputEnvelope
    set?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    disconnect?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    delete?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    connect?: AutomatedReportsWhereUniqueInput | AutomatedReportsWhereUniqueInput[]
    update?: AutomatedReportsUpdateWithWhereUniqueWithoutCreatorInput | AutomatedReportsUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AutomatedReportsUpdateManyWithWhereWithoutCreatorInput | AutomatedReportsUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AutomatedReportsScalarWhereInput | AutomatedReportsScalarWhereInput[]
  }

  export type SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutCreatorInput, SatisfactionSurveysUncheckedCreateWithoutCreatorInput> | SatisfactionSurveysCreateWithoutCreatorInput[] | SatisfactionSurveysUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutCreatorInput | SatisfactionSurveysCreateOrConnectWithoutCreatorInput[]
    upsert?: SatisfactionSurveysUpsertWithWhereUniqueWithoutCreatorInput | SatisfactionSurveysUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: SatisfactionSurveysCreateManyCreatorInputEnvelope
    set?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    disconnect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    delete?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    connect?: SatisfactionSurveysWhereUniqueInput | SatisfactionSurveysWhereUniqueInput[]
    update?: SatisfactionSurveysUpdateWithWhereUniqueWithoutCreatorInput | SatisfactionSurveysUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: SatisfactionSurveysUpdateManyWithWhereWithoutCreatorInput | SatisfactionSurveysUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: SatisfactionSurveysScalarWhereInput | SatisfactionSurveysScalarWhereInput[]
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUserPermissionsInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGrantedPermissionsInput = {
    create?: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrantedPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionsInput
    upsert?: PermissionUpsertWithoutUserPermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUserPermissionsInput, PermissionUpdateWithoutUserPermissionsInput>, PermissionUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type UserUpdateOneWithoutGrantedPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrantedPermissionsInput
    upsert?: UserUpsertWithoutGrantedPermissionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGrantedPermissionsInput, UserUpdateWithoutGrantedPermissionsInput>, UserUncheckedUpdateWithoutGrantedPermissionsInput>
  }

  export type UserCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<TenantCreateWithoutActivityLogsInput, TenantUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutActivityLogsInput
    connect?: TenantWhereUniqueInput
  }

  export type UserUpdateOneWithoutActivityLogsNestedInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    upsert?: UserUpsertWithoutActivityLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLogsInput, UserUpdateWithoutActivityLogsInput>, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type TenantUpdateOneWithoutActivityLogsNestedInput = {
    create?: XOR<TenantCreateWithoutActivityLogsInput, TenantUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutActivityLogsInput
    upsert?: TenantUpsertWithoutActivityLogsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutActivityLogsInput, TenantUpdateWithoutActivityLogsInput>, TenantUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserCreateNestedOneWithoutSmtpUsersInput = {
    create?: XOR<UserCreateWithoutSmtpUsersInput, UserUncheckedCreateWithoutSmtpUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSmtpUsersInput
    connect?: UserWhereUniqueInput
  }

  export type EmailDomainCreateNestedManyWithoutSmtpUserInput = {
    create?: XOR<EmailDomainCreateWithoutSmtpUserInput, EmailDomainUncheckedCreateWithoutSmtpUserInput> | EmailDomainCreateWithoutSmtpUserInput[] | EmailDomainUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutSmtpUserInput | EmailDomainCreateOrConnectWithoutSmtpUserInput[]
    createMany?: EmailDomainCreateManySmtpUserInputEnvelope
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
  }

  export type AuthAttemptCreateNestedManyWithoutSmtpUserInput = {
    create?: XOR<AuthAttemptCreateWithoutSmtpUserInput, AuthAttemptUncheckedCreateWithoutSmtpUserInput> | AuthAttemptCreateWithoutSmtpUserInput[] | AuthAttemptUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: AuthAttemptCreateOrConnectWithoutSmtpUserInput | AuthAttemptCreateOrConnectWithoutSmtpUserInput[]
    createMany?: AuthAttemptCreateManySmtpUserInputEnvelope
    connect?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
  }

  export type EmailDomainUncheckedCreateNestedManyWithoutSmtpUserInput = {
    create?: XOR<EmailDomainCreateWithoutSmtpUserInput, EmailDomainUncheckedCreateWithoutSmtpUserInput> | EmailDomainCreateWithoutSmtpUserInput[] | EmailDomainUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutSmtpUserInput | EmailDomainCreateOrConnectWithoutSmtpUserInput[]
    createMany?: EmailDomainCreateManySmtpUserInputEnvelope
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
  }

  export type AuthAttemptUncheckedCreateNestedManyWithoutSmtpUserInput = {
    create?: XOR<AuthAttemptCreateWithoutSmtpUserInput, AuthAttemptUncheckedCreateWithoutSmtpUserInput> | AuthAttemptCreateWithoutSmtpUserInput[] | AuthAttemptUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: AuthAttemptCreateOrConnectWithoutSmtpUserInput | AuthAttemptCreateOrConnectWithoutSmtpUserInput[]
    createMany?: AuthAttemptCreateManySmtpUserInputEnvelope
    connect?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutSmtpUsersNestedInput = {
    create?: XOR<UserCreateWithoutSmtpUsersInput, UserUncheckedCreateWithoutSmtpUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSmtpUsersInput
    upsert?: UserUpsertWithoutSmtpUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSmtpUsersInput, UserUpdateWithoutSmtpUsersInput>, UserUncheckedUpdateWithoutSmtpUsersInput>
  }

  export type EmailDomainUpdateManyWithoutSmtpUserNestedInput = {
    create?: XOR<EmailDomainCreateWithoutSmtpUserInput, EmailDomainUncheckedCreateWithoutSmtpUserInput> | EmailDomainCreateWithoutSmtpUserInput[] | EmailDomainUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutSmtpUserInput | EmailDomainCreateOrConnectWithoutSmtpUserInput[]
    upsert?: EmailDomainUpsertWithWhereUniqueWithoutSmtpUserInput | EmailDomainUpsertWithWhereUniqueWithoutSmtpUserInput[]
    createMany?: EmailDomainCreateManySmtpUserInputEnvelope
    set?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    disconnect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    delete?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    update?: EmailDomainUpdateWithWhereUniqueWithoutSmtpUserInput | EmailDomainUpdateWithWhereUniqueWithoutSmtpUserInput[]
    updateMany?: EmailDomainUpdateManyWithWhereWithoutSmtpUserInput | EmailDomainUpdateManyWithWhereWithoutSmtpUserInput[]
    deleteMany?: EmailDomainScalarWhereInput | EmailDomainScalarWhereInput[]
  }

  export type AuthAttemptUpdateManyWithoutSmtpUserNestedInput = {
    create?: XOR<AuthAttemptCreateWithoutSmtpUserInput, AuthAttemptUncheckedCreateWithoutSmtpUserInput> | AuthAttemptCreateWithoutSmtpUserInput[] | AuthAttemptUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: AuthAttemptCreateOrConnectWithoutSmtpUserInput | AuthAttemptCreateOrConnectWithoutSmtpUserInput[]
    upsert?: AuthAttemptUpsertWithWhereUniqueWithoutSmtpUserInput | AuthAttemptUpsertWithWhereUniqueWithoutSmtpUserInput[]
    createMany?: AuthAttemptCreateManySmtpUserInputEnvelope
    set?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    disconnect?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    delete?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    connect?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    update?: AuthAttemptUpdateWithWhereUniqueWithoutSmtpUserInput | AuthAttemptUpdateWithWhereUniqueWithoutSmtpUserInput[]
    updateMany?: AuthAttemptUpdateManyWithWhereWithoutSmtpUserInput | AuthAttemptUpdateManyWithWhereWithoutSmtpUserInput[]
    deleteMany?: AuthAttemptScalarWhereInput | AuthAttemptScalarWhereInput[]
  }

  export type EmailDomainUncheckedUpdateManyWithoutSmtpUserNestedInput = {
    create?: XOR<EmailDomainCreateWithoutSmtpUserInput, EmailDomainUncheckedCreateWithoutSmtpUserInput> | EmailDomainCreateWithoutSmtpUserInput[] | EmailDomainUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: EmailDomainCreateOrConnectWithoutSmtpUserInput | EmailDomainCreateOrConnectWithoutSmtpUserInput[]
    upsert?: EmailDomainUpsertWithWhereUniqueWithoutSmtpUserInput | EmailDomainUpsertWithWhereUniqueWithoutSmtpUserInput[]
    createMany?: EmailDomainCreateManySmtpUserInputEnvelope
    set?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    disconnect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    delete?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    connect?: EmailDomainWhereUniqueInput | EmailDomainWhereUniqueInput[]
    update?: EmailDomainUpdateWithWhereUniqueWithoutSmtpUserInput | EmailDomainUpdateWithWhereUniqueWithoutSmtpUserInput[]
    updateMany?: EmailDomainUpdateManyWithWhereWithoutSmtpUserInput | EmailDomainUpdateManyWithWhereWithoutSmtpUserInput[]
    deleteMany?: EmailDomainScalarWhereInput | EmailDomainScalarWhereInput[]
  }

  export type AuthAttemptUncheckedUpdateManyWithoutSmtpUserNestedInput = {
    create?: XOR<AuthAttemptCreateWithoutSmtpUserInput, AuthAttemptUncheckedCreateWithoutSmtpUserInput> | AuthAttemptCreateWithoutSmtpUserInput[] | AuthAttemptUncheckedCreateWithoutSmtpUserInput[]
    connectOrCreate?: AuthAttemptCreateOrConnectWithoutSmtpUserInput | AuthAttemptCreateOrConnectWithoutSmtpUserInput[]
    upsert?: AuthAttemptUpsertWithWhereUniqueWithoutSmtpUserInput | AuthAttemptUpsertWithWhereUniqueWithoutSmtpUserInput[]
    createMany?: AuthAttemptCreateManySmtpUserInputEnvelope
    set?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    disconnect?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    delete?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    connect?: AuthAttemptWhereUniqueInput | AuthAttemptWhereUniqueInput[]
    update?: AuthAttemptUpdateWithWhereUniqueWithoutSmtpUserInput | AuthAttemptUpdateWithWhereUniqueWithoutSmtpUserInput[]
    updateMany?: AuthAttemptUpdateManyWithWhereWithoutSmtpUserInput | AuthAttemptUpdateManyWithWhereWithoutSmtpUserInput[]
    deleteMany?: AuthAttemptScalarWhereInput | AuthAttemptScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutEmailDomainsInput = {
    create?: XOR<TenantCreateWithoutEmailDomainsInput, TenantUncheckedCreateWithoutEmailDomainsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutEmailDomainsInput
    connect?: TenantWhereUniqueInput
  }

  export type SmtpUserCreateNestedOneWithoutDomainsInput = {
    create?: XOR<SmtpUserCreateWithoutDomainsInput, SmtpUserUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: SmtpUserCreateOrConnectWithoutDomainsInput
    connect?: SmtpUserWhereUniqueInput
  }

  export type DkimKeyCreateNestedManyWithoutDomainInput = {
    create?: XOR<DkimKeyCreateWithoutDomainInput, DkimKeyUncheckedCreateWithoutDomainInput> | DkimKeyCreateWithoutDomainInput[] | DkimKeyUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DkimKeyCreateOrConnectWithoutDomainInput | DkimKeyCreateOrConnectWithoutDomainInput[]
    createMany?: DkimKeyCreateManyDomainInputEnvelope
    connect?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
  }

  export type EmailCreateNestedManyWithoutDomainInput = {
    create?: XOR<EmailCreateWithoutDomainInput, EmailUncheckedCreateWithoutDomainInput> | EmailCreateWithoutDomainInput[] | EmailUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutDomainInput | EmailCreateOrConnectWithoutDomainInput[]
    createMany?: EmailCreateManyDomainInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type DkimKeyUncheckedCreateNestedManyWithoutDomainInput = {
    create?: XOR<DkimKeyCreateWithoutDomainInput, DkimKeyUncheckedCreateWithoutDomainInput> | DkimKeyCreateWithoutDomainInput[] | DkimKeyUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DkimKeyCreateOrConnectWithoutDomainInput | DkimKeyCreateOrConnectWithoutDomainInput[]
    createMany?: DkimKeyCreateManyDomainInputEnvelope
    connect?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
  }

  export type EmailUncheckedCreateNestedManyWithoutDomainInput = {
    create?: XOR<EmailCreateWithoutDomainInput, EmailUncheckedCreateWithoutDomainInput> | EmailCreateWithoutDomainInput[] | EmailUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutDomainInput | EmailCreateOrConnectWithoutDomainInput[]
    createMany?: EmailCreateManyDomainInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type TenantUpdateOneWithoutEmailDomainsNestedInput = {
    create?: XOR<TenantCreateWithoutEmailDomainsInput, TenantUncheckedCreateWithoutEmailDomainsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutEmailDomainsInput
    upsert?: TenantUpsertWithoutEmailDomainsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutEmailDomainsInput, TenantUpdateWithoutEmailDomainsInput>, TenantUncheckedUpdateWithoutEmailDomainsInput>
  }

  export type SmtpUserUpdateOneRequiredWithoutDomainsNestedInput = {
    create?: XOR<SmtpUserCreateWithoutDomainsInput, SmtpUserUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: SmtpUserCreateOrConnectWithoutDomainsInput
    upsert?: SmtpUserUpsertWithoutDomainsInput
    connect?: SmtpUserWhereUniqueInput
    update?: XOR<XOR<SmtpUserUpdateToOneWithWhereWithoutDomainsInput, SmtpUserUpdateWithoutDomainsInput>, SmtpUserUncheckedUpdateWithoutDomainsInput>
  }

  export type DkimKeyUpdateManyWithoutDomainNestedInput = {
    create?: XOR<DkimKeyCreateWithoutDomainInput, DkimKeyUncheckedCreateWithoutDomainInput> | DkimKeyCreateWithoutDomainInput[] | DkimKeyUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DkimKeyCreateOrConnectWithoutDomainInput | DkimKeyCreateOrConnectWithoutDomainInput[]
    upsert?: DkimKeyUpsertWithWhereUniqueWithoutDomainInput | DkimKeyUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: DkimKeyCreateManyDomainInputEnvelope
    set?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    disconnect?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    delete?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    connect?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    update?: DkimKeyUpdateWithWhereUniqueWithoutDomainInput | DkimKeyUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: DkimKeyUpdateManyWithWhereWithoutDomainInput | DkimKeyUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: DkimKeyScalarWhereInput | DkimKeyScalarWhereInput[]
  }

  export type EmailUpdateManyWithoutDomainNestedInput = {
    create?: XOR<EmailCreateWithoutDomainInput, EmailUncheckedCreateWithoutDomainInput> | EmailCreateWithoutDomainInput[] | EmailUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutDomainInput | EmailCreateOrConnectWithoutDomainInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutDomainInput | EmailUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: EmailCreateManyDomainInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutDomainInput | EmailUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutDomainInput | EmailUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type DkimKeyUncheckedUpdateManyWithoutDomainNestedInput = {
    create?: XOR<DkimKeyCreateWithoutDomainInput, DkimKeyUncheckedCreateWithoutDomainInput> | DkimKeyCreateWithoutDomainInput[] | DkimKeyUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DkimKeyCreateOrConnectWithoutDomainInput | DkimKeyCreateOrConnectWithoutDomainInput[]
    upsert?: DkimKeyUpsertWithWhereUniqueWithoutDomainInput | DkimKeyUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: DkimKeyCreateManyDomainInputEnvelope
    set?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    disconnect?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    delete?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    connect?: DkimKeyWhereUniqueInput | DkimKeyWhereUniqueInput[]
    update?: DkimKeyUpdateWithWhereUniqueWithoutDomainInput | DkimKeyUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: DkimKeyUpdateManyWithWhereWithoutDomainInput | DkimKeyUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: DkimKeyScalarWhereInput | DkimKeyScalarWhereInput[]
  }

  export type EmailUncheckedUpdateManyWithoutDomainNestedInput = {
    create?: XOR<EmailCreateWithoutDomainInput, EmailUncheckedCreateWithoutDomainInput> | EmailCreateWithoutDomainInput[] | EmailUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutDomainInput | EmailCreateOrConnectWithoutDomainInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutDomainInput | EmailUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: EmailCreateManyDomainInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutDomainInput | EmailUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutDomainInput | EmailUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type EmailDomainCreateNestedOneWithoutDkimKeysInput = {
    create?: XOR<EmailDomainCreateWithoutDkimKeysInput, EmailDomainUncheckedCreateWithoutDkimKeysInput>
    connectOrCreate?: EmailDomainCreateOrConnectWithoutDkimKeysInput
    connect?: EmailDomainWhereUniqueInput
  }

  export type EmailDomainUpdateOneRequiredWithoutDkimKeysNestedInput = {
    create?: XOR<EmailDomainCreateWithoutDkimKeysInput, EmailDomainUncheckedCreateWithoutDkimKeysInput>
    connectOrCreate?: EmailDomainCreateOrConnectWithoutDkimKeysInput
    upsert?: EmailDomainUpsertWithoutDkimKeysInput
    connect?: EmailDomainWhereUniqueInput
    update?: XOR<XOR<EmailDomainUpdateToOneWithWhereWithoutDkimKeysInput, EmailDomainUpdateWithoutDkimKeysInput>, EmailDomainUncheckedUpdateWithoutDkimKeysInput>
  }

  export type EmailDomainCreateNestedOneWithoutEmailsInput = {
    create?: XOR<EmailDomainCreateWithoutEmailsInput, EmailDomainUncheckedCreateWithoutEmailsInput>
    connectOrCreate?: EmailDomainCreateOrConnectWithoutEmailsInput
    connect?: EmailDomainWhereUniqueInput
  }

  export type EmailDomainUpdateOneWithoutEmailsNestedInput = {
    create?: XOR<EmailDomainCreateWithoutEmailsInput, EmailDomainUncheckedCreateWithoutEmailsInput>
    connectOrCreate?: EmailDomainCreateOrConnectWithoutEmailsInput
    upsert?: EmailDomainUpsertWithoutEmailsInput
    disconnect?: EmailDomainWhereInput | boolean
    delete?: EmailDomainWhereInput | boolean
    connect?: EmailDomainWhereUniqueInput
    update?: XOR<XOR<EmailDomainUpdateToOneWithWhereWithoutEmailsInput, EmailDomainUpdateWithoutEmailsInput>, EmailDomainUncheckedUpdateWithoutEmailsInput>
  }

  export type SmtpUserCreateNestedOneWithoutAuthAttemptsInput = {
    create?: XOR<SmtpUserCreateWithoutAuthAttemptsInput, SmtpUserUncheckedCreateWithoutAuthAttemptsInput>
    connectOrCreate?: SmtpUserCreateOrConnectWithoutAuthAttemptsInput
    connect?: SmtpUserWhereUniqueInput
  }

  export type SmtpUserUpdateOneWithoutAuthAttemptsNestedInput = {
    create?: XOR<SmtpUserCreateWithoutAuthAttemptsInput, SmtpUserUncheckedCreateWithoutAuthAttemptsInput>
    connectOrCreate?: SmtpUserCreateOrConnectWithoutAuthAttemptsInput
    upsert?: SmtpUserUpsertWithoutAuthAttemptsInput
    disconnect?: SmtpUserWhereInput | boolean
    delete?: SmtpUserWhereInput | boolean
    connect?: SmtpUserWhereUniqueInput
    update?: XOR<XOR<SmtpUserUpdateToOneWithWhereWithoutAuthAttemptsInput, SmtpUserUpdateWithoutAuthAttemptsInput>, SmtpUserUncheckedUpdateWithoutAuthAttemptsInput>
  }

  export type UserCreateNestedOneWithoutUserSessionsInput = {
    create?: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserSessionsNestedInput = {
    create?: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSessionsInput
    upsert?: UserUpsertWithoutUserSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserSessionsInput, UserUpdateWithoutUserSessionsInput>, UserUncheckedUpdateWithoutUserSessionsInput>
  }

  export type UserCreateNestedOneWithoutUserTokensInput = {
    create?: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserTokensNestedInput = {
    create?: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserTokensInput
    upsert?: UserUpsertWithoutUserTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserTokensInput, UserUpdateWithoutUserTokensInput>, UserUncheckedUpdateWithoutUserTokensInput>
  }

  export type UserCreateNestedOneWithoutPasswordResetTokensInput = {
    create?: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordResetTokensNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetTokensInput
    upsert?: UserUpsertWithoutPasswordResetTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetTokensInput, UserUpdateWithoutPasswordResetTokensInput>, UserUncheckedUpdateWithoutPasswordResetTokensInput>
  }

  export type UserCreateNestedOneWithoutEmailVerificationTokensInput = {
    create?: XOR<UserCreateWithoutEmailVerificationTokensInput, UserUncheckedCreateWithoutEmailVerificationTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailVerificationTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmailVerificationTokensNestedInput = {
    create?: XOR<UserCreateWithoutEmailVerificationTokensInput, UserUncheckedCreateWithoutEmailVerificationTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailVerificationTokensInput
    upsert?: UserUpsertWithoutEmailVerificationTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmailVerificationTokensInput, UserUpdateWithoutEmailVerificationTokensInput>, UserUncheckedUpdateWithoutEmailVerificationTokensInput>
  }

  export type TenantCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutInvoicesInput
    connect?: TenantWhereUniqueInput
  }

  export type InvoiceItemCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TenantUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutInvoicesInput
    upsert?: TenantUpsertWithoutInvoicesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutInvoicesInput, TenantUpdateWithoutInvoicesInput>, TenantUncheckedUpdateWithoutInvoicesInput>
  }

  export type InvoiceItemUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput> | InvoiceItemCreateWithoutInvoiceInput[] | InvoiceItemUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceItemCreateOrConnectWithoutInvoiceInput | InvoiceItemCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    disconnect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    delete?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    connect?: InvoiceItemWhereUniqueInput | InvoiceItemWhereUniqueInput[]
    update?: InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceItemUpdateManyWithWhereWithoutInvoiceInput | InvoiceItemUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutItensInput = {
    create?: XOR<InvoiceCreateWithoutItensInput, InvoiceUncheckedCreateWithoutItensInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItensInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutItensNestedInput = {
    create?: XOR<InvoiceCreateWithoutItensInput, InvoiceUncheckedCreateWithoutItensInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItensInput
    upsert?: InvoiceUpsertWithoutItensInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutItensInput, InvoiceUpdateWithoutItensInput>, InvoiceUncheckedUpdateWithoutItensInput>
  }

  export type UserCreateNestedOneWithoutAnalyticsUserSessionsInput = {
    create?: XOR<UserCreateWithoutAnalyticsUserSessionsInput, UserUncheckedCreateWithoutAnalyticsUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsUserSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutAnalyticsUserSessionsInput = {
    create?: XOR<TenantCreateWithoutAnalyticsUserSessionsInput, TenantUncheckedCreateWithoutAnalyticsUserSessionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAnalyticsUserSessionsInput
    connect?: TenantWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAnalyticsUserSessionsNestedInput = {
    create?: XOR<UserCreateWithoutAnalyticsUserSessionsInput, UserUncheckedCreateWithoutAnalyticsUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsUserSessionsInput
    upsert?: UserUpsertWithoutAnalyticsUserSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnalyticsUserSessionsInput, UserUpdateWithoutAnalyticsUserSessionsInput>, UserUncheckedUpdateWithoutAnalyticsUserSessionsInput>
  }

  export type TenantUpdateOneWithoutAnalyticsUserSessionsNestedInput = {
    create?: XOR<TenantCreateWithoutAnalyticsUserSessionsInput, TenantUncheckedCreateWithoutAnalyticsUserSessionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAnalyticsUserSessionsInput
    upsert?: TenantUpsertWithoutAnalyticsUserSessionsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutAnalyticsUserSessionsInput, TenantUpdateWithoutAnalyticsUserSessionsInput>, TenantUncheckedUpdateWithoutAnalyticsUserSessionsInput>
  }

  export type UserCreateNestedOneWithoutFeatureUsageInput = {
    create?: XOR<UserCreateWithoutFeatureUsageInput, UserUncheckedCreateWithoutFeatureUsageInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureUsageInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutFeatureUsageInput = {
    create?: XOR<TenantCreateWithoutFeatureUsageInput, TenantUncheckedCreateWithoutFeatureUsageInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFeatureUsageInput
    connect?: TenantWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeatureUsageNestedInput = {
    create?: XOR<UserCreateWithoutFeatureUsageInput, UserUncheckedCreateWithoutFeatureUsageInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureUsageInput
    upsert?: UserUpsertWithoutFeatureUsageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeatureUsageInput, UserUpdateWithoutFeatureUsageInput>, UserUncheckedUpdateWithoutFeatureUsageInput>
  }

  export type TenantUpdateOneWithoutFeatureUsageNestedInput = {
    create?: XOR<TenantCreateWithoutFeatureUsageInput, TenantUncheckedCreateWithoutFeatureUsageInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFeatureUsageInput
    upsert?: TenantUpsertWithoutFeatureUsageInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutFeatureUsageInput, TenantUpdateWithoutFeatureUsageInput>, TenantUncheckedUpdateWithoutFeatureUsageInput>
  }

  export type UserCreateNestedOneWithoutPageViewsInput = {
    create?: XOR<UserCreateWithoutPageViewsInput, UserUncheckedCreateWithoutPageViewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPageViewsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPageViewsInput = {
    create?: XOR<TenantCreateWithoutPageViewsInput, TenantUncheckedCreateWithoutPageViewsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPageViewsInput
    connect?: TenantWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPageViewsNestedInput = {
    create?: XOR<UserCreateWithoutPageViewsInput, UserUncheckedCreateWithoutPageViewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPageViewsInput
    upsert?: UserUpsertWithoutPageViewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPageViewsInput, UserUpdateWithoutPageViewsInput>, UserUncheckedUpdateWithoutPageViewsInput>
  }

  export type TenantUpdateOneWithoutPageViewsNestedInput = {
    create?: XOR<TenantCreateWithoutPageViewsInput, TenantUncheckedCreateWithoutPageViewsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPageViewsInput
    upsert?: TenantUpsertWithoutPageViewsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPageViewsInput, TenantUpdateWithoutPageViewsInput>, TenantUncheckedUpdateWithoutPageViewsInput>
  }

  export type TenantCreateNestedOneWithoutModuleAnalyticsInput = {
    create?: XOR<TenantCreateWithoutModuleAnalyticsInput, TenantUncheckedCreateWithoutModuleAnalyticsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutModuleAnalyticsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneWithoutModuleAnalyticsNestedInput = {
    create?: XOR<TenantCreateWithoutModuleAnalyticsInput, TenantUncheckedCreateWithoutModuleAnalyticsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutModuleAnalyticsInput
    upsert?: TenantUpsertWithoutModuleAnalyticsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutModuleAnalyticsInput, TenantUpdateWithoutModuleAnalyticsInput>, TenantUncheckedUpdateWithoutModuleAnalyticsInput>
  }

  export type TenantCreateNestedOneWithoutGeographicDataInput = {
    create?: XOR<TenantCreateWithoutGeographicDataInput, TenantUncheckedCreateWithoutGeographicDataInput>
    connectOrCreate?: TenantCreateOrConnectWithoutGeographicDataInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneWithoutGeographicDataNestedInput = {
    create?: XOR<TenantCreateWithoutGeographicDataInput, TenantUncheckedCreateWithoutGeographicDataInput>
    connectOrCreate?: TenantCreateOrConnectWithoutGeographicDataInput
    upsert?: TenantUpsertWithoutGeographicDataInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutGeographicDataInput, TenantUpdateWithoutGeographicDataInput>, TenantUncheckedUpdateWithoutGeographicDataInput>
  }

  export type UserCreateNestedOneWithoutCreatedReportsInput = {
    create?: XOR<UserCreateWithoutCreatedReportsInput, UserUncheckedCreateWithoutCreatedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedReportsInput
    connect?: UserWhereUniqueInput
  }

  export type ReportSchedulesCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportSchedulesCreateWithoutReportInput, ReportSchedulesUncheckedCreateWithoutReportInput> | ReportSchedulesCreateWithoutReportInput[] | ReportSchedulesUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSchedulesCreateOrConnectWithoutReportInput | ReportSchedulesCreateOrConnectWithoutReportInput[]
    createMany?: ReportSchedulesCreateManyReportInputEnvelope
    connect?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
  }

  export type ReportHistoryCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportHistoryCreateWithoutReportInput, ReportHistoryUncheckedCreateWithoutReportInput> | ReportHistoryCreateWithoutReportInput[] | ReportHistoryUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportHistoryCreateOrConnectWithoutReportInput | ReportHistoryCreateOrConnectWithoutReportInput[]
    createMany?: ReportHistoryCreateManyReportInputEnvelope
    connect?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
  }

  export type ReportSchedulesUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportSchedulesCreateWithoutReportInput, ReportSchedulesUncheckedCreateWithoutReportInput> | ReportSchedulesCreateWithoutReportInput[] | ReportSchedulesUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSchedulesCreateOrConnectWithoutReportInput | ReportSchedulesCreateOrConnectWithoutReportInput[]
    createMany?: ReportSchedulesCreateManyReportInputEnvelope
    connect?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
  }

  export type ReportHistoryUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportHistoryCreateWithoutReportInput, ReportHistoryUncheckedCreateWithoutReportInput> | ReportHistoryCreateWithoutReportInput[] | ReportHistoryUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportHistoryCreateOrConnectWithoutReportInput | ReportHistoryCreateOrConnectWithoutReportInput[]
    createMany?: ReportHistoryCreateManyReportInputEnvelope
    connect?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedReportsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedReportsInput, UserUncheckedCreateWithoutCreatedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedReportsInput
    upsert?: UserUpsertWithoutCreatedReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedReportsInput, UserUpdateWithoutCreatedReportsInput>, UserUncheckedUpdateWithoutCreatedReportsInput>
  }

  export type ReportSchedulesUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportSchedulesCreateWithoutReportInput, ReportSchedulesUncheckedCreateWithoutReportInput> | ReportSchedulesCreateWithoutReportInput[] | ReportSchedulesUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSchedulesCreateOrConnectWithoutReportInput | ReportSchedulesCreateOrConnectWithoutReportInput[]
    upsert?: ReportSchedulesUpsertWithWhereUniqueWithoutReportInput | ReportSchedulesUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportSchedulesCreateManyReportInputEnvelope
    set?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    disconnect?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    delete?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    connect?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    update?: ReportSchedulesUpdateWithWhereUniqueWithoutReportInput | ReportSchedulesUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportSchedulesUpdateManyWithWhereWithoutReportInput | ReportSchedulesUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportSchedulesScalarWhereInput | ReportSchedulesScalarWhereInput[]
  }

  export type ReportHistoryUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportHistoryCreateWithoutReportInput, ReportHistoryUncheckedCreateWithoutReportInput> | ReportHistoryCreateWithoutReportInput[] | ReportHistoryUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportHistoryCreateOrConnectWithoutReportInput | ReportHistoryCreateOrConnectWithoutReportInput[]
    upsert?: ReportHistoryUpsertWithWhereUniqueWithoutReportInput | ReportHistoryUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportHistoryCreateManyReportInputEnvelope
    set?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    disconnect?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    delete?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    connect?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    update?: ReportHistoryUpdateWithWhereUniqueWithoutReportInput | ReportHistoryUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportHistoryUpdateManyWithWhereWithoutReportInput | ReportHistoryUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportHistoryScalarWhereInput | ReportHistoryScalarWhereInput[]
  }

  export type ReportSchedulesUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportSchedulesCreateWithoutReportInput, ReportSchedulesUncheckedCreateWithoutReportInput> | ReportSchedulesCreateWithoutReportInput[] | ReportSchedulesUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportSchedulesCreateOrConnectWithoutReportInput | ReportSchedulesCreateOrConnectWithoutReportInput[]
    upsert?: ReportSchedulesUpsertWithWhereUniqueWithoutReportInput | ReportSchedulesUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportSchedulesCreateManyReportInputEnvelope
    set?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    disconnect?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    delete?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    connect?: ReportSchedulesWhereUniqueInput | ReportSchedulesWhereUniqueInput[]
    update?: ReportSchedulesUpdateWithWhereUniqueWithoutReportInput | ReportSchedulesUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportSchedulesUpdateManyWithWhereWithoutReportInput | ReportSchedulesUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportSchedulesScalarWhereInput | ReportSchedulesScalarWhereInput[]
  }

  export type ReportHistoryUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportHistoryCreateWithoutReportInput, ReportHistoryUncheckedCreateWithoutReportInput> | ReportHistoryCreateWithoutReportInput[] | ReportHistoryUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportHistoryCreateOrConnectWithoutReportInput | ReportHistoryCreateOrConnectWithoutReportInput[]
    upsert?: ReportHistoryUpsertWithWhereUniqueWithoutReportInput | ReportHistoryUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportHistoryCreateManyReportInputEnvelope
    set?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    disconnect?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    delete?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    connect?: ReportHistoryWhereUniqueInput | ReportHistoryWhereUniqueInput[]
    update?: ReportHistoryUpdateWithWhereUniqueWithoutReportInput | ReportHistoryUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportHistoryUpdateManyWithWhereWithoutReportInput | ReportHistoryUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportHistoryScalarWhereInput | ReportHistoryScalarWhereInput[]
  }

  export type AutomatedReportsCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<AutomatedReportsCreateWithoutSchedulesInput, AutomatedReportsUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutSchedulesInput
    connect?: AutomatedReportsWhereUniqueInput
  }

  export type ReportRecipientsCreateNestedManyWithoutScheduleInput = {
    create?: XOR<ReportRecipientsCreateWithoutScheduleInput, ReportRecipientsUncheckedCreateWithoutScheduleInput> | ReportRecipientsCreateWithoutScheduleInput[] | ReportRecipientsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ReportRecipientsCreateOrConnectWithoutScheduleInput | ReportRecipientsCreateOrConnectWithoutScheduleInput[]
    createMany?: ReportRecipientsCreateManyScheduleInputEnvelope
    connect?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
  }

  export type ReportRecipientsUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<ReportRecipientsCreateWithoutScheduleInput, ReportRecipientsUncheckedCreateWithoutScheduleInput> | ReportRecipientsCreateWithoutScheduleInput[] | ReportRecipientsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ReportRecipientsCreateOrConnectWithoutScheduleInput | ReportRecipientsCreateOrConnectWithoutScheduleInput[]
    createMany?: ReportRecipientsCreateManyScheduleInputEnvelope
    connect?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
  }

  export type AutomatedReportsUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<AutomatedReportsCreateWithoutSchedulesInput, AutomatedReportsUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutSchedulesInput
    upsert?: AutomatedReportsUpsertWithoutSchedulesInput
    connect?: AutomatedReportsWhereUniqueInput
    update?: XOR<XOR<AutomatedReportsUpdateToOneWithWhereWithoutSchedulesInput, AutomatedReportsUpdateWithoutSchedulesInput>, AutomatedReportsUncheckedUpdateWithoutSchedulesInput>
  }

  export type ReportRecipientsUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<ReportRecipientsCreateWithoutScheduleInput, ReportRecipientsUncheckedCreateWithoutScheduleInput> | ReportRecipientsCreateWithoutScheduleInput[] | ReportRecipientsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ReportRecipientsCreateOrConnectWithoutScheduleInput | ReportRecipientsCreateOrConnectWithoutScheduleInput[]
    upsert?: ReportRecipientsUpsertWithWhereUniqueWithoutScheduleInput | ReportRecipientsUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: ReportRecipientsCreateManyScheduleInputEnvelope
    set?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    disconnect?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    delete?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    connect?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    update?: ReportRecipientsUpdateWithWhereUniqueWithoutScheduleInput | ReportRecipientsUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: ReportRecipientsUpdateManyWithWhereWithoutScheduleInput | ReportRecipientsUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: ReportRecipientsScalarWhereInput | ReportRecipientsScalarWhereInput[]
  }

  export type ReportRecipientsUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<ReportRecipientsCreateWithoutScheduleInput, ReportRecipientsUncheckedCreateWithoutScheduleInput> | ReportRecipientsCreateWithoutScheduleInput[] | ReportRecipientsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: ReportRecipientsCreateOrConnectWithoutScheduleInput | ReportRecipientsCreateOrConnectWithoutScheduleInput[]
    upsert?: ReportRecipientsUpsertWithWhereUniqueWithoutScheduleInput | ReportRecipientsUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: ReportRecipientsCreateManyScheduleInputEnvelope
    set?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    disconnect?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    delete?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    connect?: ReportRecipientsWhereUniqueInput | ReportRecipientsWhereUniqueInput[]
    update?: ReportRecipientsUpdateWithWhereUniqueWithoutScheduleInput | ReportRecipientsUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: ReportRecipientsUpdateManyWithWhereWithoutScheduleInput | ReportRecipientsUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: ReportRecipientsScalarWhereInput | ReportRecipientsScalarWhereInput[]
  }

  export type ReportSchedulesCreateNestedOneWithoutRecipientsInput = {
    create?: XOR<ReportSchedulesCreateWithoutRecipientsInput, ReportSchedulesUncheckedCreateWithoutRecipientsInput>
    connectOrCreate?: ReportSchedulesCreateOrConnectWithoutRecipientsInput
    connect?: ReportSchedulesWhereUniqueInput
  }

  export type ReportSchedulesUpdateOneRequiredWithoutRecipientsNestedInput = {
    create?: XOR<ReportSchedulesCreateWithoutRecipientsInput, ReportSchedulesUncheckedCreateWithoutRecipientsInput>
    connectOrCreate?: ReportSchedulesCreateOrConnectWithoutRecipientsInput
    upsert?: ReportSchedulesUpsertWithoutRecipientsInput
    connect?: ReportSchedulesWhereUniqueInput
    update?: XOR<XOR<ReportSchedulesUpdateToOneWithWhereWithoutRecipientsInput, ReportSchedulesUpdateWithoutRecipientsInput>, ReportSchedulesUncheckedUpdateWithoutRecipientsInput>
  }

  export type AutomatedReportsCreateNestedOneWithoutHistoryInput = {
    create?: XOR<AutomatedReportsCreateWithoutHistoryInput, AutomatedReportsUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutHistoryInput
    connect?: AutomatedReportsWhereUniqueInput
  }

  export type AutomatedReportsUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<AutomatedReportsCreateWithoutHistoryInput, AutomatedReportsUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: AutomatedReportsCreateOrConnectWithoutHistoryInput
    upsert?: AutomatedReportsUpsertWithoutHistoryInput
    connect?: AutomatedReportsWhereUniqueInput
    update?: XOR<XOR<AutomatedReportsUpdateToOneWithWhereWithoutHistoryInput, AutomatedReportsUpdateWithoutHistoryInput>, AutomatedReportsUncheckedUpdateWithoutHistoryInput>
  }

  export type TenantCreateNestedOneWithoutSatisfactionSurveysInput = {
    create?: XOR<TenantCreateWithoutSatisfactionSurveysInput, TenantUncheckedCreateWithoutSatisfactionSurveysInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSatisfactionSurveysInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedSurveysInput = {
    create?: XOR<UserCreateWithoutCreatedSurveysInput, UserUncheckedCreateWithoutCreatedSurveysInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSurveysInput
    connect?: UserWhereUniqueInput
  }

  export type NpsResponsesCreateNestedManyWithoutSurveyInput = {
    create?: XOR<NpsResponsesCreateWithoutSurveyInput, NpsResponsesUncheckedCreateWithoutSurveyInput> | NpsResponsesCreateWithoutSurveyInput[] | NpsResponsesUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutSurveyInput | NpsResponsesCreateOrConnectWithoutSurveyInput[]
    createMany?: NpsResponsesCreateManySurveyInputEnvelope
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
  }

  export type FeedbackSubmissionsCreateNestedManyWithoutSurveyInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutSurveyInput, FeedbackSubmissionsUncheckedCreateWithoutSurveyInput> | FeedbackSubmissionsCreateWithoutSurveyInput[] | FeedbackSubmissionsUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutSurveyInput | FeedbackSubmissionsCreateOrConnectWithoutSurveyInput[]
    createMany?: FeedbackSubmissionsCreateManySurveyInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type NpsResponsesUncheckedCreateNestedManyWithoutSurveyInput = {
    create?: XOR<NpsResponsesCreateWithoutSurveyInput, NpsResponsesUncheckedCreateWithoutSurveyInput> | NpsResponsesCreateWithoutSurveyInput[] | NpsResponsesUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutSurveyInput | NpsResponsesCreateOrConnectWithoutSurveyInput[]
    createMany?: NpsResponsesCreateManySurveyInputEnvelope
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
  }

  export type FeedbackSubmissionsUncheckedCreateNestedManyWithoutSurveyInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutSurveyInput, FeedbackSubmissionsUncheckedCreateWithoutSurveyInput> | FeedbackSubmissionsCreateWithoutSurveyInput[] | FeedbackSubmissionsUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutSurveyInput | FeedbackSubmissionsCreateOrConnectWithoutSurveyInput[]
    createMany?: FeedbackSubmissionsCreateManySurveyInputEnvelope
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
  }

  export type TenantUpdateOneWithoutSatisfactionSurveysNestedInput = {
    create?: XOR<TenantCreateWithoutSatisfactionSurveysInput, TenantUncheckedCreateWithoutSatisfactionSurveysInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSatisfactionSurveysInput
    upsert?: TenantUpsertWithoutSatisfactionSurveysInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSatisfactionSurveysInput, TenantUpdateWithoutSatisfactionSurveysInput>, TenantUncheckedUpdateWithoutSatisfactionSurveysInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedSurveysNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSurveysInput, UserUncheckedCreateWithoutCreatedSurveysInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSurveysInput
    upsert?: UserUpsertWithoutCreatedSurveysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSurveysInput, UserUpdateWithoutCreatedSurveysInput>, UserUncheckedUpdateWithoutCreatedSurveysInput>
  }

  export type NpsResponsesUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<NpsResponsesCreateWithoutSurveyInput, NpsResponsesUncheckedCreateWithoutSurveyInput> | NpsResponsesCreateWithoutSurveyInput[] | NpsResponsesUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutSurveyInput | NpsResponsesCreateOrConnectWithoutSurveyInput[]
    upsert?: NpsResponsesUpsertWithWhereUniqueWithoutSurveyInput | NpsResponsesUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: NpsResponsesCreateManySurveyInputEnvelope
    set?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    disconnect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    delete?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    update?: NpsResponsesUpdateWithWhereUniqueWithoutSurveyInput | NpsResponsesUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: NpsResponsesUpdateManyWithWhereWithoutSurveyInput | NpsResponsesUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
  }

  export type FeedbackSubmissionsUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutSurveyInput, FeedbackSubmissionsUncheckedCreateWithoutSurveyInput> | FeedbackSubmissionsCreateWithoutSurveyInput[] | FeedbackSubmissionsUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutSurveyInput | FeedbackSubmissionsCreateOrConnectWithoutSurveyInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutSurveyInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: FeedbackSubmissionsCreateManySurveyInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutSurveyInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutSurveyInput | FeedbackSubmissionsUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type NpsResponsesUncheckedUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<NpsResponsesCreateWithoutSurveyInput, NpsResponsesUncheckedCreateWithoutSurveyInput> | NpsResponsesCreateWithoutSurveyInput[] | NpsResponsesUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: NpsResponsesCreateOrConnectWithoutSurveyInput | NpsResponsesCreateOrConnectWithoutSurveyInput[]
    upsert?: NpsResponsesUpsertWithWhereUniqueWithoutSurveyInput | NpsResponsesUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: NpsResponsesCreateManySurveyInputEnvelope
    set?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    disconnect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    delete?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    connect?: NpsResponsesWhereUniqueInput | NpsResponsesWhereUniqueInput[]
    update?: NpsResponsesUpdateWithWhereUniqueWithoutSurveyInput | NpsResponsesUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: NpsResponsesUpdateManyWithWhereWithoutSurveyInput | NpsResponsesUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<FeedbackSubmissionsCreateWithoutSurveyInput, FeedbackSubmissionsUncheckedCreateWithoutSurveyInput> | FeedbackSubmissionsCreateWithoutSurveyInput[] | FeedbackSubmissionsUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: FeedbackSubmissionsCreateOrConnectWithoutSurveyInput | FeedbackSubmissionsCreateOrConnectWithoutSurveyInput[]
    upsert?: FeedbackSubmissionsUpsertWithWhereUniqueWithoutSurveyInput | FeedbackSubmissionsUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: FeedbackSubmissionsCreateManySurveyInputEnvelope
    set?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    disconnect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    delete?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    connect?: FeedbackSubmissionsWhereUniqueInput | FeedbackSubmissionsWhereUniqueInput[]
    update?: FeedbackSubmissionsUpdateWithWhereUniqueWithoutSurveyInput | FeedbackSubmissionsUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: FeedbackSubmissionsUpdateManyWithWhereWithoutSurveyInput | FeedbackSubmissionsUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
  }

  export type SatisfactionSurveysCreateNestedOneWithoutNpsResponsesInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutNpsResponsesInput, SatisfactionSurveysUncheckedCreateWithoutNpsResponsesInput>
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutNpsResponsesInput
    connect?: SatisfactionSurveysWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNpsResponsesInput = {
    create?: XOR<UserCreateWithoutNpsResponsesInput, UserUncheckedCreateWithoutNpsResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNpsResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutNpsResponsesInput = {
    create?: XOR<TenantCreateWithoutNpsResponsesInput, TenantUncheckedCreateWithoutNpsResponsesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNpsResponsesInput
    connect?: TenantWhereUniqueInput
  }

  export type SatisfactionSurveysUpdateOneRequiredWithoutNpsResponsesNestedInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutNpsResponsesInput, SatisfactionSurveysUncheckedCreateWithoutNpsResponsesInput>
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutNpsResponsesInput
    upsert?: SatisfactionSurveysUpsertWithoutNpsResponsesInput
    connect?: SatisfactionSurveysWhereUniqueInput
    update?: XOR<XOR<SatisfactionSurveysUpdateToOneWithWhereWithoutNpsResponsesInput, SatisfactionSurveysUpdateWithoutNpsResponsesInput>, SatisfactionSurveysUncheckedUpdateWithoutNpsResponsesInput>
  }

  export type UserUpdateOneWithoutNpsResponsesNestedInput = {
    create?: XOR<UserCreateWithoutNpsResponsesInput, UserUncheckedCreateWithoutNpsResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNpsResponsesInput
    upsert?: UserUpsertWithoutNpsResponsesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNpsResponsesInput, UserUpdateWithoutNpsResponsesInput>, UserUncheckedUpdateWithoutNpsResponsesInput>
  }

  export type TenantUpdateOneWithoutNpsResponsesNestedInput = {
    create?: XOR<TenantCreateWithoutNpsResponsesInput, TenantUncheckedCreateWithoutNpsResponsesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNpsResponsesInput
    upsert?: TenantUpsertWithoutNpsResponsesInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutNpsResponsesInput, TenantUpdateWithoutNpsResponsesInput>, TenantUncheckedUpdateWithoutNpsResponsesInput>
  }

  export type SatisfactionSurveysCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutFeedbacksInput, SatisfactionSurveysUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutFeedbacksInput
    connect?: SatisfactionSurveysWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbackSubmissionsInput = {
    create?: XOR<UserCreateWithoutFeedbackSubmissionsInput, UserUncheckedCreateWithoutFeedbackSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutFeedbackSubmissionsInput = {
    create?: XOR<TenantCreateWithoutFeedbackSubmissionsInput, TenantUncheckedCreateWithoutFeedbackSubmissionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFeedbackSubmissionsInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedFeedbacksInput = {
    create?: XOR<UserCreateWithoutAssignedFeedbacksInput, UserUncheckedCreateWithoutAssignedFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type SatisfactionSurveysUpdateOneWithoutFeedbacksNestedInput = {
    create?: XOR<SatisfactionSurveysCreateWithoutFeedbacksInput, SatisfactionSurveysUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SatisfactionSurveysCreateOrConnectWithoutFeedbacksInput
    upsert?: SatisfactionSurveysUpsertWithoutFeedbacksInput
    disconnect?: SatisfactionSurveysWhereInput | boolean
    delete?: SatisfactionSurveysWhereInput | boolean
    connect?: SatisfactionSurveysWhereUniqueInput
    update?: XOR<XOR<SatisfactionSurveysUpdateToOneWithWhereWithoutFeedbacksInput, SatisfactionSurveysUpdateWithoutFeedbacksInput>, SatisfactionSurveysUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateOneWithoutFeedbackSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackSubmissionsInput, UserUncheckedCreateWithoutFeedbackSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackSubmissionsInput
    upsert?: UserUpsertWithoutFeedbackSubmissionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackSubmissionsInput, UserUpdateWithoutFeedbackSubmissionsInput>, UserUncheckedUpdateWithoutFeedbackSubmissionsInput>
  }

  export type TenantUpdateOneWithoutFeedbackSubmissionsNestedInput = {
    create?: XOR<TenantCreateWithoutFeedbackSubmissionsInput, TenantUncheckedCreateWithoutFeedbackSubmissionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFeedbackSubmissionsInput
    upsert?: TenantUpsertWithoutFeedbackSubmissionsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutFeedbackSubmissionsInput, TenantUpdateWithoutFeedbackSubmissionsInput>, TenantUncheckedUpdateWithoutFeedbackSubmissionsInput>
  }

  export type UserUpdateOneWithoutAssignedFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedFeedbacksInput, UserUncheckedCreateWithoutAssignedFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFeedbacksInput
    upsert?: UserUpsertWithoutAssignedFeedbacksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedFeedbacksInput, UserUpdateWithoutAssignedFeedbacksInput>, UserUncheckedUpdateWithoutAssignedFeedbacksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserCreateWithoutTenantInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
  }

  export type ActivityLogCreateWithoutTenantInput = {
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
    user?: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutTenantInput = {
    id?: number
    userId?: string | null
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
  }

  export type ActivityLogCreateOrConnectWithoutTenantInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutTenantInput, ActivityLogUncheckedCreateWithoutTenantInput>
  }

  export type ActivityLogCreateManyTenantInputEnvelope = {
    data: ActivityLogCreateManyTenantInput | ActivityLogCreateManyTenantInput[]
  }

  export type EmailDomainCreateWithoutTenantInput = {
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    smtpUser: SmtpUserCreateNestedOneWithoutDomainsInput
    dkimKeys?: DkimKeyCreateNestedManyWithoutDomainInput
    emails?: EmailCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainUncheckedCreateWithoutTenantInput = {
    id?: number
    smtpUserId: number
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dkimKeys?: DkimKeyUncheckedCreateNestedManyWithoutDomainInput
    emails?: EmailUncheckedCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainCreateOrConnectWithoutTenantInput = {
    where: EmailDomainWhereUniqueInput
    create: XOR<EmailDomainCreateWithoutTenantInput, EmailDomainUncheckedCreateWithoutTenantInput>
  }

  export type EmailDomainCreateManyTenantInputEnvelope = {
    data: EmailDomainCreateManyTenantInput | EmailDomainCreateManyTenantInput[]
  }

  export type InvoiceCreateWithoutTenantInput = {
    id?: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
    itens?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutTenantInput = {
    id?: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
    itens?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutTenantInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutTenantInput, InvoiceUncheckedCreateWithoutTenantInput>
  }

  export type InvoiceCreateManyTenantInputEnvelope = {
    data: InvoiceCreateManyTenantInput | InvoiceCreateManyTenantInput[]
  }

  export type AnalyticsUserSessionCreateWithoutTenantInput = {
    id?: string
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAnalyticsUserSessionsInput
  }

  export type AnalyticsUserSessionUncheckedCreateWithoutTenantInput = {
    id?: string
    userId: string
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AnalyticsUserSessionCreateOrConnectWithoutTenantInput = {
    where: AnalyticsUserSessionWhereUniqueInput
    create: XOR<AnalyticsUserSessionCreateWithoutTenantInput, AnalyticsUserSessionUncheckedCreateWithoutTenantInput>
  }

  export type AnalyticsUserSessionCreateManyTenantInputEnvelope = {
    data: AnalyticsUserSessionCreateManyTenantInput | AnalyticsUserSessionCreateManyTenantInput[]
  }

  export type FeatureUsageCreateWithoutTenantInput = {
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeatureUsageInput
  }

  export type FeatureUsageUncheckedCreateWithoutTenantInput = {
    id?: number
    userId: string
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
  }

  export type FeatureUsageCreateOrConnectWithoutTenantInput = {
    where: FeatureUsageWhereUniqueInput
    create: XOR<FeatureUsageCreateWithoutTenantInput, FeatureUsageUncheckedCreateWithoutTenantInput>
  }

  export type FeatureUsageCreateManyTenantInputEnvelope = {
    data: FeatureUsageCreateManyTenantInput | FeatureUsageCreateManyTenantInput[]
  }

  export type PageViewsCreateWithoutTenantInput = {
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPageViewsInput
  }

  export type PageViewsUncheckedCreateWithoutTenantInput = {
    id?: number
    userId: string
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type PageViewsCreateOrConnectWithoutTenantInput = {
    where: PageViewsWhereUniqueInput
    create: XOR<PageViewsCreateWithoutTenantInput, PageViewsUncheckedCreateWithoutTenantInput>
  }

  export type PageViewsCreateManyTenantInputEnvelope = {
    data: PageViewsCreateManyTenantInput | PageViewsCreateManyTenantInput[]
  }

  export type ModuleAnalyticsCreateWithoutTenantInput = {
    moduleName: string
    totalUsers?: number
    activeUsers?: number
    totalSessions?: number
    totalPageViews?: number
    avgSessionTime?: number | null
    popularFeature?: string | null
    period: string
    createdAt?: Date | string
  }

  export type ModuleAnalyticsUncheckedCreateWithoutTenantInput = {
    id?: number
    moduleName: string
    totalUsers?: number
    activeUsers?: number
    totalSessions?: number
    totalPageViews?: number
    avgSessionTime?: number | null
    popularFeature?: string | null
    period: string
    createdAt?: Date | string
  }

  export type ModuleAnalyticsCreateOrConnectWithoutTenantInput = {
    where: ModuleAnalyticsWhereUniqueInput
    create: XOR<ModuleAnalyticsCreateWithoutTenantInput, ModuleAnalyticsUncheckedCreateWithoutTenantInput>
  }

  export type ModuleAnalyticsCreateManyTenantInputEnvelope = {
    data: ModuleAnalyticsCreateManyTenantInput | ModuleAnalyticsCreateManyTenantInput[]
  }

  export type GeographicDataCreateWithoutTenantInput = {
    cidade: string
    estado: string
    regiao: string
    populacao?: number | null
    totalUsuarios?: number
    usuariosAtivos?: number
    protocolosMes?: number
    satisfacaoMedia?: number | null
    period: string
    createdAt?: Date | string
  }

  export type GeographicDataUncheckedCreateWithoutTenantInput = {
    id?: number
    cidade: string
    estado: string
    regiao: string
    populacao?: number | null
    totalUsuarios?: number
    usuariosAtivos?: number
    protocolosMes?: number
    satisfacaoMedia?: number | null
    period: string
    createdAt?: Date | string
  }

  export type GeographicDataCreateOrConnectWithoutTenantInput = {
    where: GeographicDataWhereUniqueInput
    create: XOR<GeographicDataCreateWithoutTenantInput, GeographicDataUncheckedCreateWithoutTenantInput>
  }

  export type GeographicDataCreateManyTenantInputEnvelope = {
    data: GeographicDataCreateManyTenantInput | GeographicDataCreateManyTenantInput[]
  }

  export type NpsResponsesCreateWithoutTenantInput = {
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    survey: SatisfactionSurveysCreateNestedOneWithoutNpsResponsesInput
    user?: UserCreateNestedOneWithoutNpsResponsesInput
  }

  export type NpsResponsesUncheckedCreateWithoutTenantInput = {
    id?: number
    surveyId: number
    userId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type NpsResponsesCreateOrConnectWithoutTenantInput = {
    where: NpsResponsesWhereUniqueInput
    create: XOR<NpsResponsesCreateWithoutTenantInput, NpsResponsesUncheckedCreateWithoutTenantInput>
  }

  export type NpsResponsesCreateManyTenantInputEnvelope = {
    data: NpsResponsesCreateManyTenantInput | NpsResponsesCreateManyTenantInput[]
  }

  export type FeedbackSubmissionsCreateWithoutTenantInput = {
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    survey?: SatisfactionSurveysCreateNestedOneWithoutFeedbacksInput
    user?: UserCreateNestedOneWithoutFeedbackSubmissionsInput
    assignee?: UserCreateNestedOneWithoutAssignedFeedbacksInput
  }

  export type FeedbackSubmissionsUncheckedCreateWithoutTenantInput = {
    id?: number
    surveyId?: number | null
    userId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsCreateOrConnectWithoutTenantInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    create: XOR<FeedbackSubmissionsCreateWithoutTenantInput, FeedbackSubmissionsUncheckedCreateWithoutTenantInput>
  }

  export type FeedbackSubmissionsCreateManyTenantInputEnvelope = {
    data: FeedbackSubmissionsCreateManyTenantInput | FeedbackSubmissionsCreateManyTenantInput[]
  }

  export type SatisfactionSurveysCreateWithoutTenantInput = {
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedSurveysInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutSurveyInput
    feedbacks?: FeedbackSubmissionsCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysUncheckedCreateWithoutTenantInput = {
    id?: number
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutSurveyInput
    feedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysCreateOrConnectWithoutTenantInput = {
    where: SatisfactionSurveysWhereUniqueInput
    create: XOR<SatisfactionSurveysCreateWithoutTenantInput, SatisfactionSurveysUncheckedCreateWithoutTenantInput>
  }

  export type SatisfactionSurveysCreateManyTenantInputEnvelope = {
    data: SatisfactionSurveysCreateManyTenantInput | SatisfactionSurveysCreateManyTenantInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    tenantId?: StringNullableFilter<"User"> | string | null
    nomeCompleto?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    ultimoLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntNullableFilter<"User"> | number | null
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    tipoUsuario?: StringNullableFilter<"User"> | string | null
    telefone?: StringNullableFilter<"User"> | string | null
    ultimaAtividade?: DateTimeNullableFilter<"User"> | Date | string | null
    ativo?: BoolNullableFilter<"User"> | boolean | null
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutTenantInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutTenantInput, ActivityLogUncheckedUpdateWithoutTenantInput>
    create: XOR<ActivityLogCreateWithoutTenantInput, ActivityLogUncheckedCreateWithoutTenantInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutTenantInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutTenantInput, ActivityLogUncheckedUpdateWithoutTenantInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutTenantInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutTenantInput>
  }

  export type ActivityLogScalarWhereInput = {
    AND?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    OR?: ActivityLogScalarWhereInput[]
    NOT?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    id?: IntFilter<"ActivityLog"> | number
    userId?: StringNullableFilter<"ActivityLog"> | string | null
    tenantId?: StringNullableFilter<"ActivityLog"> | string | null
    action?: StringFilter<"ActivityLog"> | string
    resource?: StringNullableFilter<"ActivityLog"> | string | null
    resourceId?: StringNullableFilter<"ActivityLog"> | string | null
    details?: StringNullableFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeNullableFilter<"ActivityLog"> | Date | string | null
  }

  export type EmailDomainUpsertWithWhereUniqueWithoutTenantInput = {
    where: EmailDomainWhereUniqueInput
    update: XOR<EmailDomainUpdateWithoutTenantInput, EmailDomainUncheckedUpdateWithoutTenantInput>
    create: XOR<EmailDomainCreateWithoutTenantInput, EmailDomainUncheckedCreateWithoutTenantInput>
  }

  export type EmailDomainUpdateWithWhereUniqueWithoutTenantInput = {
    where: EmailDomainWhereUniqueInput
    data: XOR<EmailDomainUpdateWithoutTenantInput, EmailDomainUncheckedUpdateWithoutTenantInput>
  }

  export type EmailDomainUpdateManyWithWhereWithoutTenantInput = {
    where: EmailDomainScalarWhereInput
    data: XOR<EmailDomainUpdateManyMutationInput, EmailDomainUncheckedUpdateManyWithoutTenantInput>
  }

  export type EmailDomainScalarWhereInput = {
    AND?: EmailDomainScalarWhereInput | EmailDomainScalarWhereInput[]
    OR?: EmailDomainScalarWhereInput[]
    NOT?: EmailDomainScalarWhereInput | EmailDomainScalarWhereInput[]
    id?: IntFilter<"EmailDomain"> | number
    tenantId?: StringNullableFilter<"EmailDomain"> | string | null
    smtpUserId?: IntFilter<"EmailDomain"> | number
    domainName?: StringFilter<"EmailDomain"> | string
    isVerified?: BoolFilter<"EmailDomain"> | boolean
    verificationToken?: StringNullableFilter<"EmailDomain"> | string | null
    verifiedAt?: DateTimeNullableFilter<"EmailDomain"> | Date | string | null
    verificationMethod?: StringNullableFilter<"EmailDomain"> | string | null
    dkimEnabled?: BoolFilter<"EmailDomain"> | boolean
    spfEnabled?: BoolFilter<"EmailDomain"> | boolean
    createdAt?: DateTimeFilter<"EmailDomain"> | Date | string
    updatedAt?: DateTimeFilter<"EmailDomain"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutTenantInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutTenantInput, InvoiceUncheckedUpdateWithoutTenantInput>
    create: XOR<InvoiceCreateWithoutTenantInput, InvoiceUncheckedCreateWithoutTenantInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutTenantInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutTenantInput, InvoiceUncheckedUpdateWithoutTenantInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutTenantInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutTenantInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: StringFilter<"Invoice"> | string
    tenantId?: StringFilter<"Invoice"> | string
    numero?: StringFilter<"Invoice"> | string
    periodo?: StringFilter<"Invoice"> | string
    valor?: FloatFilter<"Invoice"> | number
    descricao?: StringNullableFilter<"Invoice"> | string | null
    status?: StringFilter<"Invoice"> | string
    dataCriacao?: DateTimeFilter<"Invoice"> | Date | string
    dataVencimento?: DateTimeFilter<"Invoice"> | Date | string
    dataPagamento?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    metodoPagamento?: StringNullableFilter<"Invoice"> | string | null
    desconto?: FloatFilter<"Invoice"> | number
    taxaAdicional?: FloatFilter<"Invoice"> | number
    plano?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
  }

  export type AnalyticsUserSessionUpsertWithWhereUniqueWithoutTenantInput = {
    where: AnalyticsUserSessionWhereUniqueInput
    update: XOR<AnalyticsUserSessionUpdateWithoutTenantInput, AnalyticsUserSessionUncheckedUpdateWithoutTenantInput>
    create: XOR<AnalyticsUserSessionCreateWithoutTenantInput, AnalyticsUserSessionUncheckedCreateWithoutTenantInput>
  }

  export type AnalyticsUserSessionUpdateWithWhereUniqueWithoutTenantInput = {
    where: AnalyticsUserSessionWhereUniqueInput
    data: XOR<AnalyticsUserSessionUpdateWithoutTenantInput, AnalyticsUserSessionUncheckedUpdateWithoutTenantInput>
  }

  export type AnalyticsUserSessionUpdateManyWithWhereWithoutTenantInput = {
    where: AnalyticsUserSessionScalarWhereInput
    data: XOR<AnalyticsUserSessionUpdateManyMutationInput, AnalyticsUserSessionUncheckedUpdateManyWithoutTenantInput>
  }

  export type AnalyticsUserSessionScalarWhereInput = {
    AND?: AnalyticsUserSessionScalarWhereInput | AnalyticsUserSessionScalarWhereInput[]
    OR?: AnalyticsUserSessionScalarWhereInput[]
    NOT?: AnalyticsUserSessionScalarWhereInput | AnalyticsUserSessionScalarWhereInput[]
    id?: StringFilter<"AnalyticsUserSession"> | string
    userId?: StringFilter<"AnalyticsUserSession"> | string
    tenantId?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    startedAt?: DateTimeFilter<"AnalyticsUserSession"> | Date | string
    endedAt?: DateTimeNullableFilter<"AnalyticsUserSession"> | Date | string | null
    durationMinutes?: IntNullableFilter<"AnalyticsUserSession"> | number | null
    pagesVisited?: IntFilter<"AnalyticsUserSession"> | number
    ipAddress?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    userAgent?: StringNullableFilter<"AnalyticsUserSession"> | string | null
    createdAt?: DateTimeFilter<"AnalyticsUserSession"> | Date | string
  }

  export type FeatureUsageUpsertWithWhereUniqueWithoutTenantInput = {
    where: FeatureUsageWhereUniqueInput
    update: XOR<FeatureUsageUpdateWithoutTenantInput, FeatureUsageUncheckedUpdateWithoutTenantInput>
    create: XOR<FeatureUsageCreateWithoutTenantInput, FeatureUsageUncheckedCreateWithoutTenantInput>
  }

  export type FeatureUsageUpdateWithWhereUniqueWithoutTenantInput = {
    where: FeatureUsageWhereUniqueInput
    data: XOR<FeatureUsageUpdateWithoutTenantInput, FeatureUsageUncheckedUpdateWithoutTenantInput>
  }

  export type FeatureUsageUpdateManyWithWhereWithoutTenantInput = {
    where: FeatureUsageScalarWhereInput
    data: XOR<FeatureUsageUpdateManyMutationInput, FeatureUsageUncheckedUpdateManyWithoutTenantInput>
  }

  export type FeatureUsageScalarWhereInput = {
    AND?: FeatureUsageScalarWhereInput | FeatureUsageScalarWhereInput[]
    OR?: FeatureUsageScalarWhereInput[]
    NOT?: FeatureUsageScalarWhereInput | FeatureUsageScalarWhereInput[]
    id?: IntFilter<"FeatureUsage"> | number
    userId?: StringFilter<"FeatureUsage"> | string
    tenantId?: StringNullableFilter<"FeatureUsage"> | string | null
    featureName?: StringFilter<"FeatureUsage"> | string
    featureCategory?: StringFilter<"FeatureUsage"> | string
    usageCount?: IntFilter<"FeatureUsage"> | number
    totalTimeMinutes?: FloatNullableFilter<"FeatureUsage"> | number | null
    date?: DateTimeFilter<"FeatureUsage"> | Date | string
    createdAt?: DateTimeFilter<"FeatureUsage"> | Date | string
  }

  export type PageViewsUpsertWithWhereUniqueWithoutTenantInput = {
    where: PageViewsWhereUniqueInput
    update: XOR<PageViewsUpdateWithoutTenantInput, PageViewsUncheckedUpdateWithoutTenantInput>
    create: XOR<PageViewsCreateWithoutTenantInput, PageViewsUncheckedCreateWithoutTenantInput>
  }

  export type PageViewsUpdateWithWhereUniqueWithoutTenantInput = {
    where: PageViewsWhereUniqueInput
    data: XOR<PageViewsUpdateWithoutTenantInput, PageViewsUncheckedUpdateWithoutTenantInput>
  }

  export type PageViewsUpdateManyWithWhereWithoutTenantInput = {
    where: PageViewsScalarWhereInput
    data: XOR<PageViewsUpdateManyMutationInput, PageViewsUncheckedUpdateManyWithoutTenantInput>
  }

  export type PageViewsScalarWhereInput = {
    AND?: PageViewsScalarWhereInput | PageViewsScalarWhereInput[]
    OR?: PageViewsScalarWhereInput[]
    NOT?: PageViewsScalarWhereInput | PageViewsScalarWhereInput[]
    id?: IntFilter<"PageViews"> | number
    userId?: StringFilter<"PageViews"> | string
    tenantId?: StringNullableFilter<"PageViews"> | string | null
    pagePath?: StringFilter<"PageViews"> | string
    pageTitle?: StringNullableFilter<"PageViews"> | string | null
    timeSpent?: IntNullableFilter<"PageViews"> | number | null
    sessionId?: StringNullableFilter<"PageViews"> | string | null
    referrer?: StringNullableFilter<"PageViews"> | string | null
    userAgent?: StringNullableFilter<"PageViews"> | string | null
    ipAddress?: StringNullableFilter<"PageViews"> | string | null
    createdAt?: DateTimeFilter<"PageViews"> | Date | string
  }

  export type ModuleAnalyticsUpsertWithWhereUniqueWithoutTenantInput = {
    where: ModuleAnalyticsWhereUniqueInput
    update: XOR<ModuleAnalyticsUpdateWithoutTenantInput, ModuleAnalyticsUncheckedUpdateWithoutTenantInput>
    create: XOR<ModuleAnalyticsCreateWithoutTenantInput, ModuleAnalyticsUncheckedCreateWithoutTenantInput>
  }

  export type ModuleAnalyticsUpdateWithWhereUniqueWithoutTenantInput = {
    where: ModuleAnalyticsWhereUniqueInput
    data: XOR<ModuleAnalyticsUpdateWithoutTenantInput, ModuleAnalyticsUncheckedUpdateWithoutTenantInput>
  }

  export type ModuleAnalyticsUpdateManyWithWhereWithoutTenantInput = {
    where: ModuleAnalyticsScalarWhereInput
    data: XOR<ModuleAnalyticsUpdateManyMutationInput, ModuleAnalyticsUncheckedUpdateManyWithoutTenantInput>
  }

  export type ModuleAnalyticsScalarWhereInput = {
    AND?: ModuleAnalyticsScalarWhereInput | ModuleAnalyticsScalarWhereInput[]
    OR?: ModuleAnalyticsScalarWhereInput[]
    NOT?: ModuleAnalyticsScalarWhereInput | ModuleAnalyticsScalarWhereInput[]
    id?: IntFilter<"ModuleAnalytics"> | number
    tenantId?: StringNullableFilter<"ModuleAnalytics"> | string | null
    moduleName?: StringFilter<"ModuleAnalytics"> | string
    totalUsers?: IntFilter<"ModuleAnalytics"> | number
    activeUsers?: IntFilter<"ModuleAnalytics"> | number
    totalSessions?: IntFilter<"ModuleAnalytics"> | number
    totalPageViews?: IntFilter<"ModuleAnalytics"> | number
    avgSessionTime?: FloatNullableFilter<"ModuleAnalytics"> | number | null
    popularFeature?: StringNullableFilter<"ModuleAnalytics"> | string | null
    period?: StringFilter<"ModuleAnalytics"> | string
    createdAt?: DateTimeFilter<"ModuleAnalytics"> | Date | string
  }

  export type GeographicDataUpsertWithWhereUniqueWithoutTenantInput = {
    where: GeographicDataWhereUniqueInput
    update: XOR<GeographicDataUpdateWithoutTenantInput, GeographicDataUncheckedUpdateWithoutTenantInput>
    create: XOR<GeographicDataCreateWithoutTenantInput, GeographicDataUncheckedCreateWithoutTenantInput>
  }

  export type GeographicDataUpdateWithWhereUniqueWithoutTenantInput = {
    where: GeographicDataWhereUniqueInput
    data: XOR<GeographicDataUpdateWithoutTenantInput, GeographicDataUncheckedUpdateWithoutTenantInput>
  }

  export type GeographicDataUpdateManyWithWhereWithoutTenantInput = {
    where: GeographicDataScalarWhereInput
    data: XOR<GeographicDataUpdateManyMutationInput, GeographicDataUncheckedUpdateManyWithoutTenantInput>
  }

  export type GeographicDataScalarWhereInput = {
    AND?: GeographicDataScalarWhereInput | GeographicDataScalarWhereInput[]
    OR?: GeographicDataScalarWhereInput[]
    NOT?: GeographicDataScalarWhereInput | GeographicDataScalarWhereInput[]
    id?: IntFilter<"GeographicData"> | number
    tenantId?: StringNullableFilter<"GeographicData"> | string | null
    cidade?: StringFilter<"GeographicData"> | string
    estado?: StringFilter<"GeographicData"> | string
    regiao?: StringFilter<"GeographicData"> | string
    populacao?: IntNullableFilter<"GeographicData"> | number | null
    totalUsuarios?: IntFilter<"GeographicData"> | number
    usuariosAtivos?: IntFilter<"GeographicData"> | number
    protocolosMes?: IntFilter<"GeographicData"> | number
    satisfacaoMedia?: FloatNullableFilter<"GeographicData"> | number | null
    period?: StringFilter<"GeographicData"> | string
    createdAt?: DateTimeFilter<"GeographicData"> | Date | string
  }

  export type NpsResponsesUpsertWithWhereUniqueWithoutTenantInput = {
    where: NpsResponsesWhereUniqueInput
    update: XOR<NpsResponsesUpdateWithoutTenantInput, NpsResponsesUncheckedUpdateWithoutTenantInput>
    create: XOR<NpsResponsesCreateWithoutTenantInput, NpsResponsesUncheckedCreateWithoutTenantInput>
  }

  export type NpsResponsesUpdateWithWhereUniqueWithoutTenantInput = {
    where: NpsResponsesWhereUniqueInput
    data: XOR<NpsResponsesUpdateWithoutTenantInput, NpsResponsesUncheckedUpdateWithoutTenantInput>
  }

  export type NpsResponsesUpdateManyWithWhereWithoutTenantInput = {
    where: NpsResponsesScalarWhereInput
    data: XOR<NpsResponsesUpdateManyMutationInput, NpsResponsesUncheckedUpdateManyWithoutTenantInput>
  }

  export type NpsResponsesScalarWhereInput = {
    AND?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
    OR?: NpsResponsesScalarWhereInput[]
    NOT?: NpsResponsesScalarWhereInput | NpsResponsesScalarWhereInput[]
    id?: IntFilter<"NpsResponses"> | number
    surveyId?: IntFilter<"NpsResponses"> | number
    userId?: StringNullableFilter<"NpsResponses"> | string | null
    tenantId?: StringNullableFilter<"NpsResponses"> | string | null
    score?: IntFilter<"NpsResponses"> | number
    category?: StringFilter<"NpsResponses"> | string
    comment?: StringNullableFilter<"NpsResponses"> | string | null
    anonymous?: BoolFilter<"NpsResponses"> | boolean
    ipAddress?: StringNullableFilter<"NpsResponses"> | string | null
    userAgent?: StringNullableFilter<"NpsResponses"> | string | null
    createdAt?: DateTimeFilter<"NpsResponses"> | Date | string
  }

  export type FeedbackSubmissionsUpsertWithWhereUniqueWithoutTenantInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    update: XOR<FeedbackSubmissionsUpdateWithoutTenantInput, FeedbackSubmissionsUncheckedUpdateWithoutTenantInput>
    create: XOR<FeedbackSubmissionsCreateWithoutTenantInput, FeedbackSubmissionsUncheckedCreateWithoutTenantInput>
  }

  export type FeedbackSubmissionsUpdateWithWhereUniqueWithoutTenantInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    data: XOR<FeedbackSubmissionsUpdateWithoutTenantInput, FeedbackSubmissionsUncheckedUpdateWithoutTenantInput>
  }

  export type FeedbackSubmissionsUpdateManyWithWhereWithoutTenantInput = {
    where: FeedbackSubmissionsScalarWhereInput
    data: XOR<FeedbackSubmissionsUpdateManyMutationInput, FeedbackSubmissionsUncheckedUpdateManyWithoutTenantInput>
  }

  export type FeedbackSubmissionsScalarWhereInput = {
    AND?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
    OR?: FeedbackSubmissionsScalarWhereInput[]
    NOT?: FeedbackSubmissionsScalarWhereInput | FeedbackSubmissionsScalarWhereInput[]
    id?: IntFilter<"FeedbackSubmissions"> | number
    surveyId?: IntNullableFilter<"FeedbackSubmissions"> | number | null
    userId?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    tenantId?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    feedbackType?: StringFilter<"FeedbackSubmissions"> | string
    title?: StringFilter<"FeedbackSubmissions"> | string
    description?: StringFilter<"FeedbackSubmissions"> | string
    priority?: StringFilter<"FeedbackSubmissions"> | string
    status?: StringFilter<"FeedbackSubmissions"> | string
    category?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    attachments?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    assignedTo?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    resolvedAt?: DateTimeNullableFilter<"FeedbackSubmissions"> | Date | string | null
    resolution?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    ipAddress?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    userAgent?: StringNullableFilter<"FeedbackSubmissions"> | string | null
    createdAt?: DateTimeFilter<"FeedbackSubmissions"> | Date | string
    updatedAt?: DateTimeFilter<"FeedbackSubmissions"> | Date | string
  }

  export type SatisfactionSurveysUpsertWithWhereUniqueWithoutTenantInput = {
    where: SatisfactionSurveysWhereUniqueInput
    update: XOR<SatisfactionSurveysUpdateWithoutTenantInput, SatisfactionSurveysUncheckedUpdateWithoutTenantInput>
    create: XOR<SatisfactionSurveysCreateWithoutTenantInput, SatisfactionSurveysUncheckedCreateWithoutTenantInput>
  }

  export type SatisfactionSurveysUpdateWithWhereUniqueWithoutTenantInput = {
    where: SatisfactionSurveysWhereUniqueInput
    data: XOR<SatisfactionSurveysUpdateWithoutTenantInput, SatisfactionSurveysUncheckedUpdateWithoutTenantInput>
  }

  export type SatisfactionSurveysUpdateManyWithWhereWithoutTenantInput = {
    where: SatisfactionSurveysScalarWhereInput
    data: XOR<SatisfactionSurveysUpdateManyMutationInput, SatisfactionSurveysUncheckedUpdateManyWithoutTenantInput>
  }

  export type SatisfactionSurveysScalarWhereInput = {
    AND?: SatisfactionSurveysScalarWhereInput | SatisfactionSurveysScalarWhereInput[]
    OR?: SatisfactionSurveysScalarWhereInput[]
    NOT?: SatisfactionSurveysScalarWhereInput | SatisfactionSurveysScalarWhereInput[]
    id?: IntFilter<"SatisfactionSurveys"> | number
    title?: StringFilter<"SatisfactionSurveys"> | string
    description?: StringNullableFilter<"SatisfactionSurveys"> | string | null
    tenantId?: StringNullableFilter<"SatisfactionSurveys"> | string | null
    surveyType?: StringFilter<"SatisfactionSurveys"> | string
    questions?: StringFilter<"SatisfactionSurveys"> | string
    isActive?: BoolFilter<"SatisfactionSurveys"> | boolean
    startDate?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    endDate?: DateTimeNullableFilter<"SatisfactionSurveys"> | Date | string | null
    targetAudience?: StringFilter<"SatisfactionSurveys"> | string
    createdBy?: StringFilter<"SatisfactionSurveys"> | string
    createdAt?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
    updatedAt?: DateTimeFilter<"SatisfactionSurveys"> | Date | string
  }

  export type TenantCreateWithoutUsersInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUsersInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
  }

  export type UserPermissionCreateWithoutUserInput = {
    createdAt?: Date | string | null
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
    grantor?: UserCreateNestedOneWithoutGrantedPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: number
    permissionId: number
    grantedBy?: string | null
    createdAt?: Date | string | null
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
  }

  export type UserPermissionCreateWithoutGrantorInput = {
    createdAt?: Date | string | null
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutGrantorInput = {
    id?: number
    userId: string
    permissionId: number
    createdAt?: Date | string | null
  }

  export type UserPermissionCreateOrConnectWithoutGrantorInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutGrantorInput, UserPermissionUncheckedCreateWithoutGrantorInput>
  }

  export type UserPermissionCreateManyGrantorInputEnvelope = {
    data: UserPermissionCreateManyGrantorInput | UserPermissionCreateManyGrantorInput[]
  }

  export type ActivityLogCreateWithoutUserInput = {
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
    tenant?: TenantCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutUserInput = {
    id?: number
    tenantId?: string | null
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
  }

  export type ActivityLogCreateOrConnectWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogCreateManyUserInputEnvelope = {
    data: ActivityLogCreateManyUserInput | ActivityLogCreateManyUserInput[]
  }

  export type SmtpUserCreateWithoutUserInput = {
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    domains?: EmailDomainCreateNestedManyWithoutSmtpUserInput
    authAttempts?: AuthAttemptCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    domains?: EmailDomainUncheckedCreateNestedManyWithoutSmtpUserInput
    authAttempts?: AuthAttemptUncheckedCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserCreateOrConnectWithoutUserInput = {
    where: SmtpUserWhereUniqueInput
    create: XOR<SmtpUserCreateWithoutUserInput, SmtpUserUncheckedCreateWithoutUserInput>
  }

  export type SmtpUserCreateManyUserInputEnvelope = {
    data: SmtpUserCreateManyUserInput | SmtpUserCreateManyUserInput[]
  }

  export type UserSessionCreateWithoutUserInput = {
    id: string
    token: string
    tokenHash: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    lastActivity?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id: string
    token: string
    tokenHash: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    lastActivity?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
  }

  export type UserTokenCreateWithoutUserInput = {
    type: string
    token: string
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokenUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    token: string
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokenCreateOrConnectWithoutUserInput = {
    where: UserTokenWhereUniqueInput
    create: XOR<UserTokenCreateWithoutUserInput, UserTokenUncheckedCreateWithoutUserInput>
  }

  export type UserTokenCreateManyUserInputEnvelope = {
    data: UserTokenCreateManyUserInput | UserTokenCreateManyUserInput[]
  }

  export type PasswordResetTokenCreateWithoutUserInput = {
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenCreateOrConnectWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    create: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetTokenCreateManyUserInputEnvelope = {
    data: PasswordResetTokenCreateManyUserInput | PasswordResetTokenCreateManyUserInput[]
  }

  export type EmailVerificationTokenCreateWithoutUserInput = {
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type EmailVerificationTokenUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type EmailVerificationTokenCreateOrConnectWithoutUserInput = {
    where: EmailVerificationTokenWhereUniqueInput
    create: XOR<EmailVerificationTokenCreateWithoutUserInput, EmailVerificationTokenUncheckedCreateWithoutUserInput>
  }

  export type EmailVerificationTokenCreateManyUserInputEnvelope = {
    data: EmailVerificationTokenCreateManyUserInput | EmailVerificationTokenCreateManyUserInput[]
  }

  export type AnalyticsUserSessionCreateWithoutUserInput = {
    id?: string
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutAnalyticsUserSessionsInput
  }

  export type AnalyticsUserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    tenantId?: string | null
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AnalyticsUserSessionCreateOrConnectWithoutUserInput = {
    where: AnalyticsUserSessionWhereUniqueInput
    create: XOR<AnalyticsUserSessionCreateWithoutUserInput, AnalyticsUserSessionUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsUserSessionCreateManyUserInputEnvelope = {
    data: AnalyticsUserSessionCreateManyUserInput | AnalyticsUserSessionCreateManyUserInput[]
  }

  export type FeatureUsageCreateWithoutUserInput = {
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutFeatureUsageInput
  }

  export type FeatureUsageUncheckedCreateWithoutUserInput = {
    id?: number
    tenantId?: string | null
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
  }

  export type FeatureUsageCreateOrConnectWithoutUserInput = {
    where: FeatureUsageWhereUniqueInput
    create: XOR<FeatureUsageCreateWithoutUserInput, FeatureUsageUncheckedCreateWithoutUserInput>
  }

  export type FeatureUsageCreateManyUserInputEnvelope = {
    data: FeatureUsageCreateManyUserInput | FeatureUsageCreateManyUserInput[]
  }

  export type PageViewsCreateWithoutUserInput = {
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutPageViewsInput
  }

  export type PageViewsUncheckedCreateWithoutUserInput = {
    id?: number
    tenantId?: string | null
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type PageViewsCreateOrConnectWithoutUserInput = {
    where: PageViewsWhereUniqueInput
    create: XOR<PageViewsCreateWithoutUserInput, PageViewsUncheckedCreateWithoutUserInput>
  }

  export type PageViewsCreateManyUserInputEnvelope = {
    data: PageViewsCreateManyUserInput | PageViewsCreateManyUserInput[]
  }

  export type NpsResponsesCreateWithoutUserInput = {
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    survey: SatisfactionSurveysCreateNestedOneWithoutNpsResponsesInput
    tenant?: TenantCreateNestedOneWithoutNpsResponsesInput
  }

  export type NpsResponsesUncheckedCreateWithoutUserInput = {
    id?: number
    surveyId: number
    tenantId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type NpsResponsesCreateOrConnectWithoutUserInput = {
    where: NpsResponsesWhereUniqueInput
    create: XOR<NpsResponsesCreateWithoutUserInput, NpsResponsesUncheckedCreateWithoutUserInput>
  }

  export type NpsResponsesCreateManyUserInputEnvelope = {
    data: NpsResponsesCreateManyUserInput | NpsResponsesCreateManyUserInput[]
  }

  export type FeedbackSubmissionsCreateWithoutUserInput = {
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    survey?: SatisfactionSurveysCreateNestedOneWithoutFeedbacksInput
    tenant?: TenantCreateNestedOneWithoutFeedbackSubmissionsInput
    assignee?: UserCreateNestedOneWithoutAssignedFeedbacksInput
  }

  export type FeedbackSubmissionsUncheckedCreateWithoutUserInput = {
    id?: number
    surveyId?: number | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsCreateOrConnectWithoutUserInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    create: XOR<FeedbackSubmissionsCreateWithoutUserInput, FeedbackSubmissionsUncheckedCreateWithoutUserInput>
  }

  export type FeedbackSubmissionsCreateManyUserInputEnvelope = {
    data: FeedbackSubmissionsCreateManyUserInput | FeedbackSubmissionsCreateManyUserInput[]
  }

  export type FeedbackSubmissionsCreateWithoutAssigneeInput = {
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    survey?: SatisfactionSurveysCreateNestedOneWithoutFeedbacksInput
    user?: UserCreateNestedOneWithoutFeedbackSubmissionsInput
    tenant?: TenantCreateNestedOneWithoutFeedbackSubmissionsInput
  }

  export type FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput = {
    id?: number
    surveyId?: number | null
    userId?: string | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsCreateOrConnectWithoutAssigneeInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    create: XOR<FeedbackSubmissionsCreateWithoutAssigneeInput, FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput>
  }

  export type FeedbackSubmissionsCreateManyAssigneeInputEnvelope = {
    data: FeedbackSubmissionsCreateManyAssigneeInput | FeedbackSubmissionsCreateManyAssigneeInput[]
  }

  export type AutomatedReportsCreateWithoutCreatorInput = {
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: ReportSchedulesCreateNestedManyWithoutReportInput
    history?: ReportHistoryCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsUncheckedCreateWithoutCreatorInput = {
    id?: number
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: ReportSchedulesUncheckedCreateNestedManyWithoutReportInput
    history?: ReportHistoryUncheckedCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsCreateOrConnectWithoutCreatorInput = {
    where: AutomatedReportsWhereUniqueInput
    create: XOR<AutomatedReportsCreateWithoutCreatorInput, AutomatedReportsUncheckedCreateWithoutCreatorInput>
  }

  export type AutomatedReportsCreateManyCreatorInputEnvelope = {
    data: AutomatedReportsCreateManyCreatorInput | AutomatedReportsCreateManyCreatorInput[]
  }

  export type SatisfactionSurveysCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutSatisfactionSurveysInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutSurveyInput
    feedbacks?: FeedbackSubmissionsCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    description?: string | null
    tenantId?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutSurveyInput
    feedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysCreateOrConnectWithoutCreatorInput = {
    where: SatisfactionSurveysWhereUniqueInput
    create: XOR<SatisfactionSurveysCreateWithoutCreatorInput, SatisfactionSurveysUncheckedCreateWithoutCreatorInput>
  }

  export type SatisfactionSurveysCreateManyCreatorInputEnvelope = {
    data: SatisfactionSurveysCreateManyCreatorInput | SatisfactionSurveysCreateManyCreatorInput[]
  }

  export type TenantUpsertWithoutUsersInput = {
    update: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: IntFilter<"UserPermission"> | number
    grantedBy?: StringNullableFilter<"UserPermission"> | string | null
    createdAt?: DateTimeNullableFilter<"UserPermission"> | Date | string | null
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutGrantorInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutGrantorInput, UserPermissionUncheckedUpdateWithoutGrantorInput>
    create: XOR<UserPermissionCreateWithoutGrantorInput, UserPermissionUncheckedCreateWithoutGrantorInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutGrantorInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutGrantorInput, UserPermissionUncheckedUpdateWithoutGrantorInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutGrantorInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutGrantorInput>
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SmtpUserUpsertWithWhereUniqueWithoutUserInput = {
    where: SmtpUserWhereUniqueInput
    update: XOR<SmtpUserUpdateWithoutUserInput, SmtpUserUncheckedUpdateWithoutUserInput>
    create: XOR<SmtpUserCreateWithoutUserInput, SmtpUserUncheckedCreateWithoutUserInput>
  }

  export type SmtpUserUpdateWithWhereUniqueWithoutUserInput = {
    where: SmtpUserWhereUniqueInput
    data: XOR<SmtpUserUpdateWithoutUserInput, SmtpUserUncheckedUpdateWithoutUserInput>
  }

  export type SmtpUserUpdateManyWithWhereWithoutUserInput = {
    where: SmtpUserScalarWhereInput
    data: XOR<SmtpUserUpdateManyMutationInput, SmtpUserUncheckedUpdateManyWithoutUserInput>
  }

  export type SmtpUserScalarWhereInput = {
    AND?: SmtpUserScalarWhereInput | SmtpUserScalarWhereInput[]
    OR?: SmtpUserScalarWhereInput[]
    NOT?: SmtpUserScalarWhereInput | SmtpUserScalarWhereInput[]
    id?: IntFilter<"SmtpUser"> | number
    userId?: StringNullableFilter<"SmtpUser"> | string | null
    email?: StringFilter<"SmtpUser"> | string
    passwordHash?: StringFilter<"SmtpUser"> | string
    name?: StringFilter<"SmtpUser"> | string
    isVerified?: BoolFilter<"SmtpUser"> | boolean
    isActive?: BoolFilter<"SmtpUser"> | boolean
    isAdmin?: BoolFilter<"SmtpUser"> | boolean
    lastLogin?: DateTimeNullableFilter<"SmtpUser"> | Date | string | null
    createdAt?: DateTimeFilter<"SmtpUser"> | Date | string
    updatedAt?: DateTimeFilter<"SmtpUser"> | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    tokenHash?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    lastActivity?: DateTimeNullableFilter<"UserSession"> | Date | string | null
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type UserTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTokenWhereUniqueInput
    update: XOR<UserTokenUpdateWithoutUserInput, UserTokenUncheckedUpdateWithoutUserInput>
    create: XOR<UserTokenCreateWithoutUserInput, UserTokenUncheckedCreateWithoutUserInput>
  }

  export type UserTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTokenWhereUniqueInput
    data: XOR<UserTokenUpdateWithoutUserInput, UserTokenUncheckedUpdateWithoutUserInput>
  }

  export type UserTokenUpdateManyWithWhereWithoutUserInput = {
    where: UserTokenScalarWhereInput
    data: XOR<UserTokenUpdateManyMutationInput, UserTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type UserTokenScalarWhereInput = {
    AND?: UserTokenScalarWhereInput | UserTokenScalarWhereInput[]
    OR?: UserTokenScalarWhereInput[]
    NOT?: UserTokenScalarWhereInput | UserTokenScalarWhereInput[]
    id?: IntFilter<"UserToken"> | number
    userId?: StringFilter<"UserToken"> | string
    type?: StringFilter<"UserToken"> | string
    token?: StringFilter<"UserToken"> | string
    expiresAt?: DateTimeNullableFilter<"UserToken"> | Date | string | null
    createdAt?: DateTimeFilter<"UserToken"> | Date | string
    updatedAt?: DateTimeFilter<"UserToken"> | Date | string
  }

  export type PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    update: XOR<PasswordResetTokenUpdateWithoutUserInput, PasswordResetTokenUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    data: XOR<PasswordResetTokenUpdateWithoutUserInput, PasswordResetTokenUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetTokenUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetTokenScalarWhereInput
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordResetTokenScalarWhereInput = {
    AND?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    OR?: PasswordResetTokenScalarWhereInput[]
    NOT?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    id?: IntFilter<"PasswordResetToken"> | number
    userId?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type EmailVerificationTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailVerificationTokenWhereUniqueInput
    update: XOR<EmailVerificationTokenUpdateWithoutUserInput, EmailVerificationTokenUncheckedUpdateWithoutUserInput>
    create: XOR<EmailVerificationTokenCreateWithoutUserInput, EmailVerificationTokenUncheckedCreateWithoutUserInput>
  }

  export type EmailVerificationTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailVerificationTokenWhereUniqueInput
    data: XOR<EmailVerificationTokenUpdateWithoutUserInput, EmailVerificationTokenUncheckedUpdateWithoutUserInput>
  }

  export type EmailVerificationTokenUpdateManyWithWhereWithoutUserInput = {
    where: EmailVerificationTokenScalarWhereInput
    data: XOR<EmailVerificationTokenUpdateManyMutationInput, EmailVerificationTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type EmailVerificationTokenScalarWhereInput = {
    AND?: EmailVerificationTokenScalarWhereInput | EmailVerificationTokenScalarWhereInput[]
    OR?: EmailVerificationTokenScalarWhereInput[]
    NOT?: EmailVerificationTokenScalarWhereInput | EmailVerificationTokenScalarWhereInput[]
    id?: IntFilter<"EmailVerificationToken"> | number
    userId?: StringFilter<"EmailVerificationToken"> | string
    token?: StringFilter<"EmailVerificationToken"> | string
    expiresAt?: DateTimeFilter<"EmailVerificationToken"> | Date | string
    used?: BoolFilter<"EmailVerificationToken"> | boolean
    createdAt?: DateTimeFilter<"EmailVerificationToken"> | Date | string
  }

  export type AnalyticsUserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: AnalyticsUserSessionWhereUniqueInput
    update: XOR<AnalyticsUserSessionUpdateWithoutUserInput, AnalyticsUserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<AnalyticsUserSessionCreateWithoutUserInput, AnalyticsUserSessionUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsUserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: AnalyticsUserSessionWhereUniqueInput
    data: XOR<AnalyticsUserSessionUpdateWithoutUserInput, AnalyticsUserSessionUncheckedUpdateWithoutUserInput>
  }

  export type AnalyticsUserSessionUpdateManyWithWhereWithoutUserInput = {
    where: AnalyticsUserSessionScalarWhereInput
    data: XOR<AnalyticsUserSessionUpdateManyMutationInput, AnalyticsUserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type FeatureUsageUpsertWithWhereUniqueWithoutUserInput = {
    where: FeatureUsageWhereUniqueInput
    update: XOR<FeatureUsageUpdateWithoutUserInput, FeatureUsageUncheckedUpdateWithoutUserInput>
    create: XOR<FeatureUsageCreateWithoutUserInput, FeatureUsageUncheckedCreateWithoutUserInput>
  }

  export type FeatureUsageUpdateWithWhereUniqueWithoutUserInput = {
    where: FeatureUsageWhereUniqueInput
    data: XOR<FeatureUsageUpdateWithoutUserInput, FeatureUsageUncheckedUpdateWithoutUserInput>
  }

  export type FeatureUsageUpdateManyWithWhereWithoutUserInput = {
    where: FeatureUsageScalarWhereInput
    data: XOR<FeatureUsageUpdateManyMutationInput, FeatureUsageUncheckedUpdateManyWithoutUserInput>
  }

  export type PageViewsUpsertWithWhereUniqueWithoutUserInput = {
    where: PageViewsWhereUniqueInput
    update: XOR<PageViewsUpdateWithoutUserInput, PageViewsUncheckedUpdateWithoutUserInput>
    create: XOR<PageViewsCreateWithoutUserInput, PageViewsUncheckedCreateWithoutUserInput>
  }

  export type PageViewsUpdateWithWhereUniqueWithoutUserInput = {
    where: PageViewsWhereUniqueInput
    data: XOR<PageViewsUpdateWithoutUserInput, PageViewsUncheckedUpdateWithoutUserInput>
  }

  export type PageViewsUpdateManyWithWhereWithoutUserInput = {
    where: PageViewsScalarWhereInput
    data: XOR<PageViewsUpdateManyMutationInput, PageViewsUncheckedUpdateManyWithoutUserInput>
  }

  export type NpsResponsesUpsertWithWhereUniqueWithoutUserInput = {
    where: NpsResponsesWhereUniqueInput
    update: XOR<NpsResponsesUpdateWithoutUserInput, NpsResponsesUncheckedUpdateWithoutUserInput>
    create: XOR<NpsResponsesCreateWithoutUserInput, NpsResponsesUncheckedCreateWithoutUserInput>
  }

  export type NpsResponsesUpdateWithWhereUniqueWithoutUserInput = {
    where: NpsResponsesWhereUniqueInput
    data: XOR<NpsResponsesUpdateWithoutUserInput, NpsResponsesUncheckedUpdateWithoutUserInput>
  }

  export type NpsResponsesUpdateManyWithWhereWithoutUserInput = {
    where: NpsResponsesScalarWhereInput
    data: XOR<NpsResponsesUpdateManyMutationInput, NpsResponsesUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackSubmissionsUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    update: XOR<FeedbackSubmissionsUpdateWithoutUserInput, FeedbackSubmissionsUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackSubmissionsCreateWithoutUserInput, FeedbackSubmissionsUncheckedCreateWithoutUserInput>
  }

  export type FeedbackSubmissionsUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    data: XOR<FeedbackSubmissionsUpdateWithoutUserInput, FeedbackSubmissionsUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackSubmissionsUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackSubmissionsScalarWhereInput
    data: XOR<FeedbackSubmissionsUpdateManyMutationInput, FeedbackSubmissionsUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackSubmissionsUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    update: XOR<FeedbackSubmissionsUpdateWithoutAssigneeInput, FeedbackSubmissionsUncheckedUpdateWithoutAssigneeInput>
    create: XOR<FeedbackSubmissionsCreateWithoutAssigneeInput, FeedbackSubmissionsUncheckedCreateWithoutAssigneeInput>
  }

  export type FeedbackSubmissionsUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    data: XOR<FeedbackSubmissionsUpdateWithoutAssigneeInput, FeedbackSubmissionsUncheckedUpdateWithoutAssigneeInput>
  }

  export type FeedbackSubmissionsUpdateManyWithWhereWithoutAssigneeInput = {
    where: FeedbackSubmissionsScalarWhereInput
    data: XOR<FeedbackSubmissionsUpdateManyMutationInput, FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type AutomatedReportsUpsertWithWhereUniqueWithoutCreatorInput = {
    where: AutomatedReportsWhereUniqueInput
    update: XOR<AutomatedReportsUpdateWithoutCreatorInput, AutomatedReportsUncheckedUpdateWithoutCreatorInput>
    create: XOR<AutomatedReportsCreateWithoutCreatorInput, AutomatedReportsUncheckedCreateWithoutCreatorInput>
  }

  export type AutomatedReportsUpdateWithWhereUniqueWithoutCreatorInput = {
    where: AutomatedReportsWhereUniqueInput
    data: XOR<AutomatedReportsUpdateWithoutCreatorInput, AutomatedReportsUncheckedUpdateWithoutCreatorInput>
  }

  export type AutomatedReportsUpdateManyWithWhereWithoutCreatorInput = {
    where: AutomatedReportsScalarWhereInput
    data: XOR<AutomatedReportsUpdateManyMutationInput, AutomatedReportsUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AutomatedReportsScalarWhereInput = {
    AND?: AutomatedReportsScalarWhereInput | AutomatedReportsScalarWhereInput[]
    OR?: AutomatedReportsScalarWhereInput[]
    NOT?: AutomatedReportsScalarWhereInput | AutomatedReportsScalarWhereInput[]
    id?: IntFilter<"AutomatedReports"> | number
    name?: StringFilter<"AutomatedReports"> | string
    description?: StringNullableFilter<"AutomatedReports"> | string | null
    reportType?: StringFilter<"AutomatedReports"> | string
    frequency?: StringFilter<"AutomatedReports"> | string
    isActive?: BoolFilter<"AutomatedReports"> | boolean
    config?: StringFilter<"AutomatedReports"> | string
    template?: StringNullableFilter<"AutomatedReports"> | string | null
    createdBy?: StringFilter<"AutomatedReports"> | string
    createdAt?: DateTimeFilter<"AutomatedReports"> | Date | string
    updatedAt?: DateTimeFilter<"AutomatedReports"> | Date | string
  }

  export type SatisfactionSurveysUpsertWithWhereUniqueWithoutCreatorInput = {
    where: SatisfactionSurveysWhereUniqueInput
    update: XOR<SatisfactionSurveysUpdateWithoutCreatorInput, SatisfactionSurveysUncheckedUpdateWithoutCreatorInput>
    create: XOR<SatisfactionSurveysCreateWithoutCreatorInput, SatisfactionSurveysUncheckedCreateWithoutCreatorInput>
  }

  export type SatisfactionSurveysUpdateWithWhereUniqueWithoutCreatorInput = {
    where: SatisfactionSurveysWhereUniqueInput
    data: XOR<SatisfactionSurveysUpdateWithoutCreatorInput, SatisfactionSurveysUncheckedUpdateWithoutCreatorInput>
  }

  export type SatisfactionSurveysUpdateManyWithWhereWithoutCreatorInput = {
    where: SatisfactionSurveysScalarWhereInput
    data: XOR<SatisfactionSurveysUpdateManyMutationInput, SatisfactionSurveysUncheckedUpdateManyWithoutCreatorInput>
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    createdAt?: Date | string | null
    user: UserCreateNestedOneWithoutPermissionsInput
    grantor?: UserCreateNestedOneWithoutGrantedPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    userId: string
    grantedBy?: string | null
    createdAt?: Date | string | null
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserCreateWithoutPermissionsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutUserPermissionsInput = {
    code: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string | null
  }

  export type PermissionUncheckedCreateWithoutUserPermissionsInput = {
    id?: number
    code: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string | null
  }

  export type PermissionCreateOrConnectWithoutUserPermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
  }

  export type UserCreateWithoutGrantedPermissionsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutGrantedPermissionsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutGrantedPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type PermissionUpsertWithoutUserPermissionsInput = {
    update: XOR<PermissionUpdateWithoutUserPermissionsInput, PermissionUncheckedUpdateWithoutUserPermissionsInput>
    create: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUserPermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUserPermissionsInput, PermissionUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type PermissionUpdateWithoutUserPermissionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PermissionUncheckedUpdateWithoutUserPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutGrantedPermissionsInput = {
    update: XOR<UserUpdateWithoutGrantedPermissionsInput, UserUncheckedUpdateWithoutGrantedPermissionsInput>
    create: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGrantedPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGrantedPermissionsInput, UserUncheckedUpdateWithoutGrantedPermissionsInput>
  }

  export type UserUpdateWithoutGrantedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutGrantedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutActivityLogsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutActivityLogsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutActivityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
  }

  export type TenantCreateWithoutActivityLogsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutActivityLogsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutActivityLogsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutActivityLogsInput, TenantUncheckedCreateWithoutActivityLogsInput>
  }

  export type UserUpsertWithoutActivityLogsInput = {
    update: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantUpsertWithoutActivityLogsInput = {
    update: XOR<TenantUpdateWithoutActivityLogsInput, TenantUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<TenantCreateWithoutActivityLogsInput, TenantUncheckedCreateWithoutActivityLogsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutActivityLogsInput, TenantUncheckedUpdateWithoutActivityLogsInput>
  }

  export type TenantUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserCreateWithoutSmtpUsersInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutSmtpUsersInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutSmtpUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSmtpUsersInput, UserUncheckedCreateWithoutSmtpUsersInput>
  }

  export type EmailDomainCreateWithoutSmtpUserInput = {
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutEmailDomainsInput
    dkimKeys?: DkimKeyCreateNestedManyWithoutDomainInput
    emails?: EmailCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainUncheckedCreateWithoutSmtpUserInput = {
    id?: number
    tenantId?: string | null
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dkimKeys?: DkimKeyUncheckedCreateNestedManyWithoutDomainInput
    emails?: EmailUncheckedCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainCreateOrConnectWithoutSmtpUserInput = {
    where: EmailDomainWhereUniqueInput
    create: XOR<EmailDomainCreateWithoutSmtpUserInput, EmailDomainUncheckedCreateWithoutSmtpUserInput>
  }

  export type EmailDomainCreateManySmtpUserInputEnvelope = {
    data: EmailDomainCreateManySmtpUserInput | EmailDomainCreateManySmtpUserInput[]
  }

  export type AuthAttemptCreateWithoutSmtpUserInput = {
    username: string
    remoteAddress: string
    success: boolean
    createdAt?: Date | string
  }

  export type AuthAttemptUncheckedCreateWithoutSmtpUserInput = {
    id?: number
    username: string
    remoteAddress: string
    success: boolean
    createdAt?: Date | string
  }

  export type AuthAttemptCreateOrConnectWithoutSmtpUserInput = {
    where: AuthAttemptWhereUniqueInput
    create: XOR<AuthAttemptCreateWithoutSmtpUserInput, AuthAttemptUncheckedCreateWithoutSmtpUserInput>
  }

  export type AuthAttemptCreateManySmtpUserInputEnvelope = {
    data: AuthAttemptCreateManySmtpUserInput | AuthAttemptCreateManySmtpUserInput[]
  }

  export type UserUpsertWithoutSmtpUsersInput = {
    update: XOR<UserUpdateWithoutSmtpUsersInput, UserUncheckedUpdateWithoutSmtpUsersInput>
    create: XOR<UserCreateWithoutSmtpUsersInput, UserUncheckedCreateWithoutSmtpUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSmtpUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSmtpUsersInput, UserUncheckedUpdateWithoutSmtpUsersInput>
  }

  export type UserUpdateWithoutSmtpUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutSmtpUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type EmailDomainUpsertWithWhereUniqueWithoutSmtpUserInput = {
    where: EmailDomainWhereUniqueInput
    update: XOR<EmailDomainUpdateWithoutSmtpUserInput, EmailDomainUncheckedUpdateWithoutSmtpUserInput>
    create: XOR<EmailDomainCreateWithoutSmtpUserInput, EmailDomainUncheckedCreateWithoutSmtpUserInput>
  }

  export type EmailDomainUpdateWithWhereUniqueWithoutSmtpUserInput = {
    where: EmailDomainWhereUniqueInput
    data: XOR<EmailDomainUpdateWithoutSmtpUserInput, EmailDomainUncheckedUpdateWithoutSmtpUserInput>
  }

  export type EmailDomainUpdateManyWithWhereWithoutSmtpUserInput = {
    where: EmailDomainScalarWhereInput
    data: XOR<EmailDomainUpdateManyMutationInput, EmailDomainUncheckedUpdateManyWithoutSmtpUserInput>
  }

  export type AuthAttemptUpsertWithWhereUniqueWithoutSmtpUserInput = {
    where: AuthAttemptWhereUniqueInput
    update: XOR<AuthAttemptUpdateWithoutSmtpUserInput, AuthAttemptUncheckedUpdateWithoutSmtpUserInput>
    create: XOR<AuthAttemptCreateWithoutSmtpUserInput, AuthAttemptUncheckedCreateWithoutSmtpUserInput>
  }

  export type AuthAttemptUpdateWithWhereUniqueWithoutSmtpUserInput = {
    where: AuthAttemptWhereUniqueInput
    data: XOR<AuthAttemptUpdateWithoutSmtpUserInput, AuthAttemptUncheckedUpdateWithoutSmtpUserInput>
  }

  export type AuthAttemptUpdateManyWithWhereWithoutSmtpUserInput = {
    where: AuthAttemptScalarWhereInput
    data: XOR<AuthAttemptUpdateManyMutationInput, AuthAttemptUncheckedUpdateManyWithoutSmtpUserInput>
  }

  export type AuthAttemptScalarWhereInput = {
    AND?: AuthAttemptScalarWhereInput | AuthAttemptScalarWhereInput[]
    OR?: AuthAttemptScalarWhereInput[]
    NOT?: AuthAttemptScalarWhereInput | AuthAttemptScalarWhereInput[]
    id?: IntFilter<"AuthAttempt"> | number
    smtpUserId?: IntNullableFilter<"AuthAttempt"> | number | null
    username?: StringFilter<"AuthAttempt"> | string
    remoteAddress?: StringFilter<"AuthAttempt"> | string
    success?: BoolFilter<"AuthAttempt"> | boolean
    createdAt?: DateTimeFilter<"AuthAttempt"> | Date | string
  }

  export type TenantCreateWithoutEmailDomainsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutEmailDomainsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutEmailDomainsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutEmailDomainsInput, TenantUncheckedCreateWithoutEmailDomainsInput>
  }

  export type SmtpUserCreateWithoutDomainsInput = {
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutSmtpUsersInput
    authAttempts?: AuthAttemptCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserUncheckedCreateWithoutDomainsInput = {
    id?: number
    userId?: string | null
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authAttempts?: AuthAttemptUncheckedCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserCreateOrConnectWithoutDomainsInput = {
    where: SmtpUserWhereUniqueInput
    create: XOR<SmtpUserCreateWithoutDomainsInput, SmtpUserUncheckedCreateWithoutDomainsInput>
  }

  export type DkimKeyCreateWithoutDomainInput = {
    selector: string
    privateKey: string
    publicKey: string
    algorithm?: string
    canonicalization?: string
    keySize?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DkimKeyUncheckedCreateWithoutDomainInput = {
    id?: number
    selector: string
    privateKey: string
    publicKey: string
    algorithm?: string
    canonicalization?: string
    keySize?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DkimKeyCreateOrConnectWithoutDomainInput = {
    where: DkimKeyWhereUniqueInput
    create: XOR<DkimKeyCreateWithoutDomainInput, DkimKeyUncheckedCreateWithoutDomainInput>
  }

  export type DkimKeyCreateManyDomainInputEnvelope = {
    data: DkimKeyCreateManyDomainInput | DkimKeyCreateManyDomainInput[]
  }

  export type EmailCreateWithoutDomainInput = {
    messageId: string
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent?: string | null
    textContent?: string | null
    status?: string
    direction: string
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    mxServer?: string | null
    errorMessage?: string | null
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailUncheckedCreateWithoutDomainInput = {
    id?: number
    messageId: string
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent?: string | null
    textContent?: string | null
    status?: string
    direction: string
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    mxServer?: string | null
    errorMessage?: string | null
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailCreateOrConnectWithoutDomainInput = {
    where: EmailWhereUniqueInput
    create: XOR<EmailCreateWithoutDomainInput, EmailUncheckedCreateWithoutDomainInput>
  }

  export type EmailCreateManyDomainInputEnvelope = {
    data: EmailCreateManyDomainInput | EmailCreateManyDomainInput[]
  }

  export type TenantUpsertWithoutEmailDomainsInput = {
    update: XOR<TenantUpdateWithoutEmailDomainsInput, TenantUncheckedUpdateWithoutEmailDomainsInput>
    create: XOR<TenantCreateWithoutEmailDomainsInput, TenantUncheckedCreateWithoutEmailDomainsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutEmailDomainsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutEmailDomainsInput, TenantUncheckedUpdateWithoutEmailDomainsInput>
  }

  export type TenantUpdateWithoutEmailDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutEmailDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type SmtpUserUpsertWithoutDomainsInput = {
    update: XOR<SmtpUserUpdateWithoutDomainsInput, SmtpUserUncheckedUpdateWithoutDomainsInput>
    create: XOR<SmtpUserCreateWithoutDomainsInput, SmtpUserUncheckedCreateWithoutDomainsInput>
    where?: SmtpUserWhereInput
  }

  export type SmtpUserUpdateToOneWithWhereWithoutDomainsInput = {
    where?: SmtpUserWhereInput
    data: XOR<SmtpUserUpdateWithoutDomainsInput, SmtpUserUncheckedUpdateWithoutDomainsInput>
  }

  export type SmtpUserUpdateWithoutDomainsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSmtpUsersNestedInput
    authAttempts?: AuthAttemptUpdateManyWithoutSmtpUserNestedInput
  }

  export type SmtpUserUncheckedUpdateWithoutDomainsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authAttempts?: AuthAttemptUncheckedUpdateManyWithoutSmtpUserNestedInput
  }

  export type DkimKeyUpsertWithWhereUniqueWithoutDomainInput = {
    where: DkimKeyWhereUniqueInput
    update: XOR<DkimKeyUpdateWithoutDomainInput, DkimKeyUncheckedUpdateWithoutDomainInput>
    create: XOR<DkimKeyCreateWithoutDomainInput, DkimKeyUncheckedCreateWithoutDomainInput>
  }

  export type DkimKeyUpdateWithWhereUniqueWithoutDomainInput = {
    where: DkimKeyWhereUniqueInput
    data: XOR<DkimKeyUpdateWithoutDomainInput, DkimKeyUncheckedUpdateWithoutDomainInput>
  }

  export type DkimKeyUpdateManyWithWhereWithoutDomainInput = {
    where: DkimKeyScalarWhereInput
    data: XOR<DkimKeyUpdateManyMutationInput, DkimKeyUncheckedUpdateManyWithoutDomainInput>
  }

  export type DkimKeyScalarWhereInput = {
    AND?: DkimKeyScalarWhereInput | DkimKeyScalarWhereInput[]
    OR?: DkimKeyScalarWhereInput[]
    NOT?: DkimKeyScalarWhereInput | DkimKeyScalarWhereInput[]
    id?: IntFilter<"DkimKey"> | number
    domainId?: IntFilter<"DkimKey"> | number
    selector?: StringFilter<"DkimKey"> | string
    privateKey?: StringFilter<"DkimKey"> | string
    publicKey?: StringFilter<"DkimKey"> | string
    algorithm?: StringFilter<"DkimKey"> | string
    canonicalization?: StringFilter<"DkimKey"> | string
    keySize?: IntFilter<"DkimKey"> | number
    isActive?: BoolFilter<"DkimKey"> | boolean
    createdAt?: DateTimeFilter<"DkimKey"> | Date | string
    updatedAt?: DateTimeFilter<"DkimKey"> | Date | string
  }

  export type EmailUpsertWithWhereUniqueWithoutDomainInput = {
    where: EmailWhereUniqueInput
    update: XOR<EmailUpdateWithoutDomainInput, EmailUncheckedUpdateWithoutDomainInput>
    create: XOR<EmailCreateWithoutDomainInput, EmailUncheckedCreateWithoutDomainInput>
  }

  export type EmailUpdateWithWhereUniqueWithoutDomainInput = {
    where: EmailWhereUniqueInput
    data: XOR<EmailUpdateWithoutDomainInput, EmailUncheckedUpdateWithoutDomainInput>
  }

  export type EmailUpdateManyWithWhereWithoutDomainInput = {
    where: EmailScalarWhereInput
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyWithoutDomainInput>
  }

  export type EmailScalarWhereInput = {
    AND?: EmailScalarWhereInput | EmailScalarWhereInput[]
    OR?: EmailScalarWhereInput[]
    NOT?: EmailScalarWhereInput | EmailScalarWhereInput[]
    id?: IntFilter<"Email"> | number
    messageId?: StringFilter<"Email"> | string
    domainId?: IntNullableFilter<"Email"> | number | null
    fromEmail?: StringFilter<"Email"> | string
    toEmail?: StringFilter<"Email"> | string
    subject?: StringFilter<"Email"> | string
    htmlContent?: StringNullableFilter<"Email"> | string | null
    textContent?: StringNullableFilter<"Email"> | string | null
    status?: StringFilter<"Email"> | string
    direction?: StringFilter<"Email"> | string
    sentAt?: DateTimeNullableFilter<"Email"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"Email"> | Date | string | null
    mxServer?: StringNullableFilter<"Email"> | string | null
    errorMessage?: StringNullableFilter<"Email"> | string | null
    attempts?: IntFilter<"Email"> | number
    createdAt?: DateTimeFilter<"Email"> | Date | string
    updatedAt?: DateTimeFilter<"Email"> | Date | string
  }

  export type EmailDomainCreateWithoutDkimKeysInput = {
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutEmailDomainsInput
    smtpUser: SmtpUserCreateNestedOneWithoutDomainsInput
    emails?: EmailCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainUncheckedCreateWithoutDkimKeysInput = {
    id?: number
    tenantId?: string | null
    smtpUserId: number
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    emails?: EmailUncheckedCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainCreateOrConnectWithoutDkimKeysInput = {
    where: EmailDomainWhereUniqueInput
    create: XOR<EmailDomainCreateWithoutDkimKeysInput, EmailDomainUncheckedCreateWithoutDkimKeysInput>
  }

  export type EmailDomainUpsertWithoutDkimKeysInput = {
    update: XOR<EmailDomainUpdateWithoutDkimKeysInput, EmailDomainUncheckedUpdateWithoutDkimKeysInput>
    create: XOR<EmailDomainCreateWithoutDkimKeysInput, EmailDomainUncheckedCreateWithoutDkimKeysInput>
    where?: EmailDomainWhereInput
  }

  export type EmailDomainUpdateToOneWithWhereWithoutDkimKeysInput = {
    where?: EmailDomainWhereInput
    data: XOR<EmailDomainUpdateWithoutDkimKeysInput, EmailDomainUncheckedUpdateWithoutDkimKeysInput>
  }

  export type EmailDomainUpdateWithoutDkimKeysInput = {
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutEmailDomainsNestedInput
    smtpUser?: SmtpUserUpdateOneRequiredWithoutDomainsNestedInput
    emails?: EmailUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateWithoutDkimKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    smtpUserId?: IntFieldUpdateOperationsInput | number
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emails?: EmailUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainCreateWithoutEmailsInput = {
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutEmailDomainsInput
    smtpUser: SmtpUserCreateNestedOneWithoutDomainsInput
    dkimKeys?: DkimKeyCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainUncheckedCreateWithoutEmailsInput = {
    id?: number
    tenantId?: string | null
    smtpUserId: number
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dkimKeys?: DkimKeyUncheckedCreateNestedManyWithoutDomainInput
  }

  export type EmailDomainCreateOrConnectWithoutEmailsInput = {
    where: EmailDomainWhereUniqueInput
    create: XOR<EmailDomainCreateWithoutEmailsInput, EmailDomainUncheckedCreateWithoutEmailsInput>
  }

  export type EmailDomainUpsertWithoutEmailsInput = {
    update: XOR<EmailDomainUpdateWithoutEmailsInput, EmailDomainUncheckedUpdateWithoutEmailsInput>
    create: XOR<EmailDomainCreateWithoutEmailsInput, EmailDomainUncheckedCreateWithoutEmailsInput>
    where?: EmailDomainWhereInput
  }

  export type EmailDomainUpdateToOneWithWhereWithoutEmailsInput = {
    where?: EmailDomainWhereInput
    data: XOR<EmailDomainUpdateWithoutEmailsInput, EmailDomainUncheckedUpdateWithoutEmailsInput>
  }

  export type EmailDomainUpdateWithoutEmailsInput = {
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutEmailDomainsNestedInput
    smtpUser?: SmtpUserUpdateOneRequiredWithoutDomainsNestedInput
    dkimKeys?: DkimKeyUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateWithoutEmailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    smtpUserId?: IntFieldUpdateOperationsInput | number
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dkimKeys?: DkimKeyUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type SmtpUserCreateWithoutAuthAttemptsInput = {
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutSmtpUsersInput
    domains?: EmailDomainCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserUncheckedCreateWithoutAuthAttemptsInput = {
    id?: number
    userId?: string | null
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    domains?: EmailDomainUncheckedCreateNestedManyWithoutSmtpUserInput
  }

  export type SmtpUserCreateOrConnectWithoutAuthAttemptsInput = {
    where: SmtpUserWhereUniqueInput
    create: XOR<SmtpUserCreateWithoutAuthAttemptsInput, SmtpUserUncheckedCreateWithoutAuthAttemptsInput>
  }

  export type SmtpUserUpsertWithoutAuthAttemptsInput = {
    update: XOR<SmtpUserUpdateWithoutAuthAttemptsInput, SmtpUserUncheckedUpdateWithoutAuthAttemptsInput>
    create: XOR<SmtpUserCreateWithoutAuthAttemptsInput, SmtpUserUncheckedCreateWithoutAuthAttemptsInput>
    where?: SmtpUserWhereInput
  }

  export type SmtpUserUpdateToOneWithWhereWithoutAuthAttemptsInput = {
    where?: SmtpUserWhereInput
    data: XOR<SmtpUserUpdateWithoutAuthAttemptsInput, SmtpUserUncheckedUpdateWithoutAuthAttemptsInput>
  }

  export type SmtpUserUpdateWithoutAuthAttemptsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSmtpUsersNestedInput
    domains?: EmailDomainUpdateManyWithoutSmtpUserNestedInput
  }

  export type SmtpUserUncheckedUpdateWithoutAuthAttemptsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domains?: EmailDomainUncheckedUpdateManyWithoutSmtpUserNestedInput
  }

  export type UserCreateWithoutUserSessionsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutUserSessionsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutUserSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
  }

  export type UserUpsertWithoutUserSessionsInput = {
    update: XOR<UserUpdateWithoutUserSessionsInput, UserUncheckedUpdateWithoutUserSessionsInput>
    create: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserSessionsInput, UserUncheckedUpdateWithoutUserSessionsInput>
  }

  export type UserUpdateWithoutUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutUserTokensInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutUserTokensInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutUserTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
  }

  export type UserUpsertWithoutUserTokensInput = {
    update: XOR<UserUpdateWithoutUserTokensInput, UserUncheckedUpdateWithoutUserTokensInput>
    create: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserTokensInput, UserUncheckedUpdateWithoutUserTokensInput>
  }

  export type UserUpdateWithoutUserTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutUserTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutPasswordResetTokensInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutPasswordResetTokensInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutPasswordResetTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
  }

  export type UserUpsertWithoutPasswordResetTokensInput = {
    update: XOR<UserUpdateWithoutPasswordResetTokensInput, UserUncheckedUpdateWithoutPasswordResetTokensInput>
    create: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetTokensInput, UserUncheckedUpdateWithoutPasswordResetTokensInput>
  }

  export type UserUpdateWithoutPasswordResetTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateWithoutEmailVerificationTokensInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutEmailVerificationTokensInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutEmailVerificationTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmailVerificationTokensInput, UserUncheckedCreateWithoutEmailVerificationTokensInput>
  }

  export type UserUpsertWithoutEmailVerificationTokensInput = {
    update: XOR<UserUpdateWithoutEmailVerificationTokensInput, UserUncheckedUpdateWithoutEmailVerificationTokensInput>
    create: XOR<UserCreateWithoutEmailVerificationTokensInput, UserUncheckedCreateWithoutEmailVerificationTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmailVerificationTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmailVerificationTokensInput, UserUncheckedUpdateWithoutEmailVerificationTokensInput>
  }

  export type UserUpdateWithoutEmailVerificationTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutEmailVerificationTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantCreateWithoutInvoicesInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutInvoicesInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutInvoicesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
  }

  export type InvoiceItemCreateWithoutInvoiceInput = {
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt?: Date | string
  }

  export type InvoiceItemUncheckedCreateWithoutInvoiceInput = {
    id?: number
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt?: Date | string
  }

  export type InvoiceItemCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemCreateManyInvoiceInputEnvelope = {
    data: InvoiceItemCreateManyInvoiceInput | InvoiceItemCreateManyInvoiceInput[]
  }

  export type TenantUpsertWithoutInvoicesInput = {
    update: XOR<TenantUpdateWithoutInvoicesInput, TenantUncheckedUpdateWithoutInvoicesInput>
    create: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutInvoicesInput, TenantUncheckedUpdateWithoutInvoicesInput>
  }

  export type TenantUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceItemScalarWhereInput = {
    AND?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    OR?: InvoiceItemScalarWhereInput[]
    NOT?: InvoiceItemScalarWhereInput | InvoiceItemScalarWhereInput[]
    id?: IntFilter<"InvoiceItem"> | number
    invoiceId?: StringFilter<"InvoiceItem"> | string
    descricao?: StringFilter<"InvoiceItem"> | string
    quantidade?: IntFilter<"InvoiceItem"> | number
    valorUnitario?: FloatFilter<"InvoiceItem"> | number
    valorTotal?: FloatFilter<"InvoiceItem"> | number
    tipo?: StringFilter<"InvoiceItem"> | string
    createdAt?: DateTimeFilter<"InvoiceItem"> | Date | string
  }

  export type InvoiceCreateWithoutItensInput = {
    id?: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutInvoicesInput
  }

  export type InvoiceUncheckedCreateWithoutItensInput = {
    id?: string
    tenantId: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateOrConnectWithoutItensInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutItensInput, InvoiceUncheckedCreateWithoutItensInput>
  }

  export type InvoiceUpsertWithoutItensInput = {
    update: XOR<InvoiceUpdateWithoutItensInput, InvoiceUncheckedUpdateWithoutItensInput>
    create: XOR<InvoiceCreateWithoutItensInput, InvoiceUncheckedCreateWithoutItensInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutItensInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutItensInput, InvoiceUncheckedUpdateWithoutItensInput>
  }

  export type InvoiceUpdateWithoutItensInput = {
    id?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutItensInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAnalyticsUserSessionsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAnalyticsUserSessionsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAnalyticsUserSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnalyticsUserSessionsInput, UserUncheckedCreateWithoutAnalyticsUserSessionsInput>
  }

  export type TenantCreateWithoutAnalyticsUserSessionsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutAnalyticsUserSessionsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutAnalyticsUserSessionsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutAnalyticsUserSessionsInput, TenantUncheckedCreateWithoutAnalyticsUserSessionsInput>
  }

  export type UserUpsertWithoutAnalyticsUserSessionsInput = {
    update: XOR<UserUpdateWithoutAnalyticsUserSessionsInput, UserUncheckedUpdateWithoutAnalyticsUserSessionsInput>
    create: XOR<UserCreateWithoutAnalyticsUserSessionsInput, UserUncheckedCreateWithoutAnalyticsUserSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnalyticsUserSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnalyticsUserSessionsInput, UserUncheckedUpdateWithoutAnalyticsUserSessionsInput>
  }

  export type UserUpdateWithoutAnalyticsUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAnalyticsUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantUpsertWithoutAnalyticsUserSessionsInput = {
    update: XOR<TenantUpdateWithoutAnalyticsUserSessionsInput, TenantUncheckedUpdateWithoutAnalyticsUserSessionsInput>
    create: XOR<TenantCreateWithoutAnalyticsUserSessionsInput, TenantUncheckedCreateWithoutAnalyticsUserSessionsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutAnalyticsUserSessionsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutAnalyticsUserSessionsInput, TenantUncheckedUpdateWithoutAnalyticsUserSessionsInput>
  }

  export type TenantUpdateWithoutAnalyticsUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutAnalyticsUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserCreateWithoutFeatureUsageInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutFeatureUsageInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutFeatureUsageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeatureUsageInput, UserUncheckedCreateWithoutFeatureUsageInput>
  }

  export type TenantCreateWithoutFeatureUsageInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutFeatureUsageInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutFeatureUsageInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutFeatureUsageInput, TenantUncheckedCreateWithoutFeatureUsageInput>
  }

  export type UserUpsertWithoutFeatureUsageInput = {
    update: XOR<UserUpdateWithoutFeatureUsageInput, UserUncheckedUpdateWithoutFeatureUsageInput>
    create: XOR<UserCreateWithoutFeatureUsageInput, UserUncheckedCreateWithoutFeatureUsageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeatureUsageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeatureUsageInput, UserUncheckedUpdateWithoutFeatureUsageInput>
  }

  export type UserUpdateWithoutFeatureUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutFeatureUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantUpsertWithoutFeatureUsageInput = {
    update: XOR<TenantUpdateWithoutFeatureUsageInput, TenantUncheckedUpdateWithoutFeatureUsageInput>
    create: XOR<TenantCreateWithoutFeatureUsageInput, TenantUncheckedCreateWithoutFeatureUsageInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutFeatureUsageInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutFeatureUsageInput, TenantUncheckedUpdateWithoutFeatureUsageInput>
  }

  export type TenantUpdateWithoutFeatureUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutFeatureUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserCreateWithoutPageViewsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutPageViewsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutPageViewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPageViewsInput, UserUncheckedCreateWithoutPageViewsInput>
  }

  export type TenantCreateWithoutPageViewsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPageViewsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPageViewsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPageViewsInput, TenantUncheckedCreateWithoutPageViewsInput>
  }

  export type UserUpsertWithoutPageViewsInput = {
    update: XOR<UserUpdateWithoutPageViewsInput, UserUncheckedUpdateWithoutPageViewsInput>
    create: XOR<UserCreateWithoutPageViewsInput, UserUncheckedCreateWithoutPageViewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPageViewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPageViewsInput, UserUncheckedUpdateWithoutPageViewsInput>
  }

  export type UserUpdateWithoutPageViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPageViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantUpsertWithoutPageViewsInput = {
    update: XOR<TenantUpdateWithoutPageViewsInput, TenantUncheckedUpdateWithoutPageViewsInput>
    create: XOR<TenantCreateWithoutPageViewsInput, TenantUncheckedCreateWithoutPageViewsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPageViewsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPageViewsInput, TenantUncheckedUpdateWithoutPageViewsInput>
  }

  export type TenantUpdateWithoutPageViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPageViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutModuleAnalyticsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutModuleAnalyticsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutModuleAnalyticsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutModuleAnalyticsInput, TenantUncheckedCreateWithoutModuleAnalyticsInput>
  }

  export type TenantUpsertWithoutModuleAnalyticsInput = {
    update: XOR<TenantUpdateWithoutModuleAnalyticsInput, TenantUncheckedUpdateWithoutModuleAnalyticsInput>
    create: XOR<TenantCreateWithoutModuleAnalyticsInput, TenantUncheckedCreateWithoutModuleAnalyticsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutModuleAnalyticsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutModuleAnalyticsInput, TenantUncheckedUpdateWithoutModuleAnalyticsInput>
  }

  export type TenantUpdateWithoutModuleAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutModuleAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutGeographicDataInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutGeographicDataInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutGeographicDataInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutGeographicDataInput, TenantUncheckedCreateWithoutGeographicDataInput>
  }

  export type TenantUpsertWithoutGeographicDataInput = {
    update: XOR<TenantUpdateWithoutGeographicDataInput, TenantUncheckedUpdateWithoutGeographicDataInput>
    create: XOR<TenantCreateWithoutGeographicDataInput, TenantUncheckedCreateWithoutGeographicDataInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutGeographicDataInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutGeographicDataInput, TenantUncheckedUpdateWithoutGeographicDataInput>
  }

  export type TenantUpdateWithoutGeographicDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutGeographicDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserCreateWithoutCreatedReportsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedReportsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedReportsInput, UserUncheckedCreateWithoutCreatedReportsInput>
  }

  export type ReportSchedulesCreateWithoutReportInput = {
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    recipients?: ReportRecipientsCreateNestedManyWithoutScheduleInput
  }

  export type ReportSchedulesUncheckedCreateWithoutReportInput = {
    id?: number
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    recipients?: ReportRecipientsUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ReportSchedulesCreateOrConnectWithoutReportInput = {
    where: ReportSchedulesWhereUniqueInput
    create: XOR<ReportSchedulesCreateWithoutReportInput, ReportSchedulesUncheckedCreateWithoutReportInput>
  }

  export type ReportSchedulesCreateManyReportInputEnvelope = {
    data: ReportSchedulesCreateManyReportInput | ReportSchedulesCreateManyReportInput[]
  }

  export type ReportHistoryCreateWithoutReportInput = {
    generatedAt?: Date | string
    status: string
    filePath?: string | null
    fileSize?: number | null
    executionTime?: number | null
    errorMessage?: string | null
    sentTo?: string | null
    period?: string | null
  }

  export type ReportHistoryUncheckedCreateWithoutReportInput = {
    id?: number
    generatedAt?: Date | string
    status: string
    filePath?: string | null
    fileSize?: number | null
    executionTime?: number | null
    errorMessage?: string | null
    sentTo?: string | null
    period?: string | null
  }

  export type ReportHistoryCreateOrConnectWithoutReportInput = {
    where: ReportHistoryWhereUniqueInput
    create: XOR<ReportHistoryCreateWithoutReportInput, ReportHistoryUncheckedCreateWithoutReportInput>
  }

  export type ReportHistoryCreateManyReportInputEnvelope = {
    data: ReportHistoryCreateManyReportInput | ReportHistoryCreateManyReportInput[]
  }

  export type UserUpsertWithoutCreatedReportsInput = {
    update: XOR<UserUpdateWithoutCreatedReportsInput, UserUncheckedUpdateWithoutCreatedReportsInput>
    create: XOR<UserCreateWithoutCreatedReportsInput, UserUncheckedCreateWithoutCreatedReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedReportsInput, UserUncheckedUpdateWithoutCreatedReportsInput>
  }

  export type UserUpdateWithoutCreatedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ReportSchedulesUpsertWithWhereUniqueWithoutReportInput = {
    where: ReportSchedulesWhereUniqueInput
    update: XOR<ReportSchedulesUpdateWithoutReportInput, ReportSchedulesUncheckedUpdateWithoutReportInput>
    create: XOR<ReportSchedulesCreateWithoutReportInput, ReportSchedulesUncheckedCreateWithoutReportInput>
  }

  export type ReportSchedulesUpdateWithWhereUniqueWithoutReportInput = {
    where: ReportSchedulesWhereUniqueInput
    data: XOR<ReportSchedulesUpdateWithoutReportInput, ReportSchedulesUncheckedUpdateWithoutReportInput>
  }

  export type ReportSchedulesUpdateManyWithWhereWithoutReportInput = {
    where: ReportSchedulesScalarWhereInput
    data: XOR<ReportSchedulesUpdateManyMutationInput, ReportSchedulesUncheckedUpdateManyWithoutReportInput>
  }

  export type ReportSchedulesScalarWhereInput = {
    AND?: ReportSchedulesScalarWhereInput | ReportSchedulesScalarWhereInput[]
    OR?: ReportSchedulesScalarWhereInput[]
    NOT?: ReportSchedulesScalarWhereInput | ReportSchedulesScalarWhereInput[]
    id?: IntFilter<"ReportSchedules"> | number
    reportId?: IntFilter<"ReportSchedules"> | number
    cronExpression?: StringFilter<"ReportSchedules"> | string
    timezone?: StringFilter<"ReportSchedules"> | string
    nextRun?: DateTimeFilter<"ReportSchedules"> | Date | string
    lastRun?: DateTimeNullableFilter<"ReportSchedules"> | Date | string | null
    isActive?: BoolFilter<"ReportSchedules"> | boolean
    createdAt?: DateTimeFilter<"ReportSchedules"> | Date | string
  }

  export type ReportHistoryUpsertWithWhereUniqueWithoutReportInput = {
    where: ReportHistoryWhereUniqueInput
    update: XOR<ReportHistoryUpdateWithoutReportInput, ReportHistoryUncheckedUpdateWithoutReportInput>
    create: XOR<ReportHistoryCreateWithoutReportInput, ReportHistoryUncheckedCreateWithoutReportInput>
  }

  export type ReportHistoryUpdateWithWhereUniqueWithoutReportInput = {
    where: ReportHistoryWhereUniqueInput
    data: XOR<ReportHistoryUpdateWithoutReportInput, ReportHistoryUncheckedUpdateWithoutReportInput>
  }

  export type ReportHistoryUpdateManyWithWhereWithoutReportInput = {
    where: ReportHistoryScalarWhereInput
    data: XOR<ReportHistoryUpdateManyMutationInput, ReportHistoryUncheckedUpdateManyWithoutReportInput>
  }

  export type ReportHistoryScalarWhereInput = {
    AND?: ReportHistoryScalarWhereInput | ReportHistoryScalarWhereInput[]
    OR?: ReportHistoryScalarWhereInput[]
    NOT?: ReportHistoryScalarWhereInput | ReportHistoryScalarWhereInput[]
    id?: IntFilter<"ReportHistory"> | number
    reportId?: IntFilter<"ReportHistory"> | number
    generatedAt?: DateTimeFilter<"ReportHistory"> | Date | string
    status?: StringFilter<"ReportHistory"> | string
    filePath?: StringNullableFilter<"ReportHistory"> | string | null
    fileSize?: IntNullableFilter<"ReportHistory"> | number | null
    executionTime?: IntNullableFilter<"ReportHistory"> | number | null
    errorMessage?: StringNullableFilter<"ReportHistory"> | string | null
    sentTo?: StringNullableFilter<"ReportHistory"> | string | null
    period?: StringNullableFilter<"ReportHistory"> | string | null
  }

  export type AutomatedReportsCreateWithoutSchedulesInput = {
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedReportsInput
    history?: ReportHistoryCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsUncheckedCreateWithoutSchedulesInput = {
    id?: number
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ReportHistoryUncheckedCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsCreateOrConnectWithoutSchedulesInput = {
    where: AutomatedReportsWhereUniqueInput
    create: XOR<AutomatedReportsCreateWithoutSchedulesInput, AutomatedReportsUncheckedCreateWithoutSchedulesInput>
  }

  export type ReportRecipientsCreateWithoutScheduleInput = {
    email: string
    name?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportRecipientsUncheckedCreateWithoutScheduleInput = {
    id?: number
    email: string
    name?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportRecipientsCreateOrConnectWithoutScheduleInput = {
    where: ReportRecipientsWhereUniqueInput
    create: XOR<ReportRecipientsCreateWithoutScheduleInput, ReportRecipientsUncheckedCreateWithoutScheduleInput>
  }

  export type ReportRecipientsCreateManyScheduleInputEnvelope = {
    data: ReportRecipientsCreateManyScheduleInput | ReportRecipientsCreateManyScheduleInput[]
  }

  export type AutomatedReportsUpsertWithoutSchedulesInput = {
    update: XOR<AutomatedReportsUpdateWithoutSchedulesInput, AutomatedReportsUncheckedUpdateWithoutSchedulesInput>
    create: XOR<AutomatedReportsCreateWithoutSchedulesInput, AutomatedReportsUncheckedCreateWithoutSchedulesInput>
    where?: AutomatedReportsWhereInput
  }

  export type AutomatedReportsUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: AutomatedReportsWhereInput
    data: XOR<AutomatedReportsUpdateWithoutSchedulesInput, AutomatedReportsUncheckedUpdateWithoutSchedulesInput>
  }

  export type AutomatedReportsUpdateWithoutSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedReportsNestedInput
    history?: ReportHistoryUpdateManyWithoutReportNestedInput
  }

  export type AutomatedReportsUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ReportHistoryUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportRecipientsUpsertWithWhereUniqueWithoutScheduleInput = {
    where: ReportRecipientsWhereUniqueInput
    update: XOR<ReportRecipientsUpdateWithoutScheduleInput, ReportRecipientsUncheckedUpdateWithoutScheduleInput>
    create: XOR<ReportRecipientsCreateWithoutScheduleInput, ReportRecipientsUncheckedCreateWithoutScheduleInput>
  }

  export type ReportRecipientsUpdateWithWhereUniqueWithoutScheduleInput = {
    where: ReportRecipientsWhereUniqueInput
    data: XOR<ReportRecipientsUpdateWithoutScheduleInput, ReportRecipientsUncheckedUpdateWithoutScheduleInput>
  }

  export type ReportRecipientsUpdateManyWithWhereWithoutScheduleInput = {
    where: ReportRecipientsScalarWhereInput
    data: XOR<ReportRecipientsUpdateManyMutationInput, ReportRecipientsUncheckedUpdateManyWithoutScheduleInput>
  }

  export type ReportRecipientsScalarWhereInput = {
    AND?: ReportRecipientsScalarWhereInput | ReportRecipientsScalarWhereInput[]
    OR?: ReportRecipientsScalarWhereInput[]
    NOT?: ReportRecipientsScalarWhereInput | ReportRecipientsScalarWhereInput[]
    id?: IntFilter<"ReportRecipients"> | number
    scheduleId?: IntFilter<"ReportRecipients"> | number
    email?: StringFilter<"ReportRecipients"> | string
    name?: StringNullableFilter<"ReportRecipients"> | string | null
    isActive?: BoolFilter<"ReportRecipients"> | boolean
    createdAt?: DateTimeFilter<"ReportRecipients"> | Date | string
  }

  export type ReportSchedulesCreateWithoutRecipientsInput = {
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    report: AutomatedReportsCreateNestedOneWithoutSchedulesInput
  }

  export type ReportSchedulesUncheckedCreateWithoutRecipientsInput = {
    id?: number
    reportId: number
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportSchedulesCreateOrConnectWithoutRecipientsInput = {
    where: ReportSchedulesWhereUniqueInput
    create: XOR<ReportSchedulesCreateWithoutRecipientsInput, ReportSchedulesUncheckedCreateWithoutRecipientsInput>
  }

  export type ReportSchedulesUpsertWithoutRecipientsInput = {
    update: XOR<ReportSchedulesUpdateWithoutRecipientsInput, ReportSchedulesUncheckedUpdateWithoutRecipientsInput>
    create: XOR<ReportSchedulesCreateWithoutRecipientsInput, ReportSchedulesUncheckedCreateWithoutRecipientsInput>
    where?: ReportSchedulesWhereInput
  }

  export type ReportSchedulesUpdateToOneWithWhereWithoutRecipientsInput = {
    where?: ReportSchedulesWhereInput
    data: XOR<ReportSchedulesUpdateWithoutRecipientsInput, ReportSchedulesUncheckedUpdateWithoutRecipientsInput>
  }

  export type ReportSchedulesUpdateWithoutRecipientsInput = {
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: AutomatedReportsUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ReportSchedulesUncheckedUpdateWithoutRecipientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutomatedReportsCreateWithoutHistoryInput = {
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedReportsInput
    schedules?: ReportSchedulesCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsUncheckedCreateWithoutHistoryInput = {
    id?: number
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: ReportSchedulesUncheckedCreateNestedManyWithoutReportInput
  }

  export type AutomatedReportsCreateOrConnectWithoutHistoryInput = {
    where: AutomatedReportsWhereUniqueInput
    create: XOR<AutomatedReportsCreateWithoutHistoryInput, AutomatedReportsUncheckedCreateWithoutHistoryInput>
  }

  export type AutomatedReportsUpsertWithoutHistoryInput = {
    update: XOR<AutomatedReportsUpdateWithoutHistoryInput, AutomatedReportsUncheckedUpdateWithoutHistoryInput>
    create: XOR<AutomatedReportsCreateWithoutHistoryInput, AutomatedReportsUncheckedCreateWithoutHistoryInput>
    where?: AutomatedReportsWhereInput
  }

  export type AutomatedReportsUpdateToOneWithWhereWithoutHistoryInput = {
    where?: AutomatedReportsWhereInput
    data: XOR<AutomatedReportsUpdateWithoutHistoryInput, AutomatedReportsUncheckedUpdateWithoutHistoryInput>
  }

  export type AutomatedReportsUpdateWithoutHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedReportsNestedInput
    schedules?: ReportSchedulesUpdateManyWithoutReportNestedInput
  }

  export type AutomatedReportsUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ReportSchedulesUncheckedUpdateManyWithoutReportNestedInput
  }

  export type TenantCreateWithoutSatisfactionSurveysInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSatisfactionSurveysInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSatisfactionSurveysInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSatisfactionSurveysInput, TenantUncheckedCreateWithoutSatisfactionSurveysInput>
  }

  export type UserCreateWithoutCreatedSurveysInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedSurveysInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedSurveysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSurveysInput, UserUncheckedCreateWithoutCreatedSurveysInput>
  }

  export type NpsResponsesCreateWithoutSurveyInput = {
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutNpsResponsesInput
    tenant?: TenantCreateNestedOneWithoutNpsResponsesInput
  }

  export type NpsResponsesUncheckedCreateWithoutSurveyInput = {
    id?: number
    userId?: string | null
    tenantId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type NpsResponsesCreateOrConnectWithoutSurveyInput = {
    where: NpsResponsesWhereUniqueInput
    create: XOR<NpsResponsesCreateWithoutSurveyInput, NpsResponsesUncheckedCreateWithoutSurveyInput>
  }

  export type NpsResponsesCreateManySurveyInputEnvelope = {
    data: NpsResponsesCreateManySurveyInput | NpsResponsesCreateManySurveyInput[]
  }

  export type FeedbackSubmissionsCreateWithoutSurveyInput = {
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutFeedbackSubmissionsInput
    tenant?: TenantCreateNestedOneWithoutFeedbackSubmissionsInput
    assignee?: UserCreateNestedOneWithoutAssignedFeedbacksInput
  }

  export type FeedbackSubmissionsUncheckedCreateWithoutSurveyInput = {
    id?: number
    userId?: string | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsCreateOrConnectWithoutSurveyInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    create: XOR<FeedbackSubmissionsCreateWithoutSurveyInput, FeedbackSubmissionsUncheckedCreateWithoutSurveyInput>
  }

  export type FeedbackSubmissionsCreateManySurveyInputEnvelope = {
    data: FeedbackSubmissionsCreateManySurveyInput | FeedbackSubmissionsCreateManySurveyInput[]
  }

  export type TenantUpsertWithoutSatisfactionSurveysInput = {
    update: XOR<TenantUpdateWithoutSatisfactionSurveysInput, TenantUncheckedUpdateWithoutSatisfactionSurveysInput>
    create: XOR<TenantCreateWithoutSatisfactionSurveysInput, TenantUncheckedCreateWithoutSatisfactionSurveysInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSatisfactionSurveysInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSatisfactionSurveysInput, TenantUncheckedUpdateWithoutSatisfactionSurveysInput>
  }

  export type TenantUpdateWithoutSatisfactionSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSatisfactionSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutCreatedSurveysInput = {
    update: XOR<UserUpdateWithoutCreatedSurveysInput, UserUncheckedUpdateWithoutCreatedSurveysInput>
    create: XOR<UserCreateWithoutCreatedSurveysInput, UserUncheckedCreateWithoutCreatedSurveysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSurveysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSurveysInput, UserUncheckedUpdateWithoutCreatedSurveysInput>
  }

  export type UserUpdateWithoutCreatedSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type NpsResponsesUpsertWithWhereUniqueWithoutSurveyInput = {
    where: NpsResponsesWhereUniqueInput
    update: XOR<NpsResponsesUpdateWithoutSurveyInput, NpsResponsesUncheckedUpdateWithoutSurveyInput>
    create: XOR<NpsResponsesCreateWithoutSurveyInput, NpsResponsesUncheckedCreateWithoutSurveyInput>
  }

  export type NpsResponsesUpdateWithWhereUniqueWithoutSurveyInput = {
    where: NpsResponsesWhereUniqueInput
    data: XOR<NpsResponsesUpdateWithoutSurveyInput, NpsResponsesUncheckedUpdateWithoutSurveyInput>
  }

  export type NpsResponsesUpdateManyWithWhereWithoutSurveyInput = {
    where: NpsResponsesScalarWhereInput
    data: XOR<NpsResponsesUpdateManyMutationInput, NpsResponsesUncheckedUpdateManyWithoutSurveyInput>
  }

  export type FeedbackSubmissionsUpsertWithWhereUniqueWithoutSurveyInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    update: XOR<FeedbackSubmissionsUpdateWithoutSurveyInput, FeedbackSubmissionsUncheckedUpdateWithoutSurveyInput>
    create: XOR<FeedbackSubmissionsCreateWithoutSurveyInput, FeedbackSubmissionsUncheckedCreateWithoutSurveyInput>
  }

  export type FeedbackSubmissionsUpdateWithWhereUniqueWithoutSurveyInput = {
    where: FeedbackSubmissionsWhereUniqueInput
    data: XOR<FeedbackSubmissionsUpdateWithoutSurveyInput, FeedbackSubmissionsUncheckedUpdateWithoutSurveyInput>
  }

  export type FeedbackSubmissionsUpdateManyWithWhereWithoutSurveyInput = {
    where: FeedbackSubmissionsScalarWhereInput
    data: XOR<FeedbackSubmissionsUpdateManyMutationInput, FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyInput>
  }

  export type SatisfactionSurveysCreateWithoutNpsResponsesInput = {
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutSatisfactionSurveysInput
    creator: UserCreateNestedOneWithoutCreatedSurveysInput
    feedbacks?: FeedbackSubmissionsCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysUncheckedCreateWithoutNpsResponsesInput = {
    id?: number
    title: string
    description?: string | null
    tenantId?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysCreateOrConnectWithoutNpsResponsesInput = {
    where: SatisfactionSurveysWhereUniqueInput
    create: XOR<SatisfactionSurveysCreateWithoutNpsResponsesInput, SatisfactionSurveysUncheckedCreateWithoutNpsResponsesInput>
  }

  export type UserCreateWithoutNpsResponsesInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutNpsResponsesInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutNpsResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNpsResponsesInput, UserUncheckedCreateWithoutNpsResponsesInput>
  }

  export type TenantCreateWithoutNpsResponsesInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutNpsResponsesInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutNpsResponsesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutNpsResponsesInput, TenantUncheckedCreateWithoutNpsResponsesInput>
  }

  export type SatisfactionSurveysUpsertWithoutNpsResponsesInput = {
    update: XOR<SatisfactionSurveysUpdateWithoutNpsResponsesInput, SatisfactionSurveysUncheckedUpdateWithoutNpsResponsesInput>
    create: XOR<SatisfactionSurveysCreateWithoutNpsResponsesInput, SatisfactionSurveysUncheckedCreateWithoutNpsResponsesInput>
    where?: SatisfactionSurveysWhereInput
  }

  export type SatisfactionSurveysUpdateToOneWithWhereWithoutNpsResponsesInput = {
    where?: SatisfactionSurveysWhereInput
    data: XOR<SatisfactionSurveysUpdateWithoutNpsResponsesInput, SatisfactionSurveysUncheckedUpdateWithoutNpsResponsesInput>
  }

  export type SatisfactionSurveysUpdateWithoutNpsResponsesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutSatisfactionSurveysNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedSurveysNestedInput
    feedbacks?: FeedbackSubmissionsUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateWithoutNpsResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type UserUpsertWithoutNpsResponsesInput = {
    update: XOR<UserUpdateWithoutNpsResponsesInput, UserUncheckedUpdateWithoutNpsResponsesInput>
    create: XOR<UserCreateWithoutNpsResponsesInput, UserUncheckedCreateWithoutNpsResponsesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNpsResponsesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNpsResponsesInput, UserUncheckedUpdateWithoutNpsResponsesInput>
  }

  export type UserUpdateWithoutNpsResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutNpsResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantUpsertWithoutNpsResponsesInput = {
    update: XOR<TenantUpdateWithoutNpsResponsesInput, TenantUncheckedUpdateWithoutNpsResponsesInput>
    create: XOR<TenantCreateWithoutNpsResponsesInput, TenantUncheckedCreateWithoutNpsResponsesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutNpsResponsesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutNpsResponsesInput, TenantUncheckedUpdateWithoutNpsResponsesInput>
  }

  export type TenantUpdateWithoutNpsResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutNpsResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type SatisfactionSurveysCreateWithoutFeedbacksInput = {
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant?: TenantCreateNestedOneWithoutSatisfactionSurveysInput
    creator: UserCreateNestedOneWithoutCreatedSurveysInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    title: string
    description?: string | null
    tenantId?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SatisfactionSurveysCreateOrConnectWithoutFeedbacksInput = {
    where: SatisfactionSurveysWhereUniqueInput
    create: XOR<SatisfactionSurveysCreateWithoutFeedbacksInput, SatisfactionSurveysUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserCreateWithoutFeedbackSubmissionsInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutFeedbackSubmissionsInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutAssigneeInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutFeedbackSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackSubmissionsInput, UserUncheckedCreateWithoutFeedbackSubmissionsInput>
  }

  export type TenantCreateWithoutFeedbackSubmissionsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainCreateNestedManyWithoutTenantInput
    invoices?: InvoiceCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutFeedbackSubmissionsInput = {
    id: string
    tenantCode: string
    nome: string
    email: string
    cidade: string
    estado: string
    cnpj: string
    plano?: string | null
    status?: string | null
    populacao?: number | null
    endereco?: string | null
    responsavelNome?: string | null
    responsavelEmail?: string | null
    responsavelTelefone?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    hasAdmin?: boolean | null
    adminConfirmed?: boolean | null
    adminFirstLogin?: boolean | null
    limiteUsuarios?: number | null
    valorMensal?: number | null
    usuariosAtivos?: number | null
    protocolosMes?: number | null
    configuracoes?: string | null
    metricas?: string | null
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutTenantInput
    emailDomains?: EmailDomainUncheckedCreateNestedManyWithoutTenantInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutTenantInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutTenantInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutTenantInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutTenantInput
    moduleAnalytics?: ModuleAnalyticsUncheckedCreateNestedManyWithoutTenantInput
    geographicData?: GeographicDataUncheckedCreateNestedManyWithoutTenantInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutTenantInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutFeedbackSubmissionsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutFeedbackSubmissionsInput, TenantUncheckedCreateWithoutFeedbackSubmissionsInput>
  }

  export type UserCreateWithoutAssignedFeedbacksInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    tenant?: TenantCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    userTokens?: UserTokenCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageCreateNestedManyWithoutUserInput
    pageViews?: PageViewsCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsCreateNestedManyWithoutUserInput
    createdReports?: AutomatedReportsCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAssignedFeedbacksInput = {
    id: string
    tenantId?: string | null
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: UserPermissionUncheckedCreateNestedManyWithoutGrantorInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    smtpUsers?: SmtpUserUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userTokens?: UserTokenUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedCreateNestedManyWithoutUserInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedCreateNestedManyWithoutUserInput
    featureUsage?: FeatureUsageUncheckedCreateNestedManyWithoutUserInput
    pageViews?: PageViewsUncheckedCreateNestedManyWithoutUserInput
    npsResponses?: NpsResponsesUncheckedCreateNestedManyWithoutUserInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedCreateNestedManyWithoutUserInput
    createdReports?: AutomatedReportsUncheckedCreateNestedManyWithoutCreatorInput
    createdSurveys?: SatisfactionSurveysUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAssignedFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedFeedbacksInput, UserUncheckedCreateWithoutAssignedFeedbacksInput>
  }

  export type SatisfactionSurveysUpsertWithoutFeedbacksInput = {
    update: XOR<SatisfactionSurveysUpdateWithoutFeedbacksInput, SatisfactionSurveysUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<SatisfactionSurveysCreateWithoutFeedbacksInput, SatisfactionSurveysUncheckedCreateWithoutFeedbacksInput>
    where?: SatisfactionSurveysWhereInput
  }

  export type SatisfactionSurveysUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: SatisfactionSurveysWhereInput
    data: XOR<SatisfactionSurveysUpdateWithoutFeedbacksInput, SatisfactionSurveysUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SatisfactionSurveysUpdateWithoutFeedbacksInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutSatisfactionSurveysNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedSurveysNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type UserUpsertWithoutFeedbackSubmissionsInput = {
    update: XOR<UserUpdateWithoutFeedbackSubmissionsInput, UserUncheckedUpdateWithoutFeedbackSubmissionsInput>
    create: XOR<UserCreateWithoutFeedbackSubmissionsInput, UserUncheckedCreateWithoutFeedbackSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackSubmissionsInput, UserUncheckedUpdateWithoutFeedbackSubmissionsInput>
  }

  export type UserUpdateWithoutFeedbackSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TenantUpsertWithoutFeedbackSubmissionsInput = {
    update: XOR<TenantUpdateWithoutFeedbackSubmissionsInput, TenantUncheckedUpdateWithoutFeedbackSubmissionsInput>
    create: XOR<TenantCreateWithoutFeedbackSubmissionsInput, TenantUncheckedCreateWithoutFeedbackSubmissionsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutFeedbackSubmissionsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutFeedbackSubmissionsInput, TenantUncheckedUpdateWithoutFeedbackSubmissionsInput>
  }

  export type TenantUpdateWithoutFeedbackSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutFeedbackSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantCode?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    plano?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelNome?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelEmail?: NullableStringFieldUpdateOperationsInput | string | null
    responsavelTelefone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hasAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminConfirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    adminFirstLogin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    limiteUsuarios?: NullableIntFieldUpdateOperationsInput | number | null
    valorMensal?: NullableFloatFieldUpdateOperationsInput | number | null
    usuariosAtivos?: NullableIntFieldUpdateOperationsInput | number | null
    protocolosMes?: NullableIntFieldUpdateOperationsInput | number | null
    configuracoes?: NullableStringFieldUpdateOperationsInput | string | null
    metricas?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    emailDomains?: EmailDomainUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutTenantNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutTenantNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutTenantNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutTenantNestedInput
    moduleAnalytics?: ModuleAnalyticsUncheckedUpdateManyWithoutTenantNestedInput
    geographicData?: GeographicDataUncheckedUpdateManyWithoutTenantNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutTenantNestedInput
    satisfactionSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutAssignedFeedbacksInput = {
    update: XOR<UserUpdateWithoutAssignedFeedbacksInput, UserUncheckedUpdateWithoutAssignedFeedbacksInput>
    create: XOR<UserCreateWithoutAssignedFeedbacksInput, UserUncheckedCreateWithoutAssignedFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedFeedbacksInput, UserUncheckedUpdateWithoutAssignedFeedbacksInput>
  }

  export type UserUpdateWithoutAssignedFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenant?: TenantUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyTenantInput = {
    id: string
    nomeCompleto: string
    email: string
    passwordHash: string
    role?: string
    status?: string
    avatarUrl?: string | null
    ultimoLogin?: Date | string | null
    failedLoginAttempts?: number | null
    lockedUntil?: Date | string | null
    emailVerified?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    tipoUsuario?: string | null
    telefone?: string | null
    ultimaAtividade?: Date | string | null
    ativo?: boolean | null
  }

  export type ActivityLogCreateManyTenantInput = {
    id?: number
    userId?: string | null
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
  }

  export type EmailDomainCreateManyTenantInput = {
    id?: number
    smtpUserId: number
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvoiceCreateManyTenantInput = {
    id?: string
    numero: string
    periodo: string
    valor: number
    descricao?: string | null
    status?: string
    dataCriacao?: Date | string
    dataVencimento: Date | string
    dataPagamento?: Date | string | null
    metodoPagamento?: string | null
    desconto?: number
    taxaAdicional?: number
    plano: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AnalyticsUserSessionCreateManyTenantInput = {
    id?: string
    userId: string
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type FeatureUsageCreateManyTenantInput = {
    id?: number
    userId: string
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
  }

  export type PageViewsCreateManyTenantInput = {
    id?: number
    userId: string
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ModuleAnalyticsCreateManyTenantInput = {
    id?: number
    moduleName: string
    totalUsers?: number
    activeUsers?: number
    totalSessions?: number
    totalPageViews?: number
    avgSessionTime?: number | null
    popularFeature?: string | null
    period: string
    createdAt?: Date | string
  }

  export type GeographicDataCreateManyTenantInput = {
    id?: number
    cidade: string
    estado: string
    regiao: string
    populacao?: number | null
    totalUsuarios?: number
    usuariosAtivos?: number
    protocolosMes?: number
    satisfacaoMedia?: number | null
    period: string
    createdAt?: Date | string
  }

  export type NpsResponsesCreateManyTenantInput = {
    id?: number
    surveyId: number
    userId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type FeedbackSubmissionsCreateManyTenantInput = {
    id?: number
    surveyId?: number | null
    userId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SatisfactionSurveysCreateManyTenantInput = {
    id?: number
    title: string
    description?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: UserPermissionUncheckedUpdateManyWithoutGrantorNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    smtpUsers?: SmtpUserUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userTokens?: UserTokenUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    emailVerificationTokens?: EmailVerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    analyticsUserSessions?: AnalyticsUserSessionUncheckedUpdateManyWithoutUserNestedInput
    featureUsage?: FeatureUsageUncheckedUpdateManyWithoutUserNestedInput
    pageViews?: PageViewsUncheckedUpdateManyWithoutUserNestedInput
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutUserNestedInput
    feedbackSubmissions?: FeedbackSubmissionsUncheckedUpdateManyWithoutUserNestedInput
    assignedFeedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeNestedInput
    createdReports?: AutomatedReportsUncheckedUpdateManyWithoutCreatorNestedInput
    createdSurveys?: SatisfactionSurveysUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomeCompleto?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ultimoLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: NullableIntFieldUpdateOperationsInput | number | null
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipoUsuario?: NullableStringFieldUpdateOperationsInput | string | null
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    ultimaAtividade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ativo?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ActivityLogUpdateWithoutTenantInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityLogUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmailDomainUpdateWithoutTenantInput = {
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    smtpUser?: SmtpUserUpdateOneRequiredWithoutDomainsNestedInput
    dkimKeys?: DkimKeyUpdateManyWithoutDomainNestedInput
    emails?: EmailUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    smtpUserId?: IntFieldUpdateOperationsInput | number
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dkimKeys?: DkimKeyUncheckedUpdateManyWithoutDomainNestedInput
    emails?: EmailUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    smtpUserId?: IntFieldUpdateOperationsInput | number
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: InvoiceItemUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    periodo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodoPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    desconto?: FloatFieldUpdateOperationsInput | number
    taxaAdicional?: FloatFieldUpdateOperationsInput | number
    plano?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnalyticsUserSessionsNestedInput
  }

  export type AnalyticsUserSessionUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageUpdateWithoutTenantInput = {
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeatureUsageNestedInput
  }

  export type FeatureUsageUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsUpdateWithoutTenantInput = {
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPageViewsNestedInput
  }

  export type PageViewsUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleAnalyticsUpdateWithoutTenantInput = {
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleAnalyticsUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleAnalyticsUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    moduleName?: StringFieldUpdateOperationsInput | string
    totalUsers?: IntFieldUpdateOperationsInput | number
    activeUsers?: IntFieldUpdateOperationsInput | number
    totalSessions?: IntFieldUpdateOperationsInput | number
    totalPageViews?: IntFieldUpdateOperationsInput | number
    avgSessionTime?: NullableFloatFieldUpdateOperationsInput | number | null
    popularFeature?: NullableStringFieldUpdateOperationsInput | string | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeographicDataUpdateWithoutTenantInput = {
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeographicDataUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeographicDataUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    regiao?: StringFieldUpdateOperationsInput | string
    populacao?: NullableIntFieldUpdateOperationsInput | number | null
    totalUsuarios?: IntFieldUpdateOperationsInput | number
    usuariosAtivos?: IntFieldUpdateOperationsInput | number
    protocolosMes?: IntFieldUpdateOperationsInput | number
    satisfacaoMedia?: NullableFloatFieldUpdateOperationsInput | number | null
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesUpdateWithoutTenantInput = {
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneRequiredWithoutNpsResponsesNestedInput
    user?: UserUpdateOneWithoutNpsResponsesNestedInput
  }

  export type NpsResponsesUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUpdateWithoutTenantInput = {
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneWithoutFeedbacksNestedInput
    user?: UserUpdateOneWithoutFeedbackSubmissionsNestedInput
    assignee?: UserUpdateOneWithoutAssignedFeedbacksNestedInput
  }

  export type FeedbackSubmissionsUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SatisfactionSurveysUpdateWithoutTenantInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedSurveysNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutSurveyNestedInput
    feedbacks?: FeedbackSubmissionsUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutSurveyNestedInput
    feedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateManyUserInput = {
    id?: number
    permissionId: number
    grantedBy?: string | null
    createdAt?: Date | string | null
  }

  export type UserPermissionCreateManyGrantorInput = {
    id?: number
    userId: string
    permissionId: number
    createdAt?: Date | string | null
  }

  export type ActivityLogCreateManyUserInput = {
    id?: number
    tenantId?: string | null
    action: string
    resource?: string | null
    resourceId?: string | null
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string | null
  }

  export type SmtpUserCreateManyUserInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    isVerified?: boolean
    isActive?: boolean
    isAdmin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionCreateManyUserInput = {
    id: string
    token: string
    tokenHash: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    lastActivity?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokenCreateManyUserInput = {
    id?: number
    type: string
    token: string
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PasswordResetTokenCreateManyUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type EmailVerificationTokenCreateManyUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type AnalyticsUserSessionCreateManyUserInput = {
    id?: string
    tenantId?: string | null
    startedAt?: Date | string
    endedAt?: Date | string | null
    durationMinutes?: number | null
    pagesVisited?: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type FeatureUsageCreateManyUserInput = {
    id?: number
    tenantId?: string | null
    featureName: string
    featureCategory: string
    usageCount?: number
    totalTimeMinutes?: number | null
    date: Date | string
    createdAt?: Date | string
  }

  export type PageViewsCreateManyUserInput = {
    id?: number
    tenantId?: string | null
    pagePath: string
    pageTitle?: string | null
    timeSpent?: number | null
    sessionId?: string | null
    referrer?: string | null
    userAgent?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type NpsResponsesCreateManyUserInput = {
    id?: number
    surveyId: number
    tenantId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type FeedbackSubmissionsCreateManyUserInput = {
    id?: number
    surveyId?: number | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedbackSubmissionsCreateManyAssigneeInput = {
    id?: number
    surveyId?: number | null
    userId?: string | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AutomatedReportsCreateManyCreatorInput = {
    id?: number
    name: string
    description?: string | null
    reportType: string
    frequency: string
    isActive?: boolean
    config: string
    template?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SatisfactionSurveysCreateManyCreatorInput = {
    id?: number
    title: string
    description?: string | null
    tenantId?: string | null
    surveyType: string
    questions: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    targetAudience: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
    grantor?: UserUpdateOneWithoutGrantedPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionUpdateWithoutGrantorInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutGrantorInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutGrantorInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SmtpUserUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domains?: EmailDomainUpdateManyWithoutSmtpUserNestedInput
    authAttempts?: AuthAttemptUpdateManyWithoutSmtpUserNestedInput
  }

  export type SmtpUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domains?: EmailDomainUncheckedUpdateManyWithoutSmtpUserNestedInput
    authAttempts?: AuthAttemptUncheckedUpdateManyWithoutSmtpUserNestedInput
  }

  export type SmtpUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    tokenHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokenUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationTokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutAnalyticsUserSessionsNestedInput
  }

  export type AnalyticsUserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsUserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    pagesVisited?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageUpdateWithoutUserInput = {
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutFeatureUsageNestedInput
  }

  export type FeatureUsageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUsageUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    featureName?: StringFieldUpdateOperationsInput | string
    featureCategory?: StringFieldUpdateOperationsInput | string
    usageCount?: IntFieldUpdateOperationsInput | number
    totalTimeMinutes?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsUpdateWithoutUserInput = {
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutPageViewsNestedInput
  }

  export type PageViewsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageViewsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    pagePath?: StringFieldUpdateOperationsInput | string
    pageTitle?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    referrer?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneRequiredWithoutNpsResponsesNestedInput
    tenant?: TenantUpdateOneWithoutNpsResponsesNestedInput
  }

  export type NpsResponsesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUpdateWithoutUserInput = {
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneWithoutFeedbacksNestedInput
    tenant?: TenantUpdateOneWithoutFeedbackSubmissionsNestedInput
    assignee?: UserUpdateOneWithoutAssignedFeedbacksNestedInput
  }

  export type FeedbackSubmissionsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUpdateWithoutAssigneeInput = {
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SatisfactionSurveysUpdateOneWithoutFeedbacksNestedInput
    user?: UserUpdateOneWithoutFeedbackSubmissionsNestedInput
    tenant?: TenantUpdateOneWithoutFeedbackSubmissionsNestedInput
  }

  export type FeedbackSubmissionsUncheckedUpdateWithoutAssigneeInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutAssigneeInput = {
    id?: IntFieldUpdateOperationsInput | number
    surveyId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AutomatedReportsUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ReportSchedulesUpdateManyWithoutReportNestedInput
    history?: ReportHistoryUpdateManyWithoutReportNestedInput
  }

  export type AutomatedReportsUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ReportSchedulesUncheckedUpdateManyWithoutReportNestedInput
    history?: ReportHistoryUncheckedUpdateManyWithoutReportNestedInput
  }

  export type AutomatedReportsUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reportType?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    config?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SatisfactionSurveysUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutSatisfactionSurveysNestedInput
    npsResponses?: NpsResponsesUpdateManyWithoutSurveyNestedInput
    feedbacks?: FeedbackSubmissionsUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    npsResponses?: NpsResponsesUncheckedUpdateManyWithoutSurveyNestedInput
    feedbacks?: FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type SatisfactionSurveysUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    surveyType?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    targetAudience?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateManyPermissionInput = {
    id?: number
    userId: string
    grantedBy?: string | null
    createdAt?: Date | string | null
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    grantor?: UserUpdateOneWithoutGrantedPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmailDomainCreateManySmtpUserInput = {
    id?: number
    tenantId?: string | null
    domainName: string
    isVerified?: boolean
    verificationToken?: string | null
    verifiedAt?: Date | string | null
    verificationMethod?: string | null
    dkimEnabled?: boolean
    spfEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthAttemptCreateManySmtpUserInput = {
    id?: number
    username: string
    remoteAddress: string
    success: boolean
    createdAt?: Date | string
  }

  export type EmailDomainUpdateWithoutSmtpUserInput = {
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneWithoutEmailDomainsNestedInput
    dkimKeys?: DkimKeyUpdateManyWithoutDomainNestedInput
    emails?: EmailUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateWithoutSmtpUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dkimKeys?: DkimKeyUncheckedUpdateManyWithoutDomainNestedInput
    emails?: EmailUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type EmailDomainUncheckedUpdateManyWithoutSmtpUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    domainName?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verificationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    dkimEnabled?: BoolFieldUpdateOperationsInput | boolean
    spfEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAttemptUpdateWithoutSmtpUserInput = {
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAttemptUncheckedUpdateWithoutSmtpUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthAttemptUncheckedUpdateManyWithoutSmtpUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    remoteAddress?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DkimKeyCreateManyDomainInput = {
    id?: number
    selector: string
    privateKey: string
    publicKey: string
    algorithm?: string
    canonicalization?: string
    keySize?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailCreateManyDomainInput = {
    id?: number
    messageId: string
    fromEmail: string
    toEmail: string
    subject: string
    htmlContent?: string | null
    textContent?: string | null
    status?: string
    direction: string
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    mxServer?: string | null
    errorMessage?: string | null
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DkimKeyUpdateWithoutDomainInput = {
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DkimKeyUncheckedUpdateWithoutDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DkimKeyUncheckedUpdateManyWithoutDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    canonicalization?: StringFieldUpdateOperationsInput | string
    keySize?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailUpdateWithoutDomainInput = {
    messageId?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailUncheckedUpdateWithoutDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailUncheckedUpdateManyWithoutDomainInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    toEmail?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: NullableStringFieldUpdateOperationsInput | string | null
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mxServer?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemCreateManyInvoiceInput = {
    id?: number
    descricao: string
    quantidade: number
    valorUnitario: number
    valorTotal: number
    tipo: string
    createdAt?: Date | string
  }

  export type InvoiceItemUpdateWithoutInvoiceInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    valorUnitario?: FloatFieldUpdateOperationsInput | number
    valorTotal?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportSchedulesCreateManyReportInput = {
    id?: number
    cronExpression: string
    timezone?: string
    nextRun: Date | string
    lastRun?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportHistoryCreateManyReportInput = {
    id?: number
    generatedAt?: Date | string
    status: string
    filePath?: string | null
    fileSize?: number | null
    executionTime?: number | null
    errorMessage?: string | null
    sentTo?: string | null
    period?: string | null
  }

  export type ReportSchedulesUpdateWithoutReportInput = {
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipients?: ReportRecipientsUpdateManyWithoutScheduleNestedInput
  }

  export type ReportSchedulesUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipients?: ReportRecipientsUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ReportSchedulesUncheckedUpdateManyWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    cronExpression?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    nextRun?: DateTimeFieldUpdateOperationsInput | Date | string
    lastRun?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportHistoryUpdateWithoutReportInput = {
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportHistoryUncheckedUpdateWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportHistoryUncheckedUpdateManyWithoutReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentTo?: NullableStringFieldUpdateOperationsInput | string | null
    period?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportRecipientsCreateManyScheduleInput = {
    id?: number
    email: string
    name?: string | null
    isActive?: boolean
    createdAt?: Date | string
  }

  export type ReportRecipientsUpdateWithoutScheduleInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportRecipientsUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportRecipientsUncheckedUpdateManyWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesCreateManySurveyInput = {
    id?: number
    userId?: string | null
    tenantId?: string | null
    score: number
    category: string
    comment?: string | null
    anonymous?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type FeedbackSubmissionsCreateManySurveyInput = {
    id?: number
    userId?: string | null
    tenantId?: string | null
    feedbackType: string
    title: string
    description: string
    priority?: string
    status?: string
    category?: string | null
    attachments?: string | null
    assignedTo?: string | null
    resolvedAt?: Date | string | null
    resolution?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NpsResponsesUpdateWithoutSurveyInput = {
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutNpsResponsesNestedInput
    tenant?: TenantUpdateOneWithoutNpsResponsesNestedInput
  }

  export type NpsResponsesUncheckedUpdateWithoutSurveyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NpsResponsesUncheckedUpdateManyWithoutSurveyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    anonymous?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUpdateWithoutSurveyInput = {
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutFeedbackSubmissionsNestedInput
    tenant?: TenantUpdateOneWithoutFeedbackSubmissionsNestedInput
    assignee?: UserUpdateOneWithoutAssignedFeedbacksNestedInput
  }

  export type FeedbackSubmissionsUncheckedUpdateWithoutSurveyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackSubmissionsUncheckedUpdateManyWithoutSurveyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    feedbackType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolution?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}