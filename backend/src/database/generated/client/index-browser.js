
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  tenantCode: 'tenantCode',
  nome: 'nome',
  email: 'email',
  cidade: 'cidade',
  estado: 'estado',
  cnpj: 'cnpj',
  plano: 'plano',
  status: 'status',
  populacao: 'populacao',
  endereco: 'endereco',
  responsavelNome: 'responsavelNome',
  responsavelEmail: 'responsavelEmail',
  responsavelTelefone: 'responsavelTelefone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hasAdmin: 'hasAdmin',
  adminConfirmed: 'adminConfirmed',
  adminFirstLogin: 'adminFirstLogin',
  limiteUsuarios: 'limiteUsuarios',
  valorMensal: 'valorMensal',
  usuariosAtivos: 'usuariosAtivos',
  protocolosMes: 'protocolosMes',
  configuracoes: 'configuracoes',
  metricas: 'metricas'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  nomeCompleto: 'nomeCompleto',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  avatarUrl: 'avatarUrl',
  ultimoLogin: 'ultimoLogin',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tipoUsuario: 'tipoUsuario',
  telefone: 'telefone',
  ultimaAtividade: 'ultimaAtividade',
  ativo: 'ativo'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  resource: 'resource',
  action: 'action',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId',
  grantedBy: 'grantedBy',
  createdAt: 'createdAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenantId: 'tenantId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SmtpUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  isVerified: 'isVerified',
  isActive: 'isActive',
  isAdmin: 'isAdmin',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailDomainScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  smtpUserId: 'smtpUserId',
  domainName: 'domainName',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  verifiedAt: 'verifiedAt',
  verificationMethod: 'verificationMethod',
  dkimEnabled: 'dkimEnabled',
  spfEnabled: 'spfEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DkimKeyScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  selector: 'selector',
  privateKey: 'privateKey',
  publicKey: 'publicKey',
  algorithm: 'algorithm',
  canonicalization: 'canonicalization',
  keySize: 'keySize',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  domainId: 'domainId',
  fromEmail: 'fromEmail',
  toEmail: 'toEmail',
  subject: 'subject',
  htmlContent: 'htmlContent',
  textContent: 'textContent',
  status: 'status',
  direction: 'direction',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  mxServer: 'mxServer',
  errorMessage: 'errorMessage',
  attempts: 'attempts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SmtpConnectionScalarFieldEnum = {
  id: 'id',
  remoteAddress: 'remoteAddress',
  hostname: 'hostname',
  serverType: 'serverType',
  status: 'status',
  rejectReason: 'rejectReason',
  createdAt: 'createdAt'
};

exports.Prisma.AuthAttemptScalarFieldEnum = {
  id: 'id',
  smtpUserId: 'smtpUserId',
  username: 'username',
  remoteAddress: 'remoteAddress',
  success: 'success',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  tokenHash: 'tokenHash',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.EmailVerificationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  numero: 'numero',
  periodo: 'periodo',
  valor: 'valor',
  descricao: 'descricao',
  status: 'status',
  dataCriacao: 'dataCriacao',
  dataVencimento: 'dataVencimento',
  dataPagamento: 'dataPagamento',
  metodoPagamento: 'metodoPagamento',
  desconto: 'desconto',
  taxaAdicional: 'taxaAdicional',
  plano: 'plano',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  descricao: 'descricao',
  quantidade: 'quantidade',
  valorUnitario: 'valorUnitario',
  valorTotal: 'valorTotal',
  tipo: 'tipo',
  createdAt: 'createdAt'
};

exports.Prisma.BillingMetricsScalarFieldEnum = {
  id: 'id',
  periodo: 'periodo',
  mrr: 'mrr',
  arr: 'arr',
  churnRate: 'churnRate',
  arpu: 'arpu',
  ltv: 'ltv',
  cac: 'cac',
  receitaMensal: 'receitaMensal',
  faturasPendentes: 'faturasPendentes',
  valorPendente: 'valorPendente',
  faturasVencidas: 'faturasVencidas',
  valorVencido: 'valorVencido',
  taxaCobranca: 'taxaCobranca',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsUserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenantId: 'tenantId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  durationMinutes: 'durationMinutes',
  pagesVisited: 'pagesVisited',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.FeatureUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenantId: 'tenantId',
  featureName: 'featureName',
  featureCategory: 'featureCategory',
  usageCount: 'usageCount',
  totalTimeMinutes: 'totalTimeMinutes',
  date: 'date',
  createdAt: 'createdAt'
};

exports.Prisma.SystemMetricsScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  metricValue: 'metricValue',
  metricUnit: 'metricUnit',
  recordedAt: 'recordedAt'
};

exports.Prisma.PageViewsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tenantId: 'tenantId',
  pagePath: 'pagePath',
  pageTitle: 'pageTitle',
  timeSpent: 'timeSpent',
  sessionId: 'sessionId',
  referrer: 'referrer',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.ModuleAnalyticsScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  moduleName: 'moduleName',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  totalSessions: 'totalSessions',
  totalPageViews: 'totalPageViews',
  avgSessionTime: 'avgSessionTime',
  popularFeature: 'popularFeature',
  period: 'period',
  createdAt: 'createdAt'
};

exports.Prisma.GeographicDataScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  cidade: 'cidade',
  estado: 'estado',
  regiao: 'regiao',
  populacao: 'populacao',
  totalUsuarios: 'totalUsuarios',
  usuariosAtivos: 'usuariosAtivos',
  protocolosMes: 'protocolosMes',
  satisfacaoMedia: 'satisfacaoMedia',
  period: 'period',
  createdAt: 'createdAt'
};

exports.Prisma.AutomatedReportsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  reportType: 'reportType',
  frequency: 'frequency',
  isActive: 'isActive',
  config: 'config',
  template: 'template',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportSchedulesScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  cronExpression: 'cronExpression',
  timezone: 'timezone',
  nextRun: 'nextRun',
  lastRun: 'lastRun',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ReportRecipientsScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  email: 'email',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ReportHistoryScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  generatedAt: 'generatedAt',
  status: 'status',
  filePath: 'filePath',
  fileSize: 'fileSize',
  executionTime: 'executionTime',
  errorMessage: 'errorMessage',
  sentTo: 'sentTo',
  period: 'period'
};

exports.Prisma.SatisfactionSurveysScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  tenantId: 'tenantId',
  surveyType: 'surveyType',
  questions: 'questions',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  targetAudience: 'targetAudience',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NpsResponsesScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  userId: 'userId',
  tenantId: 'tenantId',
  score: 'score',
  category: 'category',
  comment: 'comment',
  anonymous: 'anonymous',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.FeedbackSubmissionsScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  userId: 'userId',
  tenantId: 'tenantId',
  feedbackType: 'feedbackType',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  category: 'category',
  attachments: 'attachments',
  assignedTo: 'assignedTo',
  resolvedAt: 'resolvedAt',
  resolution: 'resolution',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemLogsScalarFieldEnum = {
  id: 'id',
  logLevel: 'logLevel',
  service: 'service',
  message: 'message',
  details: 'details',
  userId: 'userId',
  tenantId: 'tenantId',
  stackTrace: 'stackTrace',
  requestId: 'requestId',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceStatusScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  status: 'status',
  lastCheck: 'lastCheck',
  responseTime: 'responseTime',
  errorMessage: 'errorMessage',
  uptime: 'uptime',
  checkType: 'checkType',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemAlertsScalarFieldEnum = {
  id: 'id',
  alertType: 'alertType',
  severity: 'severity',
  title: 'title',
  description: 'description',
  service: 'service',
  threshold: 'threshold',
  currentValue: 'currentValue',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DetailedSystemMetricsScalarFieldEnum = {
  id: 'id',
  category: 'category',
  metricName: 'metricName',
  metricValue: 'metricValue',
  metricUnit: 'metricUnit',
  instance: 'instance',
  tags: 'tags',
  aggregationType: 'aggregationType',
  recordedAt: 'recordedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  User: 'User',
  Permission: 'Permission',
  UserPermission: 'UserPermission',
  ActivityLog: 'ActivityLog',
  SmtpUser: 'SmtpUser',
  EmailDomain: 'EmailDomain',
  DkimKey: 'DkimKey',
  Email: 'Email',
  SmtpConnection: 'SmtpConnection',
  AuthAttempt: 'AuthAttempt',
  UserSession: 'UserSession',
  UserToken: 'UserToken',
  SystemConfig: 'SystemConfig',
  PasswordResetToken: 'PasswordResetToken',
  EmailVerificationToken: 'EmailVerificationToken',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  BillingMetrics: 'BillingMetrics',
  AnalyticsUserSession: 'AnalyticsUserSession',
  FeatureUsage: 'FeatureUsage',
  SystemMetrics: 'SystemMetrics',
  PageViews: 'PageViews',
  ModuleAnalytics: 'ModuleAnalytics',
  GeographicData: 'GeographicData',
  AutomatedReports: 'AutomatedReports',
  ReportSchedules: 'ReportSchedules',
  ReportRecipients: 'ReportRecipients',
  ReportHistory: 'ReportHistory',
  SatisfactionSurveys: 'SatisfactionSurveys',
  NpsResponses: 'NpsResponses',
  FeedbackSubmissions: 'FeedbackSubmissions',
  SystemLogs: 'SystemLogs',
  ServiceStatus: 'ServiceStatus',
  SystemAlerts: 'SystemAlerts',
  DetailedSystemMetrics: 'DetailedSystemMetrics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
