-- ====================================================================
-- üì¶ MIGRA√á√ÉO 002: ATUALIZA√á√ÉO DE ROLES COMPLETOS
-- ====================================================================
-- Sistema hier√°rquico com 6 n√≠veis de acesso
-- guest -> user -> coordinator -> manager -> admin -> super_admin
-- ====================================================================

-- SQLite n√£o suporta ALTER CONSTRAINT, ent√£o vamos usar uma abordagem compat√≠vel
-- Os novos roles ser√£o validados via aplica√ß√£o

-- Criar tabela de n√≠veis hier√°rquicos para consulta
CREATE TABLE IF NOT EXISTS role_hierarchy (
    role TEXT PRIMARY KEY,
    level INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT NOT NULL
);

-- Inserir dados da hierarquia
INSERT OR REPLACE INTO role_hierarchy (role, level, name, description) VALUES
('guest', 0, 'Visitante', 'Cidad√£o com acesso p√∫blico aos servi√ßos municipais'),
('user', 1, 'Funcion√°rio', 'Atendente/Funcion√°rio com opera√ß√µes b√°sicas'),
('coordinator', 2, 'Coordenador', 'Coordenador de equipes e supervisor de opera√ß√µes'),
('manager', 3, 'Gestor de Secretaria', 'Secret√°rio/Diretor com gest√£o completa da secretaria'),
('admin', 4, 'Administrador Municipal', 'Prefeito/Vice-Prefeito com gest√£o municipal completa'),
('super_admin', 5, 'Super Administrador', 'Desenvolvedor/Suporte com acesso sist√™mico total');

-- Criar √≠ndices para otimiza√ß√£o
CREATE INDEX IF NOT EXISTS idx_role_hierarchy_level ON role_hierarchy(level);

-- Atualizar usu√°rios existentes se necess√°rio (preservar dados atuais)
-- N√£o alterar usu√°rios que j√° t√™m roles v√°lidos
UPDATE users 
SET role = 'user' 
WHERE role NOT IN ('guest', 'user', 'coordinator', 'manager', 'admin', 'super_admin');