#!/bin/bash

# ====================================================================
# üöÄ SCRIPT DE DEPLOY SEGURO - DIGIURBAN
# ====================================================================
# Deploy com verifica√ß√µes de seguran√ßa obrigat√≥rias
# ====================================================================

set -e # Parar em qualquer erro

echo "üöÄ Iniciando deploy seguro do DigiUrban..."

# ====================================================================
# VERIFICA√á√ïES PR√â-DEPLOY
# ====================================================================

echo "üîç Verificando pr√©-requisitos..."

# Verificar se √© ambiente de produ√ß√£o
if [ "${NODE_ENV}" != "production" ]; then
    echo "‚ö†Ô∏è AVISO: NODE_ENV n√£o est√° definido como 'production'"
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Verificar vari√°veis cr√≠ticas
REQUIRED_VARS=("JWT_SECRET" "JWT_REFRESH_SECRET" "CORS_ORIGIN")
for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå ERRO: Vari√°vel $var n√£o est√° definida"
        echo "Configure no arquivo .env antes do deploy"
        exit 1
    fi
done

# Verificar tamanho das chaves JWT
if [ ${#JWT_SECRET} -lt 32 ]; then
    echo "‚ùå ERRO: JWT_SECRET deve ter pelo menos 32 caracteres"
    exit 1
fi

if [ ${#JWT_REFRESH_SECRET} -lt 32 ]; then
    echo "‚ùå ERRO: JWT_REFRESH_SECRET deve ter pelo menos 32 caracteres"
    exit 1
fi

# Verificar se CORS n√£o cont√©m localhost em produ√ß√£o
if [[ "$CORS_ORIGIN" == *"localhost"* ]] && [ "${NODE_ENV}" = "production" ]; then
    echo "‚ùå ERRO: CORS_ORIGIN cont√©m localhost em produ√ß√£o!"
    exit 1
fi

echo "‚úÖ Pr√©-requisitos verificados"

# ====================================================================
# BACKUP PR√â-DEPLOY
# ====================================================================

echo "üíæ Criando backup pr√©-deploy..."

# Criar backup do banco atual se existir
if [ -f "./data/database.sqlite" ]; then
    backup_name="pre-deploy-backup-$(date +%Y%m%d-%H%M%S).sqlite"
    mkdir -p ./data/backups
    cp ./data/database.sqlite "./data/backups/$backup_name"
    echo "‚úÖ Backup criado: $backup_name"
fi

# ====================================================================
# BUILD E TESTES
# ====================================================================

echo "üîß Executando build..."

# Build do backend
cd backend
npm ci --only=production
npm run build
cd ..

# Build do frontend
cd frontend
npm ci --only=production
npm run build
cd ..

echo "‚úÖ Build conclu√≠do"

# ====================================================================
# VERIFICA√á√ïES DE SEGURAN√áA
# ====================================================================

echo "üîê Executando verifica√ß√µes de seguran√ßa..."

# Verificar se n√£o h√° segredos no c√≥digo
echo "üîç Verificando vazamentos de segredos..."
if grep -r "password.*=.*['\"][^'\"]*['\"]" --include="*.ts" --include="*.js" .; then
    echo "‚ö†Ô∏è POSS√çVEL SENHA HARDCODED encontrada!"
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Verificar permiss√µes de arquivos
echo "üîç Verificando permiss√µes..."
find . -name "*.env*" -exec chmod 600 {} \;
find . -name "*.key" -exec chmod 600 {} \;

echo "‚úÖ Verifica√ß√µes de seguran√ßa conclu√≠das"

# ====================================================================
# DEPLOY
# ====================================================================

echo "üöÄ Iniciando deploy..."

# Parar containers existentes
docker-compose down

# Limpar imagens antigas
docker system prune -f

# Build e start dos novos containers
docker-compose up --build -d

# ====================================================================
# VERIFICA√á√ïES P√ìS-DEPLOY
# ====================================================================

echo "üîç Verificando sa√∫de do sistema..."

# Aguardar containers iniciarem
sleep 30

# Verificar se containers est√£o rodando
if ! docker-compose ps | grep -q "Up"; then
    echo "‚ùå ERRO: Containers n√£o est√£o rodando"
    docker-compose logs --tail=50
    exit 1
fi

# Verificar endpoint de sa√∫de
max_attempts=10
attempt=1

while [ $attempt -le $max_attempts ]; do
    echo "üè• Verificando sa√∫de (tentativa $attempt/$max_attempts)..."
    
    if curl -f http://localhost:3020/health >/dev/null 2>&1; then
        echo "‚úÖ Sistema est√° saud√°vel!"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ùå ERRO: Sistema n√£o respondeu ap√≥s $max_attempts tentativas"
        echo "Logs dos containers:"
        docker-compose logs --tail=20
        exit 1
    fi
    
    sleep 10
    ((attempt++))
done

# ====================================================================
# RELAT√ìRIO FINAL
# ====================================================================

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo ""
echo "üìä RESUMO:"
echo "   ‚Ä¢ Ambiente: ${NODE_ENV:-development}"
echo "   ‚Ä¢ URL: http://localhost:3020"
echo "   ‚Ä¢ Containers: $(docker-compose ps --services | wc -l)"
echo "   ‚Ä¢ Backup: $backup_name"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "   ‚Ä¢ Verificar logs: docker-compose logs -f"
echo "   ‚Ä¢ Monitorar m√©tricas: docker stats"
echo "   ‚Ä¢ Verificar backups: ls -la ./data/backups/"
echo ""
echo "üîí LEMBRETE DE SEGURAN√áA:"
echo "   ‚Ä¢ Monitore logs regularmente"
echo "   ‚Ä¢ Verifique backups automatizados"
echo "   ‚Ä¢ Mantenha certificados SSL atualizados"
echo "   ‚Ä¢ Revise acessos periodicamente"
echo ""

# Mostrar estat√≠sticas finais
docker-compose ps