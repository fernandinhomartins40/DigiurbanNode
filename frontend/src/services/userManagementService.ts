/**
 * SERVI√áO DE GEST√ÉO DE USU√ÅRIOS - ARQUITETURA PROFISSIONAL
 * 
 * Implementa√ß√£o limpa, robusta e previs√≠vel para opera√ß√µes CRUD de usu√°rios.
 * Sem gambiarras, sem m√∫ltiplas tentativas, sem fallbacks desnecess√°rios.
 * 
 * @author Claude Code
 * @version 2.0 - Arquitetura Profissional
 */

import { APIClient } from '@/auth/utils/httpInterceptor';
import { JWT_CONFIG } from '@/auth/config/authConfig';

/**
 * Extrai mensagem segura de erro
 */
const getErrorMessage = (error): string => {
  if (error instanceof Error) {
    return error.message;
  }
  if (typeof error === 'string') {
    return error;
  }
  return 'Erro desconhecido';
};


// ====================================================================
// INTERFACES TYPESCRIPT PARA TYPE SAFETY
// ====================================================================

export interface CreateUserData {
  nome_completo: string;
  email: string;
  tipo_usuario: string;
  tenant_id: string;
  cargo?: string;
  departamento?: string;
  senha: string;
  telefone?: string;
}

export interface UserProfile {
  id: string;
  nome_completo: string;
  email: string;
  tipo_usuario: string;
  tenant_id: string;
  cargo?: string;
  departamento?: string;
  telefone?: string;
  status: string;
  created_at: string;
  updated_at: string;
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface Tenant {
  id: string;
  nome: string;
}

// ====================================================================
// CONFIGURA√á√ÉO CENTRALIZADA
// ====================================================================

class APIConfigService {
  static readonly BASE_URL = JWT_CONFIG.api.baseUrl;
  
  static validateConfig(): void {
    if (!this.BASE_URL) {
      throw new Error('API URL n√£o configurada');
    }
  }
  
  static getHeaders() {
    return {
      'Content-Type': 'application/json'
    };
  }
}

// ====================================================================
// CLIENTE HTTP JWT - USA O INTERCEPTOR AUTOM√ÅTICO
// ====================================================================

// O APIClient j√° inclui intercepta√ß√£o autom√°tica de tokens
// N√£o precisamos reimplementar a l√≥gica HTTP

// ====================================================================
// SERVI√áO DE GEST√ÉO DE USU√ÅRIOS - ARQUITETURA LIMPA
// ====================================================================

class UserManagementService {
  
  /**
   * Criar usu√°rio completo (Auth + Profile) - M√âTODO √öNICO E ROBUSTO
   */
  static async createUser(userData: CreateUserData): Promise<ApiResponse<UserProfile>> {
    console.log(`üîê [UserService] Criando usu√°rio: ${userData.email}`);
    
    try {
      // Etapa 1: Criar usu√°rio no Supabase Auth
      const authUser = await this.createAuthUser(userData);
      
      // Etapa 2: Criar perfil do usu√°rio
      const profile = await this.createUserProfile(authUser.id, userData);
      
      console.log(`‚úÖ [UserService] Usu√°rio criado com sucesso: ${profile.id}`);
      return {
        success: true,
        data: profile
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [UserService] Erro na cria√ß√£o do usu√°rio:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno na cria√ß√£o do usu√°rio'
      };
    }
  }

  /**
   * Criar usu√°rio via API JWT - IMPLEMENTA√á√ÉO ROBUSTA
   */
  private static async createAuthUser(userData: CreateUserData): Promise<any> {
    console.log(`üîë [Auth] Criando usu√°rio auth: ${userData.email}`);
    
    const authData = await APIClient.post('/auth/register', {
      email: userData.email,
      password: userData.senha,
      nome_completo: userData.nome_completo,
      tenant_id: userData.tenant_id
    });

    if (!authData.data?.user?.id) {
      throw new Error('Usu√°rio auth criado mas ID n√£o retornado');
    }

    console.log(`‚úÖ [Auth] Usu√°rio auth criado: ${authData.data.user.id}`);
    return authData.data.user;
  }

  /**
   * Criar perfil do usu√°rio - COM ROLLBACK AUTOM√ÅTICO
   */
  private static async createUserProfile(userId: string, userData: CreateUserData): Promise<UserProfile> {
    console.log(`üìù [Profile] Criando perfil: ${userId}`);
    
    try {
      const data = await APIClient.post('/users/profile', {
        id: userId,
        nome_completo: userData.nome_completo,
        email: userData.email,
        tipo_usuario: userData.tipo_usuario,
        tenant_id: userData.tenant_id,
        cargo: userData.cargo || userData.tipo_usuario,
        departamento: userData.departamento,
        telefone: userData.telefone,
        status: 'ativo',
        primeiro_acesso: true,
        senha_temporaria: true
      });

      if (!data) {
        await this.deleteAuthUser(userId);
        throw new Error('Perfil n√£o foi criado corretamente');
      }

      console.log(`‚úÖ [Profile] Perfil criado: ${data.id}`);
      return data;
      
    } catch (error: Error | unknown) {
      // Garantir rollback em qualquer erro
      await this.deleteAuthUser(userId);
      throw error;
    }
  }

  /**
   * Deletar usu√°rio auth (para rollback) - IMPLEMENTA√á√ÉO ROBUSTA
   */
  private static async deleteAuthUser(userId: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è [Rollback] Removendo usu√°rio auth: ${userId}`);
      
      await APIClient.delete(`/users/${userId}`);
      
      console.log(`‚úÖ [Rollback] Usu√°rio auth removido: ${userId}`);
    } catch (error) {
      console.error(`‚ö†Ô∏è [Rollback] Falha ao remover usu√°rio auth:`, error);
      // N√£o propagar erro de rollback para n√£o mascarar erro original
    }
  }

  /**
   * Obter lista de tenants - IMPLEMENTA√á√ÉO SIMPLES E DIRETA
   */
  static async getTenants(): Promise<ApiResponse<Tenant[]>> {
    console.log(`üè¢ [Tenants] Carregando lista de tenants`);
    
    try {
      const response = await APIClient.get<{
        success: boolean;
        data: {
          tenants: Tenant[];
          total: number;
        };
      }>('/tenants');

      const tenants = response?.data?.tenants || [];
      console.log(`‚úÖ [Tenants] ${tenants.length} tenants carregadas`);
      return {
        success: true,
        data: tenants
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Tenants] Erro geral:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno ao carregar tenants'
      };
    }
  }

  /**
   * Listar usu√°rios com filtros - IMPLEMENTA√á√ÉO PROFISSIONAL
   */
  static async getUsers(filters?: {
    tenant_id?: string;
    tipo_usuario?: string;
    status?: string;
    limit?: number;
    offset?: number;
  }): Promise<ApiResponse<UserProfile[]>> {
    console.log(`üë• [Users] Listando usu√°rios`);
    
    try {
      const queryParams = new URLSearchParams();
      
      if (filters?.tenant_id) queryParams.append('tenant_id', filters.tenant_id);
      if (filters?.tipo_usuario) queryParams.append('tipo_usuario', filters.tipo_usuario);
      if (filters?.status) queryParams.append('status', filters.status);
      if (filters?.limit) queryParams.append('limit', filters.limit.toString());
      if (filters?.offset) queryParams.append('offset', filters.offset.toString());

      const queryString = queryParams.toString();
      const endpoint = queryString ? `/users?${queryString}` : '/users';
      
      const response = await APIClient.get<{
        success: boolean;
        data: {
          users: UserProfile[];
          total: number;
        };
      }>(endpoint);

      const users = response?.data?.users || [];
      console.log(`‚úÖ [Users] ${users.length} usu√°rios listados`);
      return {
        success: true,
        data: users
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Users] Erro ao listar usu√°rios:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno ao listar usu√°rios'
      };
    }
  }

  /**
   * Atualizar usu√°rio - IMPLEMENTA√á√ÉO ROBUSTA
   */
  static async updateUser(userId: string, updates: Partial<CreateUserData>): Promise<ApiResponse<UserProfile>> {
    console.log(`üìù [Users] Atualizando usu√°rio: ${userId}`);
    
    try {
      const data = await APIClient.put<UserProfile>(`/users/${userId}`, {
        ...updates,
        updated_at: new Date().toISOString()
      });

      if (!data) {
        throw new Error('Usu√°rio n√£o encontrado para atualiza√ß√£o');
      }

      console.log(`‚úÖ [Users] Usu√°rio atualizado: ${data.id}`);
      return {
        success: true,
        data
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Users] Erro ao atualizar usu√°rio:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno ao atualizar usu√°rio'
      };
    }
  }

  /**
   * Alterar status do usu√°rio - IMPLEMENTA√á√ÉO REAL
   */
  static async updateUserStatus(userId: string, status: 'ativo' | 'suspenso' | 'inativo' | 'sem_vinculo'): Promise<ApiResponse<UserProfile>> {
    console.log(`üîÑ [Users] Alterando status do usu√°rio: ${userId} para ${status}`);
    
    try {
      const data = await APIClient.put<UserProfile>(`/users/${userId}/status`, {
        status,
        updated_at: new Date().toISOString()
      });

      if (!data) {
        throw new Error('Usu√°rio n√£o encontrado');
      }

      console.log(`‚úÖ [Users] Status atualizado: ${data.id} -> ${status}`);
      return {
        success: true,
        data
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Users] Erro ao atualizar status:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno ao atualizar status'
      };
    }
  }

  /**
   * Deletar usu√°rio - IMPLEMENTA√á√ÉO REAL
   */
  static async deleteUser(userId: string): Promise<ApiResponse<void>> {
    console.log(`üóëÔ∏è [Users] Deletando usu√°rio: ${userId}`);
    
    try {
      await APIClient.delete(`/users/${userId}`);

      console.log(`‚úÖ [Users] Usu√°rio deletado: ${userId}`);
      return {
        success: true
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Users] Erro ao deletar usu√°rio:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno ao deletar usu√°rio'
      };
    }
  }

  /**
   * Reset de senha - IMPLEMENTA√á√ÉO REAL
   */
  static async resetUserPassword(userId: string): Promise<ApiResponse<void>> {
    console.log(`üîë [Users] Reset de senha para usu√°rio: ${userId}`);
    
    try {
      await APIClient.post(`/users/${userId}/reset-password`, {
        force_reset: true
      });

      console.log(`‚úÖ [Users] Reset de senha realizado: ${userId}`);
      return {
        success: true
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Users] Erro no reset de senha:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno no reset de senha'
      };
    }
  }

  /**
   * Atualizar usu√°rios √≥rf√£os quando tenant √© deletada
   */
  static async handleTenantDeletion(tenantId: string): Promise<ApiResponse<number>> {
    console.log(`üè¢ [Users] Atualizando usu√°rios √≥rf√£os do tenant: ${tenantId}`);
    
    try {
      const data = await APIClient.post<{updated_count: number}>(`/tenants/${tenantId}/orphan-users`, {
        status: 'sem_vinculo'
      });

      const updatedCount = data?.updated_count || 0;
      console.log(`‚úÖ [Users] ${updatedCount} usu√°rios marcados como 'sem_vinculo'`);
      
      return {
        success: true,
        data: updatedCount
      };
      
    } catch (error: Error | unknown) {
      console.error(`‚ùå [Users] Erro ao processar usu√°rios √≥rf√£os:`, error);
      return {
        success: false,
        error: (error instanceof Error ? error.message : String(error)) || 'Erro interno ao processar usu√°rios √≥rf√£os'
      };
    }
  }
}

export default UserManagementService;