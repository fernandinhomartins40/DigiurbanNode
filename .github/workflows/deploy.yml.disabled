name: 🚀 Deploy DigiUrban Unified System

concurrency:
  group: digiurban-unified-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.108'
  VPS_USER: 'root'
  APP_DIR: '/root/digiurban-unified'
  APP_PORT: '3020'
  CONTAINER_NAME: 'digiurban-unified'

jobs:
  deploy:
    name: 🎯 Deploy Unified Container
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📋 Informações do Deploy
      run: |
        echo "=============================================="
        echo "🚀 INICIANDO DEPLOY DIGIURBAN UNIFIED SYSTEM"
        echo "=============================================="
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "🎯 Target: ${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "=============================================="
        
        # Variável para tracking do tempo
        echo "DEPLOY_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: 🔧 Configurar SSH
      run: |
        echo "🔧 Configurando SSH..."
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

    - name: 📥 Checkout do Código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0






    - name: 🧹 Limpeza de Containers Antigos
      timeout-minutes: 5
      run: |
        echo "🧹 Removendo containers e imagens antigas..."
        echo "============================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🛑 Parando TODOS os containers DigiUrban...'
        
        # Parar containers da arquitetura antiga (se existirem)
        docker stop digiurban-frontend digiurban-backend 2>/dev/null && echo '✅ Containers antigos parados' || echo 'ℹ️  Nenhum container antigo'
        docker rm digiurban-frontend digiurban-backend 2>/dev/null && echo '✅ Containers antigos removidos' || echo 'ℹ️  Nenhum container antigo para remover'
        
        # Parar container unificado atual
        docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null && echo '✅ Container unificado parado' || echo 'ℹ️  Nenhum container unificado rodando'
        docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null && echo '✅ Container unificado removido' || echo 'ℹ️  Nenhum container unificado para remover'
        
        echo '🗑️  Removendo TODAS as imagens DigiUrban...'
        docker rmi digiurban-frontend:latest digiurban-backend:latest digiurban-unified:latest 2>/dev/null && echo '✅ Imagens antigas removidas' || echo 'ℹ️  Nenhuma imagem antiga para remover'
        
        echo '🧽 Limpeza específica de Docker...'
        docker image prune -f --filter until=24h || echo '⚠️ Não foi possível limpar imagens antigas'
        docker container prune -f || echo '⚠️ Não foi possível limpar containers parados'
        echo '✅ Limpeza específica concluída'
        
        echo '📁 Preparando diretório...'
        rm -rf ${{ env.APP_DIR }}
        mkdir -p ${{ env.APP_DIR }}
        echo '✅ Diretório preparado'
        "

    - name: 📤 Transferir Código para VPS
      run: |
        echo "📤 Transferindo código para VPS..."
        echo "=================================="
        
        echo "📊 Analisando arquivos a transferir..."
        echo "Tamanho total: $(du -sh . | cut -f1)"
        
        echo "🚀 Iniciando transferência..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --progress --delete \
          --exclude='.git/' \
          --exclude='node_modules/' \
          --exclude='frontend/node_modules/' \
          --exclude='backend/node_modules/' \
          --exclude='.claude/' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/; then
          echo "✅ Código transferido com sucesso"
        else
          echo "❌ Falha na transferência"
          exit 1
        fi

    - name: 🐳 Deploy Container Completo
      run: |
        echo "🐳 Deployando container (inclui setup automático do banco)..."
        echo "============================================================="

        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}

        echo '📋 Verificando estrutura transferida...'
        ls -la

        echo '🔍 Verificando arquivos essenciais...'
        ls -la Dockerfile docker-compose.yml start-services.sh 2>/dev/null || echo '⚠️ Arquivos principais ausentes!'

        echo '📁 Verificando pasta scripts/ especificamente...'
        if [ -d 'scripts' ]; then
          echo '✅ Pasta scripts/ existe'
          ls -la scripts/
          echo '📝 Conteúdo do setup-database.sh:'
          head -5 scripts/setup-database.sh 2>/dev/null || echo '❌ setup-database.sh não encontrado!'
        else
          echo '❌ Pasta scripts/ NÃO EXISTE na VPS!'
        fi

        echo '✅ Tornando scripts executáveis...'
        chmod +x start-services.sh scripts/*.sh 2>/dev/null || echo 'ℹ️  Scripts configurados'

        echo '🏗️ Construindo container (isso pode levar alguns minutos)...'
        echo '🔍 FORÇANDO BUILD COMPLETO PARA VER DEBUG...'

        echo '🏗️ Executando build...'
        docker compose build --no-cache --progress=plain

        echo '✅ Container construído com sucesso'

        echo '🔍 VERIFICANDO SE SCRIPTS ESTÃO NA IMAGEM...'
        docker run --rm digiurban-unified-digiurban ls -la /app/scripts/ || echo '❌ Scripts não estão na imagem!'

        echo '🔍 VERIFICANDO ESTRUTURA COMPLETA DA IMAGEM...'
        docker run --rm digiurban-unified-digiurban ls -la /app/ || echo '❌ Não foi possível listar /app/'

        echo '🚀 Iniciando container (setup automático do banco incluído)...'
        if docker compose up -d; then
          echo '✅ Container iniciado - setup do banco executando automaticamente'
        else
          echo '❌ Falha ao iniciar container'
          echo '🔍 Verificando logs de erro...'
          docker compose logs --tail=20
          exit 1
        fi

        echo '📊 Status dos containers:'
        docker compose ps

        echo '🔍 Verificando se container está rodando...'
        if docker ps | grep -q '${{ env.CONTAINER_NAME }}'; then
          echo '✅ Container ${{ env.CONTAINER_NAME }} está rodando'
        else
          echo '❌ Container ${{ env.CONTAINER_NAME }} não está rodando!'
          echo '📝 Logs do container:'
          docker compose logs --tail=50
          exit 1
        fi

        echo '🔍 Verificando logs iniciais do setup...'
        docker logs ${{ env.CONTAINER_NAME }} --tail=20

        echo '🔍 DIAGNÓSTICO: Verificar se scripts existem DENTRO do container...'
        docker exec ${{ env.CONTAINER_NAME }} ls -la /app/scripts/ || echo '❌ PASTA SCRIPTS NÃO EXISTE NO CONTAINER!'

        echo '🔍 Verificando se start-services.sh existe...'
        docker exec ${{ env.CONTAINER_NAME }} ls -la /app/start-services.sh || echo '❌ start-services.sh não existe!'

        echo '🔍 Verificando estrutura completa de /app...'
        docker exec ${{ env.CONTAINER_NAME }} ls -la /app/ || echo '❌ Não foi possível listar /app/'

        echo '🔍 Verificando processos internos...'
        docker exec ${{ env.CONTAINER_NAME }} ps aux || echo '⚠️ Não foi possível verificar processos'

        echo '🔍 Verificando se portas estão abertas...'
        docker exec ${{ env.CONTAINER_NAME }} netstat -tlnp | grep ':3020\|:3021' || echo '⚠️ Portas ainda não abertas'
        "

    - name: ⏳ Aguardar Sistema Estabilizar
      run: |
        echo "⏳ Aguardando sistema estabilizar (setup automático do banco)..."
        echo "=============================================================="

        echo "🔄 Container está executando start-services.sh automaticamente:"
        echo "   📁 Criando diretórios"
        echo "   🗃️ Configurando banco de dados"
        echo "   🌱 Executando seeds"
        echo "   🔓 Ativando usuários"
        echo "   🚀 Iniciando PM2 e Nginx"

        echo ""
        echo "⏳ Aguardando conclusão do setup (30 segundos)..."
        sleep 30

        echo "🔍 Verificando progresso após 30s..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}

        echo '📊 Status final dos containers:'
        docker compose ps

        echo '📝 Logs recentes (últimas 30 linhas):'
        docker logs ${{ env.CONTAINER_NAME }} --tail=30

        echo '🔍 Verificando se serviços estão rodando:'
        docker exec ${{ env.CONTAINER_NAME }} ps aux | grep -E 'node|nginx|pm2' || echo '⚠️ Serviços ainda iniciando...'

        echo '🌐 Verificando portas:'
        docker exec ${{ env.CONTAINER_NAME }} netstat -tlnp | grep -E ':3020|:3021' || echo '⚠️ Portas ainda não abertas'
        "

    - name: 🏥 Health Check Rápido
      run: |
        echo "🏥 Verificando sistema..."

        # Aguardar mínimo
        sleep 10

        # Health Check API - tentativas rápidas
        for i in {1..12}; do
          if curl -f http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api/health >/dev/null 2>&1; then
            echo "✅ API funcionando"
            break
          else
            echo "⏳ Aguardando API ($i/12)..."
            sleep 5
          fi

          if [ $i -eq 12 ]; then
            echo "❌ API não respondeu após 12 tentativas"
            echo "🔍 Diagnosticando problema..."

            sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
            cd ${{ env.APP_DIR }}
            echo '📊 Status dos containers:'
            docker compose ps
            echo ''
            echo '📝 Logs completos do container:'
            docker logs ${{ env.CONTAINER_NAME }} --tail=100
            echo ''
            echo '🔍 Processos rodando no container:'
            docker exec ${{ env.CONTAINER_NAME }} ps aux
            echo ''
            echo '🌐 Portas abertas:'
            docker exec ${{ env.CONTAINER_NAME }} netstat -tlnp
            "

            exit 1
          fi
        done

        # Health Check Frontend
        if curl -f http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/ >/dev/null 2>&1; then
          echo "✅ Frontend funcionando"
        else
          echo "❌ Frontend falhou"
          exit 1
        fi

        echo "✅ Sistema validado"


    - name: 📊 Relatório Final
      if: always()
      run: |
        echo "📊 RELATÓRIO FINAL DO DEPLOY"
        echo "=========================="
        echo "🎯 Ambiente: Produção"
        echo "🌐 URL: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "📅 Deploy: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "📦 Commit: ${{ github.sha }}"
        echo "✅ Status: DEPLOY CONCLUÍDO"

    - name: ✅ Verificação Final
      if: success()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))

        echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
        echo "================================"
        echo "⏱️  Tempo total: $DURATION_FORMATTED"
        echo "🌐 Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "🏥 Health Check: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api/health"
        echo "📊 Status: ONLINE ✅"
        echo ""
        echo "🎊🎊🎊 DEPLOY FINALIZADO COM SUCESSO! 🎊🎊🎊"

    - name: ❌ Deploy Failed
      if: failure()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))

        echo "❌ DEPLOY FALHOU!"
        echo "=================="
        echo "⏱️  Tempo até falha: $DURATION_FORMATTED"
        echo "📊 Status: FAILED ❌"
        echo ""
        echo "💥💥💥 DEPLOY FALHOU 💥💥💥"

        exit 1