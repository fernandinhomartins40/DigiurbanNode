name: Deploy DigiUrban Unified System

concurrency:
  group: digiurban-unified-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.112'
  VPS_USER: 'root'
  APP_DIR: '/root/digiurban-unified'
  APP_PORT: '3020'
  CONTAINER_NAME: 'digiurban-unified'

jobs:
  deploy:
    name: Deploy Unified Container
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Info do Deploy
      run: |
        echo "Deploy DigiUrban Unified System"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

    - name: Configurar SSH
      run: |
        echo "Configurando SSH para deploy..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'SSH OK'"; then
          echo "SSH configurado com sucesso"
        else
          echo "Falha na conexao SSH"
          exit 1
        fi

    - name: Checkout codigo
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Instalar dependencias na VPS
      run: |
        echo "Instalando Node.js, npm e Docker na VPS..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '=== Atualizando sistema ==='
        apt-get update -y
        
        echo '=== Instalando Node.js 20.x ==='
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt-get install -y nodejs
        
        echo '=== Removendo Docker conflitante ==='
        apt-get remove -y docker docker-engine docker.io containerd runc containerd.io 2>/dev/null || true
        apt-get autoremove -y
        
        echo '=== Instalando Docker via repositório oficial ==='
        apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo \\\"deb [arch=\\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\$(lsb_release -cs) stable\\\" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update -y
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        
        echo '=== Configurando Docker ==='
        systemctl start docker
        systemctl enable docker
        usermod -aG docker root
        
        echo '=== Verificando versões ==='
        node --version
        npm --version
        docker --version
        docker ps || echo 'Docker service starting...'
        "

    - name: Limpar containers antigos
      run: |
        echo "Limpando containers antigos..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '=== Parando container existente ==='
        docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
        
        echo '=== Limpando imagens antigas ==='
        docker rmi digiurban-unified:latest 2>/dev/null || true
        
        echo '=== Limpeza de sistema Docker ==='
        docker system prune -f || true
        
        echo '=== Preparando diretorio ==='
        rm -rf ${{ env.APP_DIR }}
        mkdir -p ${{ env.APP_DIR }}
        "

    - name: Transferir codigo
      run: |
        echo "Transferindo codigo..."
        sudo apt-get install -y rsync
        sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete --exclude='.git/' --exclude='node_modules/' --exclude='frontend/node_modules/' --exclude='backend/node_modules/' --exclude='frontend/dist/' --exclude='.claude/' -e "ssh -o StrictHostKeyChecking=no" ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/

    - name: Build e Deploy Container Unificado
      run: |
        echo "Building container unificado..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        echo '=== Verificando estrutura do projeto ==='
        ls -la
        
        echo '=== Verificando arquivos necessários ==='
        ls -la Dockerfile docker-compose.yml nginx-unified.conf start-services.sh
        
        echo '=== Verificando estrutura backend/frontend ==='
        ls -la backend/ frontend/ 2>/dev/null || echo 'Estrutura monorepo detectada'
        
        echo '=== Tornando script executável ==='
        chmod +x start-services.sh
        
        echo '=== Executando migrações de banco ==='
        cd backend && npm install --production && cd ..
        
        echo '=== Building com docker-compose ==='
        docker-compose build --no-cache
        
        echo '=== Iniciando container unificado ==='
        docker-compose up -d
        
        echo '=== Verificando status do container ==='
        docker-compose ps
        
        echo '=== Aguardando inicialização (90s) ==='
        sleep 90
        
        echo '=== Testando health check backend ==='
        curl -f http://localhost:3020/api/health || echo 'Backend health check aguardando...'
        
        echo '=== Testando aplicação frontend ==='
        curl -f http://localhost:3020/ || echo 'Frontend aguardando...'
        sleep 30
        
        echo '=== Testando novamente ==='
        curl -f http://localhost:3020/api/health || echo 'Health check falhou'
        curl -f http://localhost:3020/ || echo 'Frontend falhou'
        
        echo '=== Verificando logs completos ==='
        docker-compose logs --tail=100
        
        echo '=== Status final dos containers ==='
        docker ps
        
        echo 'Deploy do sistema DigiUrban concluído!'
        "

    - name: Verificacao Final
      run: |
        echo "Verificacao final..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        docker ps
        echo 'Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}'
        echo 'Health Check: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health'
        "

    - name: Deploy Concluido
      run: |
        echo "DEPLOY CONCLUIDO COM SUCESSO!"
        echo "Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "Health Check: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health"