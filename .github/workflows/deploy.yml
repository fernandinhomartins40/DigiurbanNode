name: 🚀 Deploy DigiUrban Unified System

concurrency:
  group: digiurban-unified-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.108'
  VPS_USER: 'root'
  APP_DIR: '/root/digiurban-unified'
  APP_PORT: '3020'
  CONTAINER_NAME: 'digiurban-unified'

jobs:
  deploy:
    name: 🎯 Deploy Unified Container
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📋 Informações do Deploy
      run: |
        echo "=============================================="
        echo "🚀 INICIANDO DEPLOY DIGIURBAN UNIFIED SYSTEM"
        echo "=============================================="
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "🎯 Target: ${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "=============================================="
        
        # Variável para tracking do tempo
        echo "DEPLOY_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: 🔧 Configurar SSH e Ferramentas
      run: |
        echo "🔧 Configurando SSH e ferramentas necessárias..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass rsync curl jq
        
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        
        echo "🔐 Testando conexão SSH..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo '✅ SSH funcionando'"; then
          echo "✅ SSH configurado com sucesso"
        else
          echo "❌ Falha na conexão SSH"
          exit 1
        fi

    - name: 📥 Checkout do Código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📊 Análise Pre-Deploy
      run: |
        echo "📊 Analisando estrutura do projeto..."
        echo "=================================="
        
        echo "📁 Estrutura raiz:"
        ls -la
        
        echo ""
        echo "📁 Backend:"
        if [ -d "backend" ]; then
          ls -la backend/
          if [ -f "backend/package.json" ]; then
            echo "✅ package.json encontrado"
            echo "📦 Dependências principais:"
            cat backend/package.json | jq -r '.dependencies | keys | .[]' | head -5
          fi
        else
          echo "❌ Diretório backend não encontrado"
        fi
        
        echo ""
        echo "📁 Frontend:"
        if [ -d "frontend" ]; then
          ls -la frontend/
          if [ -f "frontend/package.json" ]; then
            echo "✅ package.json encontrado"
            echo "📦 Dependências principais:"
            cat frontend/package.json | jq -r '.dependencies | keys | .[]' | head -5
          fi
        else
          echo "❌ Diretório frontend não encontrado"
        fi
        
        echo ""
        echo "🐳 Docker:"
        ls -la Dockerfile* docker-compose* 2>/dev/null || echo "⚠️ Arquivos Docker não encontrados"

    - name: 🏗️ Build Local do Backend
      run: |
        echo "🏗️ Iniciando build local do backend..."
        echo "======================================"
        
        if [ ! -d "backend" ]; then
          echo "❌ Diretório backend não encontrado"
          exit 1
        fi
        
        cd backend
        
        echo "📦 Instalando dependências do backend..."
        if npm install; then
          echo "✅ Dependências instaladas com sucesso"
        else
          echo "❌ Falha ao instalar dependências"
          exit 1
        fi
        
        echo "🔨 Compilando TypeScript..."
        if npm run build; then
          echo "✅ Build do backend concluído com sucesso"
          echo "📊 Analisando build:"
          ls -la dist/
          echo "📈 Tamanho do build: $(du -sh dist/)"
          echo "📝 Arquivos gerados: $(find dist/ -type f | wc -l)"
        else
          echo "❌ Falha no build do backend"
          exit 1
        fi

    - name: ⚛️ Build Local do Frontend  
      run: |
        echo "⚛️ Iniciando build local do frontend..."
        echo "======================================"
        
        if [ ! -d "frontend" ]; then
          echo "❌ Diretório frontend não encontrado"
          exit 1
        fi
        
        cd frontend
        
        echo "📦 Instalando dependências do frontend..."
        if npm install; then
          echo "✅ Dependências instaladas com sucesso"
        else
          echo "❌ Falha ao instalar dependências"
          exit 1
        fi
        
        echo "🔨 Compilando React/Vite..."
        if npm run build; then
          echo "✅ Build do frontend concluído com sucesso"
          echo "📊 Analisando build:"
          ls -la dist/
          echo "📈 Tamanho do build: $(du -sh dist/)"
          echo "📝 Arquivos gerados: $(find dist/ -type f | wc -l)"
          
          # Verificar se arquivos essenciais foram gerados
          if [ -f "dist/index.html" ]; then
            echo "✅ index.html encontrado"
          else
            echo "❌ index.html não encontrado"
            exit 1
          fi
        else
          echo "❌ Falha no build do frontend"
          exit 1
        fi

    - name: 🧹 Preparar VPS
      run: |
        echo "🧹 Preparando ambiente na VPS..."
        echo "================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🔄 Atualizando sistema...'
        apt-get update -y > /dev/null 2>&1
        
        echo '🟢 Instalando Node.js 20.x...'
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - > /dev/null 2>&1
        apt-get install -y nodejs > /dev/null 2>&1
        
        echo '🐳 Configurando Docker...'
        apt-get remove -y docker docker-engine docker.io containerd runc containerd.io 2>/dev/null || true
        apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release > /dev/null 2>&1
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 2>/dev/null
        echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update -y > /dev/null 2>&1
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin > /dev/null 2>&1
        
        systemctl start docker
        systemctl enable docker
        
        echo '✅ Versões instaladas:'
        node --version
        npm --version
        docker --version
        "

    - name: 🧹 Limpeza de Containers Antigos
      run: |
        echo "🧹 Removendo containers e imagens antigas..."
        echo "============================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🛑 Parando TODOS os containers DigiUrban...'
        
        # Parar containers da arquitetura antiga (se existirem)
        docker stop digiurban-frontend digiurban-backend 2>/dev/null && echo '✅ Containers antigos parados' || echo 'ℹ️  Nenhum container antigo'
        docker rm digiurban-frontend digiurban-backend 2>/dev/null && echo '✅ Containers antigos removidos' || echo 'ℹ️  Nenhum container antigo para remover'
        
        # Parar container unificado atual
        docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null && echo '✅ Container unificado parado' || echo 'ℹ️  Nenhum container unificado rodando'
        docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null && echo '✅ Container unificado removido' || echo 'ℹ️  Nenhum container unificado para remover'
        
        echo '🗑️  Removendo TODAS as imagens DigiUrban...'
        docker rmi digiurban-frontend:latest digiurban-backend:latest digiurban-unified:latest 2>/dev/null && echo '✅ Imagens antigas removidas' || echo 'ℹ️  Nenhuma imagem antiga para remover'
        
        echo '🧽 Limpeza de sistema Docker...'
        docker system prune -f > /dev/null 2>&1 && echo '✅ Sistema limpo'
        
        echo '📁 Preparando diretório...'
        rm -rf ${{ env.APP_DIR }}
        mkdir -p ${{ env.APP_DIR }}
        echo '✅ Diretório preparado'
        "

    - name: 📤 Transferir Código para VPS
      run: |
        echo "📤 Transferindo código para VPS..."
        echo "=================================="
        
        echo "📊 Analisando arquivos a transferir..."
        echo "Tamanho total: $(du -sh . | cut -f1)"
        
        echo "🚀 Iniciando transferência..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --progress --delete \
          --exclude='.git/' \
          --exclude='node_modules/' \
          --exclude='frontend/node_modules/' \
          --exclude='backend/node_modules/' \
          --exclude='.claude/' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/; then
          echo "✅ Código transferido com sucesso"
        else
          echo "❌ Falha na transferência"
          exit 1
        fi

    - name: 🐳 Build e Deploy Container
      run: |
        echo "🐳 Construindo e deployando container..."
        echo "======================================="
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        echo '📋 Verificando estrutura transferida...'
        ls -la
        
        echo '🔍 Verificando arquivos Docker...'
        ls -la Dockerfile docker-compose.yml nginx-unified.conf start-services.sh 2>/dev/null || echo '⚠️ Alguns arquivos Docker podem estar ausentes'
        
        echo '✅ Tornando scripts executáveis...'
        chmod +x start-services.sh 2>/dev/null || echo 'ℹ️  Script não encontrado'
        
        echo '🏗️ Construindo container (isso pode levar alguns minutos)...'
        if docker compose build --no-cache; then
          echo '✅ Container construído com sucesso'
        else
          echo '❌ Falha na construção do container'
          exit 1
        fi
        
        echo '🚀 Iniciando container...'
        if docker compose up -d; then
          echo '✅ Container iniciado'
        else
          echo '❌ Falha ao iniciar container'
          exit 1
        fi
        
        echo '📊 Status dos containers:'
        docker compose ps
        "

    - name: 🗃️ Executar Database Migrations
      run: |
        echo "🗃️ Executando migrations do banco de dados..."
        echo "============================================="
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        echo '🔍 Verificando estrutura de migrations...'
        if [ -d 'migrations' ]; then
          echo '✅ Pasta migrations encontrada'
          ls -la migrations/
          echo ''
          echo '📊 Migrations disponíveis:'
          ls migrations/A*.sql 2>/dev/null | wc -l | xargs -I {} echo '{} migrations encontradas'
        else
          echo '❌ Pasta migrations não encontrada'
          exit 1
        fi
        
        echo ''
        echo '🧹 Limpando banco anterior se necessário...'
        docker exec ${{ env.CONTAINER_NAME }} sh -c \"
          if [ -f '/app/data/digiurban.db' ]; then
            echo 'Removendo banco anterior...'
            rm -f /app/data/digiurban.db*
            echo '✅ Banco anterior removido'
          else
            echo 'ℹ️ Nenhum banco anterior encontrado'
          fi
        \"
        
        echo ''
        echo '🚀 Executando migrations no container...'
        
        # Aguardar container estar totalmente iniciado
        sleep 10
        
        # Executar migrations via Knex nativo
        if docker exec -e NODE_ENV=production ${{ env.CONTAINER_NAME }} sh -c 'cd /app/backend && npm run knex:migrate'; then
          echo '✅ Migrations executadas com sucesso'
          
          echo ''
          echo '🎯 Criando super admin inicial...'
          docker exec -e NODE_ENV=production -e INITIAL_ADMIN_EMAIL=admin@digiurban.com.br -e INITIAL_ADMIN_PASSWORD=SuperAdmin2024 -e INITIAL_ADMIN_NAME='Super Administrador' ${{ env.CONTAINER_NAME }} sh -c 'cd /app/backend && npm run knex:seed' || echo '⚠️ Super admin pode já existir'
          
          # Verificar integridade do banco
          echo ''
          echo '🔍 Verificando integridade do banco...'
          docker exec ${{ env.CONTAINER_NAME }} sh -c \"
            cd /app/backend && node -e \\\"
              import('./dist/database/connection.js').then(async ({ getDatabase }) => {
                try {
                  const db = getDatabase();
                  
                  // Verificar tabelas criadas
                  const tables = db.prepare('SELECT name FROM sqlite_master WHERE type=\\\\\\\\\\\\\\\"table\\\\\\\\\\\\\\\" ORDER BY name').all();
                  console.log('📋 Tabelas criadas:', tables.length);
                  tables.forEach(t => console.log('  •', t.name));
                  
                  // Verificar migrations aplicadas
                  const migrations = db.prepare('SELECT id, filename FROM schema_migrations ORDER BY sequence_number').all();
                  console.log('📝 Migrations aplicadas:', migrations.length);
                  migrations.forEach(m => console.log('  •', m.id, '-', m.filename));
                  
                  // Verificar usuário admin
                  const admin = db.prepare('SELECT email, role, status FROM users WHERE role = \\\\\\\\\\\\\\\"super_admin\\\\\\\\\\\\\\\"').get();
                  console.log('👤 Super admin:', admin ? admin.email : 'NÃO ENCONTRADO');
                  
                } catch (error) {
                  console.error('❌ Erro na verificação:', error.message);
                }
              });
            \\\"
          \" || echo '⚠️ Não foi possível verificar integridade completa'
          
          echo ''
          echo '🧪 Testando login do super admin...'
          sleep 5
          if curl -f -X POST http://localhost:3020/api/auth/login -H 'Content-Type: application/json' -d '{\\\"email\\\":\\\"admin@digiurban.com.br\\\",\\\"password\\\":\\\"SuperAdmin2024\\\"}' --max-time 10 | grep -q '\\\"success\\\":true'; then
            echo '✅ Login do super admin funcionando!'
          else
            echo '⚠️ Login do super admin não testado com sucesso'
          fi
          
        else
          echo '❌ Falha ao executar migrations'
          echo ''
          echo '🔍 Verificando logs do container...'
          docker logs ${{ env.CONTAINER_NAME }} --tail 50
          exit 1
        fi
        "

    - name: 🏥 Health Checks Inteligentes
      run: |
        echo "🏥 Executando health checks inteligentes..."
        echo "=========================================="
        
        # Função para health check com retry
        health_check() {
          local url=$1
          local name=$2
          local max_attempts=20
          local delay=15
          
          echo "🔍 Verificando $name..."
          
          for attempt in $(seq 1 $max_attempts); do
            local total_wait=$((attempt * delay))
            echo "⏳ Tentativa $attempt/$max_attempts (${total_wait}s total) - $name"
            
            local response=$(curl -s -o /dev/null -w "%{http_code}|%{time_total}" "$url" 2>/dev/null || echo "000|0")
            local http_code=$(echo $response | cut -d'|' -f1)
            local time_total=$(echo $response | cut -d'|' -f2)
            
            case $http_code in
              200)
                echo "✅ $name: Respondendo corretamente (${time_total}s)"
                return 0
                ;;
              000)
                echo "⏳ $name: Serviço ainda não responde..."
                ;;
              *)
                echo "⚠️  $name: HTTP $http_code (aguardando...)"
                ;;
            esac
            
            if [ $attempt -lt $max_attempts ]; then
              sleep $delay
            fi
          done
          
          echo "❌ $name: Falhou após ${max_attempts} tentativas (${total_wait}s total)"
          return 1
        }
        
        echo ""
        echo "🏥 Aguardando inicialização completa (60s)..."
        sleep 60
        
        # Health check do backend
        if health_check "http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api/health" "Backend API"; then
          echo "✅ Backend está funcionando!"
        else
          echo "❌ Backend não está respondendo"
          BACKEND_FAILED=1
        fi
        
        echo ""
        
        # Health check do frontend
        if health_check "http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/" "Frontend"; then
          echo "✅ Frontend está funcionando!"
        else
          echo "❌ Frontend não está respondendo"
          FRONTEND_FAILED=1
        fi
        
        # Verificar logs se houver falha
        if [ "${BACKEND_FAILED}" = "1" ] || [ "${FRONTEND_FAILED}" = "1" ]; then
          echo ""
          echo "🔍 Coletando logs para diagnóstico..."
          echo "===================================="
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          echo '📋 Status dos containers:'
          docker compose ps
          echo ''
          echo '📝 Logs recentes (últimas 50 linhas):'
          docker compose logs --tail=50
          "
          
          exit 1
        fi

    - name: ✅ Verificação Final e Resumo
      if: success()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))
        
        echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
        echo "================================"
        echo "⏱️  Tempo total: $DURATION_FORMATTED"
        echo "🌐 Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "🏥 Health Check: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api/health"
        echo "📊 Status: ONLINE ✅"
        echo ""
        
        # Verificação final dos serviços
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        echo '📊 Status final dos containers:'
        docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
        echo ''
        echo '💾 Uso de recursos:'
        docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}'
        "
        
        echo ""
        echo "🎊🎊🎊 DEPLOY FINALIZADO COM SUCESSO! 🎊🎊🎊"

    - name: ❌ Deploy Failed - Diagnóstico
      if: failure()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))
        
        echo "❌ DEPLOY FALHOU!"
        echo "=================="
        echo "⏱️  Tempo até falha: $DURATION_FORMATTED"
        echo "📊 Status: FAILED ❌"
        echo ""
        echo "🔍 Coletando informações de diagnóstico..."
        
        # Coletar logs detalhados
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '📋 Containers em execução:'
        docker ps -a
        echo ''
        echo '📝 Logs completos do sistema:'
        cd ${{ env.APP_DIR }} 2>/dev/null && docker compose logs --tail=100 || echo 'Não foi possível acessar logs do docker compose'
        echo ''
        echo '💾 Uso de disco:'
        df -h
        echo ''
        echo '🧠 Uso de memória:'
        free -h
        " 2>/dev/null || echo "Não foi possível conectar à VPS para diagnóstico"
        
        echo ""
        echo "💥💥💥 DEPLOY FALHOU - VERIFIQUE OS LOGS ACIMA 💥💥💥"
        
        exit 1