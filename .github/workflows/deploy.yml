name: Deploy DigiUrban JWT System

concurrency:
  group: digiurban-jwt-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.112'
  VPS_USER: 'root'
  APP_DIR: '/root/digiurban-jwt'
  FRONTEND_PORT: '3020'
  BACKEND_PORT: '3000'
  FRONTEND_CONTAINER: 'digiurban-frontend'
  BACKEND_CONTAINER: 'digiurban-backend'

jobs:
  deploy:
    name: Deploy Full Stack
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Info do Deploy
      run: |
        echo "Deploy DigiUrban JWT Full Stack System"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

    - name: Configurar SSH
      run: |
        echo "Configurando SSH para deploy..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'SSH OK'"; then
          echo "SSH configurado com sucesso"
        else
          echo "Falha na conexao SSH"
          exit 1
        fi

    - name: Checkout codigo
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Transferir codigo
      run: |
        echo "Transferindo codigo..."
        sudo apt-get install -y rsync
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "docker stop ${{ env.FRONTEND_CONTAINER }} ${{ env.BACKEND_CONTAINER }} 2>/dev/null || true; docker rm ${{ env.FRONTEND_CONTAINER }} ${{ env.BACKEND_CONTAINER }} 2>/dev/null || true; rm -rf ${{ env.APP_DIR }}; mkdir -p ${{ env.APP_DIR }}"
        sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete --exclude='.git/' --exclude='node_modules/' --exclude='frontend/node_modules/' --exclude='backend/node_modules/' --exclude='frontend/dist/' --exclude='.claude/' -e "ssh -o StrictHostKeyChecking=no" ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/

    - name: Build Backend
      run: |
        echo "Building Backend..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd ${{ env.APP_DIR }}/backend && npm ci --production && echo 'FROM node:20-alpine
        WORKDIR /app
        RUN apk add --no-cache sqlite
        COPY package*.json ./
        RUN npm ci --production
        COPY . .
        EXPOSE 3000
        CMD [\"npm\", \"start\"]' > Dockerfile && docker build -t digiurban-backend:latest . && docker run -d --name ${{ env.BACKEND_CONTAINER }} -p ${{ env.BACKEND_PORT }}:3000 --restart unless-stopped -e NODE_ENV=production digiurban-backend:latest"

    - name: Build Frontend
      run: |
        echo "Building Frontend..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cd ${{ env.APP_DIR }}/frontend && npm ci && VITE_API_URL=http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }} npm run build && echo 'FROM nginx:alpine
        COPY dist/ /usr/share/nginx/html/
        EXPOSE 80
        CMD [\"nginx\", \"-g\", \"daemon off;\"]' > Dockerfile && docker build -t digiurban-frontend:latest . && docker run -d --name ${{ env.FRONTEND_CONTAINER }} -p ${{ env.FRONTEND_PORT }}:80 --restart unless-stopped digiurban-frontend:latest"

    - name: Verificacao Final
      run: |
        echo "Verificacao final..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "docker ps && echo 'Frontend: http://${{ env.VPS_HOST }}:${{ env.FRONTEND_PORT }}' && echo 'Backend: http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}'"

    - name: Deploy Concluido
      run: |
        echo "DEPLOY CONCLUIDO COM SUCESSO!"
        echo "Frontend: http://${{ env.VPS_HOST }}:${{ env.FRONTEND_PORT }}"
        echo "Backend: http://${{ env.VPS_HOST }}:${{ env.BACKEND_PORT }}"